
DMA_Byte_Replication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a4  080032a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032ac  080032ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003324  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003324  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000722f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001518  00000000  00000000  000272cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  000287e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  00028e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000156ff  00000000  00000000  00029460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006209  00000000  00000000  0003eb5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084b97  00000000  00000000  00044d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c98ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc8  00000000  00000000  000c997c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800320c 	.word	0x0800320c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800320c 	.word	0x0800320c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(LED_BANK, LED_PIN, LOW);
 8000596:	2200      	movs	r2, #0
 8000598:	2120      	movs	r1, #32
 800059a:	485c      	ldr	r0, [pc, #368]	; (800070c <main+0x17c>)
 800059c:	f001 f8fc 	bl	8001798 <HAL_GPIO_WritePin>
	uint8_t srcData[DATA_SIZE];
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	3b01      	subs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	4619      	mov	r1, r3
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	f04f 0400 	mov.w	r4, #0
 80005ba:	00d4      	lsls	r4, r2, #3
 80005bc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80005c0:	00cb      	lsls	r3, r1, #3
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	f04f 0300 	mov.w	r3, #0
 80005d0:	f04f 0400 	mov.w	r4, #0
 80005d4:	00d4      	lsls	r4, r2, #3
 80005d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80005da:	00cb      	lsls	r3, r1, #3
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	3307      	adds	r3, #7
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	ebad 0d03 	sub.w	sp, sp, r3
 80005ea:	466b      	mov	r3, sp
 80005ec:	3300      	adds	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
	uint8_t dstData[DATA_SIZE];
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	3b01      	subs	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	f04f 0400 	mov.w	r4, #0
 800060a:	00d4      	lsls	r4, r2, #3
 800060c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000610:	00cb      	lsls	r3, r1, #3
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 0200 	mov.w	r2, #0
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	f04f 0400 	mov.w	r4, #0
 8000624:	00d4      	lsls	r4, r2, #3
 8000626:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800062a:	00cb      	lsls	r3, r1, #3
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	3307      	adds	r3, #7
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	ebad 0d03 	sub.w	sp, sp, r3
 800063a:	466b      	mov	r3, sp
 800063c:	3300      	adds	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < DATA_SIZE; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	e015      	b.n	8000672 <main+0xe2>
	{
		srcData[i] = i%DATA_SIZE;
 8000646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000650:	fb02 f201 	mul.w	r2, r2, r1
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	b2d9      	uxtb	r1, r3
 8000658:	693a      	ldr	r2, [r7, #16]
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
		dstData[i] = 0;
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4413      	add	r3, r2
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < DATA_SIZE; i++)
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	3301      	adds	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	4293      	cmp	r3, r2
 800067a:	dbe4      	blt.n	8000646 <main+0xb6>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fa9c 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f850 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f924 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 f8d6 	bl	8000838 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800068c:	f000 f8aa 	bl	80007e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Start(&myDMA, (uint32_t)srcData, (uint32_t)dstData, sizeof(srcData));
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	4619      	mov	r1, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	461a      	mov	r2, r3
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	481c      	ldr	r0, [pc, #112]	; (8000710 <main+0x180>)
 800069e:	f000 fc91 	bl	8000fc4 <HAL_DMA_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printmsg("waiting for ISR...\n\n");
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <main+0x184>)
 80006a4:	f000 f946 	bl	8000934 <printmsg>
	HAL_StatusTypeDef DMA_Status = HAL_DMA_PollForTransfer(&myDMA, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 80006a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006ac:	2100      	movs	r1, #0
 80006ae:	4818      	ldr	r0, [pc, #96]	; (8000710 <main+0x180>)
 80006b0:	f000 fd33 	bl	800111a <HAL_DMA_PollForTransfer>
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
	if(DMA_Status == HAL_OK)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f1      	bne.n	80006a2 <main+0x112>
	{
		printmsg("| ");
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <main+0x188>)
 80006c0:	f000 f938 	bl	8000934 <printmsg>
		for(int i = 0; i < DATA_SIZE; i++){
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	e015      	b.n	80006f6 <main+0x166>
			if(i%16 == 0 && i){
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d105      	bne.n	80006e0 <main+0x150>
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <main+0x150>
				printmsg("\n| ");
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <main+0x18c>)
 80006dc:	f000 f92a 	bl	8000934 <printmsg>
			}
			printmsg("0x%02X | ", dstData[i]);
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <main+0x190>)
 80006ec:	f000 f922 	bl	8000934 <printmsg>
		for(int i = 0; i < DATA_SIZE; i++){
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	3301      	adds	r3, #1
 80006f4:	61fb      	str	r3, [r7, #28]
 80006f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	4293      	cmp	r3, r2
 80006fe:	dbe4      	blt.n	80006ca <main+0x13a>
		}
		HAL_GPIO_WritePin(LED_BANK, LED_PIN, HIGH);
 8000700:	2201      	movs	r2, #1
 8000702:	2120      	movs	r1, #32
 8000704:	4801      	ldr	r0, [pc, #4]	; (800070c <main+0x17c>)
 8000706:	f001 f847 	bl	8001798 <HAL_GPIO_WritePin>
		while(1);
 800070a:	e7fe      	b.n	800070a <main+0x17a>
 800070c:	40020000 	.word	0x40020000
 8000710:	20000098 	.word	0x20000098
 8000714:	08003224 	.word	0x08003224
 8000718:	0800323c 	.word	0x0800323c
 800071c:	08003240 	.word	0x08003240
 8000720:	08003244 	.word	0x08003244

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 f95c 	bl	80029f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <SystemClock_Config+0xb8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a22      	ldr	r2, [pc, #136]	; (80007dc <SystemClock_Config+0xb8>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <SystemClock_Config+0xb8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <SystemClock_Config+0xbc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <SystemClock_Config+0xbc>)
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <SystemClock_Config+0xbc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f817 	bl	80017cc <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007a4:	f000 f8ec 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fa72 	bl	8001cac <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ce:	f000 f8d7 	bl	8000980 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800081c:	f001 fc12 	bl	8002044 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f8ab 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000f8 	.word	0x200000f8
 8000834:	40004400 	.word	0x40004400

08000838 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_DMA_Init+0x8c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <MX_DMA_Init+0x8c>)
 8000848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_DMA_Init+0x8c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  myDMA.Instance = DMA2_Stream0;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_DMA_Init+0x90>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_DMA_Init+0x94>)
 800085e:	601a      	str	r2, [r3, #0]
  myDMA.Init.Channel = DMA_CHANNEL_0;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_DMA_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  myDMA.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_DMA_Init+0x90>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	609a      	str	r2, [r3, #8]
  myDMA.Init.PeriphInc = DMA_PINC_ENABLE;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_DMA_Init+0x90>)
 800086e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000872:	60da      	str	r2, [r3, #12]
  myDMA.Init.MemInc = DMA_MINC_ENABLE;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_DMA_Init+0x90>)
 8000876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087a:	611a      	str	r2, [r3, #16]
  myDMA.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_DMA_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  myDMA.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_DMA_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  myDMA.Init.Mode = DMA_NORMAL;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_DMA_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  myDMA.Init.Priority = DMA_PRIORITY_LOW;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_DMA_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  myDMA.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA_Init+0x90>)
 8000896:	2204      	movs	r2, #4
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  myDMA.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_DMA_Init+0x90>)
 800089c:	2203      	movs	r2, #3
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  myDMA.Init.MemBurst = DMA_MBURST_SINGLE;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_DMA_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  myDMA.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_DMA_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&myDMA) != HAL_OK)
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_DMA_Init+0x90>)
 80008ae:	f000 fadb 	bl	8000e68 <HAL_DMA_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 80008b8:	f000 f862 	bl	8000980 <Error_Handler>
  }

}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	20000098 	.word	0x20000098
 80008cc:	40026410 	.word	0x40026410

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_GPIO_Init+0x5c>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <MX_GPIO_Init+0x5c>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0x5c>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2120      	movs	r1, #32
 8000904:	480a      	ldr	r0, [pc, #40]	; (8000930 <MX_GPIO_Init+0x60>)
 8000906:	f000 ff47 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800090a:	2320      	movs	r3, #32
 800090c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0x60>)
 8000920:	f000 fdb8 	bl	8001494 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(char *format,...) {
 8000934:	b40f      	push	{r0, r1, r2, r3}
 8000936:	b580      	push	{r7, lr}
 8000938:	b096      	sub	sp, #88	; 0x58
 800093a:	af00      	add	r7, sp, #0
    char str[80];

    /*Extract the the argument list using VA apis */
    va_list args;
    va_start(args, format);
 800093c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000940:	607b      	str	r3, [r7, #4]
    vsprintf(str, format,args);
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f86e 	bl	8002a2c <vsiprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fc43 	bl	80001e0 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	f107 0108 	add.w	r1, r7, #8
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <printmsg+0x48>)
 8000968:	f001 fbb9 	bl	80020de <HAL_UART_Transmit>
    va_end(args);
}
 800096c:	bf00      	nop
 800096e:	3758      	adds	r7, #88	; 0x58
 8000970:	46bd      	mov	sp, r7
 8000972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000976:	b004      	add	sp, #16
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200000f8 	.word	0x200000f8

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12b      	bne.n	8000a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a56:	f000 fd1d 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8ca 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d207      	bcs.n	8000b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000afc:	f001 ff4e 	bl	800299c <__errno>
 8000b00:	4602      	mov	r2, r0
 8000b02:	230c      	movs	r3, #12
 8000b04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <_sbrk+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20018000 	.word	0x20018000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	2000008c 	.word	0x2000008c
 8000b34:	20000140 	.word	0x20000140

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SystemInit+0x28>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <SystemInit+0x28>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SystemInit+0x28>)
 8000b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b52:	609a      	str	r2, [r3, #8]
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b6a:	e003      	b.n	8000b74 <LoopCopyDataInit>

08000b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b72:	3104      	adds	r1, #4

08000b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b7c:	d3f6      	bcc.n	8000b6c <CopyDataInit>
  ldr  r2, =_sbss
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b80:	e002      	b.n	8000b88 <LoopFillZerobss>

08000b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b84:	f842 3b04 	str.w	r3, [r2], #4

08000b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b8c:	d3f9      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8e:	f7ff ffd3 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f001 ff09 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fcfb 	bl	8000590 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ba0:	080032b4 	.word	0x080032b4
  ldr  r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ba8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000bac:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000bb0:	20000140 	.word	0x20000140

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f90d 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fed0 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f917 	bl	8000e4e <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c38:	f000 f8ed 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000138 	.word	0x20000138

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000138 	.word	0x20000138

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff47 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff5c 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffb0 	bl	8000dbc <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff ff06 	bl	8000c84 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e099      	b.n	8000fb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea4:	e00f      	b.n	8000ec6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ea6:	f7ff feed 	bl	8000c84 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d908      	bls.n	8000ec6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e078      	b.n	8000fb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e8      	bne.n	8000ea6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <HAL_DMA_Init+0x158>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d107      	bne.n	8000f30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f023 0307 	bic.w	r3, r3, #7
 8000f46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d117      	bne.n	8000f8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00e      	beq.n	8000f8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fa17 	bl	80013a0 <DMA_CheckFifoParam>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d008      	beq.n	8000f8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f86:	2301      	movs	r3, #1
 8000f88:	e016      	b.n	8000fb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f9ce 	bl	8001334 <DMA_CalcBaseAndBitshift>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa0:	223f      	movs	r2, #63	; 0x3f
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	f010803f 	.word	0xf010803f

08000fc4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_DMA_Start+0x20>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e026      	b.n	8001032 <HAL_DMA_Start+0x6e>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d115      	bne.n	8001024 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f000 f963 	bl	80012d8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e005      	b.n	8001030 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800102c:	2302      	movs	r3, #2
 800102e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001030:	7dfb      	ldrb	r3, [r7, #23]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff fe1c 	bl	8000c84 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d008      	beq.n	800106c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e052      	b.n	8001112 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0216 	bic.w	r2, r2, #22
 800107a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800108a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	2b00      	cmp	r3, #0
 8001092:	d103      	bne.n	800109c <HAL_DMA_Abort+0x62>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0208 	bic.w	r2, r2, #8
 80010aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010bc:	e013      	b.n	80010e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010be:	f7ff fde1 	bl	8000c84 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d90c      	bls.n	80010e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2220      	movs	r2, #32
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e015      	b.n	8001112 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e4      	bne.n	80010be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	223f      	movs	r2, #63	; 0x3f
 80010fa:	409a      	lsls	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b08a      	sub	sp, #40	; 0x28
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	460b      	mov	r3, r1
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8001128:	2300      	movs	r3, #0
 800112a:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 800112c:	f7ff fdaa 	bl	8000c84 <HAL_GetTick>
 8001130:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d008      	beq.n	8001150 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0bf      	b.n	80012d0 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0b2      	b.n	80012d0 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	2220      	movs	r2, #32
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
 800117c:	e005      	b.n	800118a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2210      	movs	r2, #16
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001196:	e05a      	b.n	800124e <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800119e:	d017      	beq.n	80011d0 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_DMA_PollForTransfer+0x9c>
 80011a6:	f7ff fd6d 	bl	8000c84 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d20c      	bcs.n	80011d0 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2220      	movs	r2, #32
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e07f      	b.n	80012d0 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2208      	movs	r2, #8
 80011dc:	409a      	lsls	r2, r3
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ea:	f043 0201 	orr.w	r2, r3, #1
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f6:	2208      	movs	r2, #8
 80011f8:	409a      	lsls	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	2201      	movs	r2, #1
 8001204:	409a      	lsls	r2, r3
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001212:	f043 0202 	orr.w	r2, r3, #2
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	2201      	movs	r2, #1
 8001220:	409a      	lsls	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	2204      	movs	r2, #4
 800122c:	409a      	lsls	r2, r3
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123a:	f043 0204 	orr.w	r2, r3, #4
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	2204      	movs	r2, #4
 8001248:	409a      	lsls	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800124e:	6a3a      	ldr	r2, [r7, #32]
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <HAL_DMA_PollForTransfer+0x14a>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d099      	beq.n	8001198 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	2b00      	cmp	r3, #0
 800126a:	d018      	beq.n	800129e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff fede 	bl	800103a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	409a      	lsls	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e018      	b.n	80012d0 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10e      	bne.n	80012c2 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	2230      	movs	r2, #48	; 0x30
 80012aa:	409a      	lsls	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80012c0:	e005      	b.n	80012ce <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c6:	2210      	movs	r2, #16
 80012c8:	409a      	lsls	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b40      	cmp	r3, #64	; 0x40
 8001304:	d108      	bne.n	8001318 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001316:	e007      	b.n	8001328 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	3b10      	subs	r3, #16
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <DMA_CalcBaseAndBitshift+0x64>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <DMA_CalcBaseAndBitshift+0x68>)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d909      	bls.n	8001376 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800136a:	f023 0303 	bic.w	r3, r3, #3
 800136e:	1d1a      	adds	r2, r3, #4
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	659a      	str	r2, [r3, #88]	; 0x58
 8001374:	e007      	b.n	8001386 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	aaaaaaab 	.word	0xaaaaaaab
 800139c:	08003268 	.word	0x08003268

080013a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d11f      	bne.n	80013fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d855      	bhi.n	800146c <DMA_CheckFifoParam+0xcc>
 80013c0:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <DMA_CheckFifoParam+0x28>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	080013eb 	.word	0x080013eb
 80013d0:	080013d9 	.word	0x080013d9
 80013d4:	0800146d 	.word	0x0800146d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d045      	beq.n	8001470 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013e8:	e042      	b.n	8001470 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013f2:	d13f      	bne.n	8001474 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013f8:	e03c      	b.n	8001474 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001402:	d121      	bne.n	8001448 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d836      	bhi.n	8001478 <DMA_CheckFifoParam+0xd8>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <DMA_CheckFifoParam+0x70>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	08001421 	.word	0x08001421
 8001414:	08001427 	.word	0x08001427
 8001418:	08001421 	.word	0x08001421
 800141c:	08001439 	.word	0x08001439
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
      break;
 8001424:	e02f      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d024      	beq.n	800147c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001436:	e021      	b.n	800147c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001440:	d11e      	bne.n	8001480 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001446:	e01b      	b.n	8001480 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d902      	bls.n	8001454 <DMA_CheckFifoParam+0xb4>
 800144e:	2b03      	cmp	r3, #3
 8001450:	d003      	beq.n	800145a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001452:	e018      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
      break;
 8001458:	e015      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00e      	beq.n	8001484 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
      break;
 800146a:	e00b      	b.n	8001484 <DMA_CheckFifoParam+0xe4>
      break;
 800146c:	bf00      	nop
 800146e:	e00a      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      break;
 8001470:	bf00      	nop
 8001472:	e008      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      break;
 8001474:	bf00      	nop
 8001476:	e006      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      break;
 8001478:	bf00      	nop
 800147a:	e004      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      break;
 800147c:	bf00      	nop
 800147e:	e002      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      break;   
 8001480:	bf00      	nop
 8001482:	e000      	b.n	8001486 <DMA_CheckFifoParam+0xe6>
      break;
 8001484:	bf00      	nop
    }
  } 
  
  return status; 
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	e159      	b.n	8001764 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b0:	2201      	movs	r2, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8148 	bne.w	800175e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d00b      	beq.n	80014ee <HAL_GPIO_Init+0x5a>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d130      	bne.n	8001550 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 0201 	and.w	r2, r3, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0xfc>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b12      	cmp	r3, #18
 800158e:	d123      	bne.n	80015d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	69b9      	ldr	r1, [r7, #24]
 80015d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a2 	beq.w	800175e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_GPIO_Init+0x2e4>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x2e4>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_GPIO_Init+0x2e4>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001636:	4a51      	ldr	r2, [pc, #324]	; (800177c <HAL_GPIO_Init+0x2e8>)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_GPIO_Init+0x2ec>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0x202>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x1fe>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a46      	ldr	r2, [pc, #280]	; (8001788 <HAL_GPIO_Init+0x2f4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x1fa>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_GPIO_Init+0x2f8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x1f6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a44      	ldr	r2, [pc, #272]	; (8001790 <HAL_GPIO_Init+0x2fc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x1f2>
 8001682:	2304      	movs	r3, #4
 8001684:	e008      	b.n	8001698 <HAL_GPIO_Init+0x204>
 8001686:	2307      	movs	r3, #7
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x204>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x204>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x204>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x204>
 8001696:	2300      	movs	r3, #0
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a8:	4934      	ldr	r1, [pc, #208]	; (800177c <HAL_GPIO_Init+0x2e8>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x300>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016da:	4a2e      	ldr	r2, [pc, #184]	; (8001794 <HAL_GPIO_Init+0x300>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_GPIO_Init+0x300>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001704:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_GPIO_Init+0x300>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_GPIO_Init+0x300>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172e:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_GPIO_Init+0x300>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_GPIO_Init+0x300>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_GPIO_Init+0x300>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	f67f aea2 	bls.w	80014b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800176c:	bf00      	nop
 800176e:	3724      	adds	r7, #36	; 0x24
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e25b      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d075      	beq.n	80018d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ea:	4ba3      	ldr	r3, [pc, #652]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d00c      	beq.n	8001810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4ba0      	ldr	r3, [pc, #640]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d112      	bne.n	8001828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	4b9d      	ldr	r3, [pc, #628]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4b99      	ldr	r3, [pc, #612]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d05b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x108>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d157      	bne.n	80018d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e236      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x74>
 8001832:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a90      	ldr	r2, [pc, #576]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xb0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x98>
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a8a      	ldr	r2, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xb0>
 8001864:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a83      	ldr	r2, [pc, #524]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a80      	ldr	r2, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f9fe 	bl	8000c84 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff f9fa 	bl	8000c84 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1fb      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xc0>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff f9ea 	bl	8000c84 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff f9e6 	bl	8000c84 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1e7      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0xe8>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d11c      	bne.n	8001934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x152>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1bb      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4952      	ldr	r1, [pc, #328]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	e03a      	b.n	80019aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_OscConfig+0x2b0>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f99f 	bl	8000c84 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff f99b 	bl	8000c84 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e19c      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4940      	ldr	r1, [pc, #256]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_OscConfig+0x2b0>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f97e 	bl	8000c84 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff f97a 	bl	8000c84 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e17b      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d030      	beq.n	8001a18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_RCC_OscConfig+0x2b4>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f95e 	bl	8000c84 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff f95a 	bl	8000c84 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e15b      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x200>
 80019ea:	e015      	b.n	8001a18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x2b4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f2:	f7ff f947 	bl	8000c84 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff f943 	bl	8000c84 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e144      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a0 	beq.w	8001b66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x2b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d121      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_RCC_OscConfig+0x2b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_RCC_OscConfig+0x2b8>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f909 	bl	8000c84 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e011      	b.n	8001a9a <HAL_RCC_OscConfig+0x2ce>
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470000 	.word	0x42470000
 8001a80:	42470e80 	.word	0x42470e80
 8001a84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a88:	f7ff f8fc 	bl	8000c84 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0fd      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_OscConfig+0x4d4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x2f0>
 8001aae:	4b7d      	ldr	r3, [pc, #500]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4a7c      	ldr	r2, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aba:	e01c      	b.n	8001af6 <HAL_RCC_OscConfig+0x32a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x312>
 8001ac4:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a76      	ldr	r2, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad0:	4b74      	ldr	r3, [pc, #464]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a73      	ldr	r2, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x32a>
 8001ade:	4b71      	ldr	r3, [pc, #452]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a70      	ldr	r2, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a6d      	ldr	r2, [pc, #436]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d015      	beq.n	8001b2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff f8c1 	bl	8000c84 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff f8bd 	bl	8000c84 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0bc      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4b61      	ldr	r3, [pc, #388]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ee      	beq.n	8001b06 <HAL_RCC_OscConfig+0x33a>
 8001b28:	e014      	b.n	8001b54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f8ab 	bl	8000c84 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff f8a7 	bl	8000c84 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0a6      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a51      	ldr	r2, [pc, #324]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8092 	beq.w	8001c94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d05c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d141      	bne.n	8001c08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f87b 	bl	8000c84 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff f877 	bl	8000c84 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e078      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69da      	ldr	r2, [r3, #28]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	019b      	lsls	r3, r3, #6
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	061b      	lsls	r3, r3, #24
 8001bd4:	4933      	ldr	r1, [pc, #204]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff f850 	bl	8000c84 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f84c 	bl	8000c84 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e04d      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x41c>
 8001c06:	e045      	b.n	8001c94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f839 	bl	8000c84 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff f835 	bl	8000c84 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e036      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x44a>
 8001c34:	e02e      	b.n	8001c94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e029      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCC_OscConfig+0x4d8>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d115      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10d      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	42470060 	.word	0x42470060

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0cc      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d90c      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d044      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d119      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e067      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8a:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f023 0203 	bic.w	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4934      	ldr	r1, [pc, #208]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d9c:	f7fe ff72 	bl	8000c84 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da4:	f7fe ff6e 	bl	8000c84 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e04f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 020c 	and.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1eb      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d20c      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f821 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e36:	4601      	mov	r1, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	fa21 f303 	lsr.w	r3, r1, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fed2 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023c00 	.word	0x40023c00
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	08003250 	.word	0x08003250
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d007      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x32>
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d008      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x38>
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 808d 	bne.w	8001fbe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ea6:	60bb      	str	r3, [r7, #8]
       break;
 8001ea8:	e08c      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001eac:	60bb      	str	r3, [r7, #8]
      break;
 8001eae:	e089      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb0:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eba:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d023      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec6:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	099b      	lsrs	r3, r3, #6
 8001ecc:	f04f 0400 	mov.w	r4, #0
 8001ed0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	ea03 0501 	and.w	r5, r3, r1
 8001edc:	ea04 0602 	and.w	r6, r4, r2
 8001ee0:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ee2:	fb02 f106 	mul.w	r1, r2, r6
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	fb02 f205 	mul.w	r2, r2, r5
 8001eec:	440a      	add	r2, r1
 8001eee:	493a      	ldr	r1, [pc, #232]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ef0:	fba5 0101 	umull	r0, r1, r5, r1
 8001ef4:	1853      	adds	r3, r2, r1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f04f 0400 	mov.w	r4, #0
 8001efe:	461a      	mov	r2, r3
 8001f00:	4623      	mov	r3, r4
 8001f02:	f7fe f9c5 	bl	8000290 <__aeabi_uldivmod>
 8001f06:	4603      	mov	r3, r0
 8001f08:	460c      	mov	r4, r1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e049      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	f04f 0400 	mov.w	r4, #0
 8001f18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	ea03 0501 	and.w	r5, r3, r1
 8001f24:	ea04 0602 	and.w	r6, r4, r2
 8001f28:	4629      	mov	r1, r5
 8001f2a:	4632      	mov	r2, r6
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	f04f 0400 	mov.w	r4, #0
 8001f34:	0154      	lsls	r4, r2, #5
 8001f36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f3a:	014b      	lsls	r3, r1, #5
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4622      	mov	r2, r4
 8001f40:	1b49      	subs	r1, r1, r5
 8001f42:	eb62 0206 	sbc.w	r2, r2, r6
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	f04f 0400 	mov.w	r4, #0
 8001f4e:	0194      	lsls	r4, r2, #6
 8001f50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f54:	018b      	lsls	r3, r1, #6
 8001f56:	1a5b      	subs	r3, r3, r1
 8001f58:	eb64 0402 	sbc.w	r4, r4, r2
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	00e2      	lsls	r2, r4, #3
 8001f66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f6a:	00d9      	lsls	r1, r3, #3
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	195b      	adds	r3, r3, r5
 8001f72:	eb44 0406 	adc.w	r4, r4, r6
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	02a2      	lsls	r2, r4, #10
 8001f80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f84:	0299      	lsls	r1, r3, #10
 8001f86:	460b      	mov	r3, r1
 8001f88:	4614      	mov	r4, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f04f 0400 	mov.w	r4, #0
 8001f94:	461a      	mov	r2, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	f7fe f97a 	bl	8000290 <__aeabi_uldivmod>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0c1b      	lsrs	r3, r3, #16
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	3301      	adds	r3, #1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	60bb      	str	r3, [r7, #8]
      break;
 8001fbc:	e002      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fc0:	60bb      	str	r3, [r7, #8]
      break;
 8001fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	017d7840 	.word	0x017d7840

08001fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f7ff fff0 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4a03      	ldr	r2, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	08003260 	.word	0x08003260

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002020:	f7ff ffdc 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8002024:	4601      	mov	r1, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0b5b      	lsrs	r3, r3, #13
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4a03      	ldr	r2, [pc, #12]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	08003260 	.word	0x08003260

08002044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e03f      	b.n	80020d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fcb8 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f90b 	bl	80022a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800209c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b088      	sub	sp, #32
 80020e2:	af02      	add	r7, sp, #8
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	f040 8083 	bne.w	8002206 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_UART_Transmit+0x2e>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e07b      	b.n	8002208 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_UART_Transmit+0x40>
 800211a:	2302      	movs	r3, #2
 800211c:	e074      	b.n	8002208 <HAL_UART_Transmit+0x12a>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2221      	movs	r2, #33	; 0x21
 8002130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002134:	f7fe fda6 	bl	8000c84 <HAL_GetTick>
 8002138:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	88fa      	ldrh	r2, [r7, #6]
 800213e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	88fa      	ldrh	r2, [r7, #6]
 8002144:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800214e:	e042      	b.n	80021d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002166:	d122      	bne.n	80021ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f84c 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e042      	b.n	8002208 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002194:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3302      	adds	r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	e017      	b.n	80021d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	e013      	b.n	80021d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f829 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e01f      	b.n	8002208 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1b7      	bne.n	8002150 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2140      	movs	r1, #64	; 0x40
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f810 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e006      	b.n	8002208 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002220:	e02c      	b.n	800227c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002228:	d028      	beq.n	800227c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <UART_WaitOnFlagUntilTimeout+0x30>
 8002230:	f7fe fd28 	bl	8000c84 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	429a      	cmp	r2, r3
 800223e:	d21d      	bcs.n	800227c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800224e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e00f      	b.n	800229c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4013      	ands	r3, r2
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	429a      	cmp	r2, r3
 8002298:	d0c3      	beq.n	8002222 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022e6:	f023 030c 	bic.w	r3, r3, #12
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	68f9      	ldr	r1, [r7, #12]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002312:	f040 818b 	bne.w	800262c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4ac1      	ldr	r2, [pc, #772]	; (8002620 <UART_SetConfig+0x37c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d005      	beq.n	800232c <UART_SetConfig+0x88>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4abf      	ldr	r2, [pc, #764]	; (8002624 <UART_SetConfig+0x380>)
 8002326:	4293      	cmp	r3, r2
 8002328:	f040 80bd 	bne.w	80024a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800232c:	f7ff fe76 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002330:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	461d      	mov	r5, r3
 8002336:	f04f 0600 	mov.w	r6, #0
 800233a:	46a8      	mov	r8, r5
 800233c:	46b1      	mov	r9, r6
 800233e:	eb18 0308 	adds.w	r3, r8, r8
 8002342:	eb49 0409 	adc.w	r4, r9, r9
 8002346:	4698      	mov	r8, r3
 8002348:	46a1      	mov	r9, r4
 800234a:	eb18 0805 	adds.w	r8, r8, r5
 800234e:	eb49 0906 	adc.w	r9, r9, r6
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800235e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002362:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002366:	4688      	mov	r8, r1
 8002368:	4691      	mov	r9, r2
 800236a:	eb18 0005 	adds.w	r0, r8, r5
 800236e:	eb49 0106 	adc.w	r1, r9, r6
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	461d      	mov	r5, r3
 8002378:	f04f 0600 	mov.w	r6, #0
 800237c:	196b      	adds	r3, r5, r5
 800237e:	eb46 0406 	adc.w	r4, r6, r6
 8002382:	461a      	mov	r2, r3
 8002384:	4623      	mov	r3, r4
 8002386:	f7fd ff83 	bl	8000290 <__aeabi_uldivmod>
 800238a:	4603      	mov	r3, r0
 800238c:	460c      	mov	r4, r1
 800238e:	461a      	mov	r2, r3
 8002390:	4ba5      	ldr	r3, [pc, #660]	; (8002628 <UART_SetConfig+0x384>)
 8002392:	fba3 2302 	umull	r2, r3, r3, r2
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	461d      	mov	r5, r3
 80023a0:	f04f 0600 	mov.w	r6, #0
 80023a4:	46a9      	mov	r9, r5
 80023a6:	46b2      	mov	sl, r6
 80023a8:	eb19 0309 	adds.w	r3, r9, r9
 80023ac:	eb4a 040a 	adc.w	r4, sl, sl
 80023b0:	4699      	mov	r9, r3
 80023b2:	46a2      	mov	sl, r4
 80023b4:	eb19 0905 	adds.w	r9, r9, r5
 80023b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023d0:	4689      	mov	r9, r1
 80023d2:	4692      	mov	sl, r2
 80023d4:	eb19 0005 	adds.w	r0, r9, r5
 80023d8:	eb4a 0106 	adc.w	r1, sl, r6
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	461d      	mov	r5, r3
 80023e2:	f04f 0600 	mov.w	r6, #0
 80023e6:	196b      	adds	r3, r5, r5
 80023e8:	eb46 0406 	adc.w	r4, r6, r6
 80023ec:	461a      	mov	r2, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	f7fd ff4e 	bl	8000290 <__aeabi_uldivmod>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b8b      	ldr	r3, [pc, #556]	; (8002628 <UART_SetConfig+0x384>)
 80023fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	2164      	movs	r1, #100	; 0x64
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	4a86      	ldr	r2, [pc, #536]	; (8002628 <UART_SetConfig+0x384>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800241c:	4498      	add	r8, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	461d      	mov	r5, r3
 8002422:	f04f 0600 	mov.w	r6, #0
 8002426:	46a9      	mov	r9, r5
 8002428:	46b2      	mov	sl, r6
 800242a:	eb19 0309 	adds.w	r3, r9, r9
 800242e:	eb4a 040a 	adc.w	r4, sl, sl
 8002432:	4699      	mov	r9, r3
 8002434:	46a2      	mov	sl, r4
 8002436:	eb19 0905 	adds.w	r9, r9, r5
 800243a:	eb4a 0a06 	adc.w	sl, sl, r6
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800244a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800244e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002452:	4689      	mov	r9, r1
 8002454:	4692      	mov	sl, r2
 8002456:	eb19 0005 	adds.w	r0, r9, r5
 800245a:	eb4a 0106 	adc.w	r1, sl, r6
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	461d      	mov	r5, r3
 8002464:	f04f 0600 	mov.w	r6, #0
 8002468:	196b      	adds	r3, r5, r5
 800246a:	eb46 0406 	adc.w	r4, r6, r6
 800246e:	461a      	mov	r2, r3
 8002470:	4623      	mov	r3, r4
 8002472:	f7fd ff0d 	bl	8000290 <__aeabi_uldivmod>
 8002476:	4603      	mov	r3, r0
 8002478:	460c      	mov	r4, r1
 800247a:	461a      	mov	r2, r3
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <UART_SetConfig+0x384>)
 800247e:	fba3 1302 	umull	r1, r3, r3, r2
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2164      	movs	r1, #100	; 0x64
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	3332      	adds	r3, #50	; 0x32
 8002490:	4a65      	ldr	r2, [pc, #404]	; (8002628 <UART_SetConfig+0x384>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	f003 0207 	and.w	r2, r3, #7
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4442      	add	r2, r8
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e26f      	b.n	8002986 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a6:	f7ff fda5 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 80024aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	461d      	mov	r5, r3
 80024b0:	f04f 0600 	mov.w	r6, #0
 80024b4:	46a8      	mov	r8, r5
 80024b6:	46b1      	mov	r9, r6
 80024b8:	eb18 0308 	adds.w	r3, r8, r8
 80024bc:	eb49 0409 	adc.w	r4, r9, r9
 80024c0:	4698      	mov	r8, r3
 80024c2:	46a1      	mov	r9, r4
 80024c4:	eb18 0805 	adds.w	r8, r8, r5
 80024c8:	eb49 0906 	adc.w	r9, r9, r6
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024e0:	4688      	mov	r8, r1
 80024e2:	4691      	mov	r9, r2
 80024e4:	eb18 0005 	adds.w	r0, r8, r5
 80024e8:	eb49 0106 	adc.w	r1, r9, r6
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	461d      	mov	r5, r3
 80024f2:	f04f 0600 	mov.w	r6, #0
 80024f6:	196b      	adds	r3, r5, r5
 80024f8:	eb46 0406 	adc.w	r4, r6, r6
 80024fc:	461a      	mov	r2, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	f7fd fec6 	bl	8000290 <__aeabi_uldivmod>
 8002504:	4603      	mov	r3, r0
 8002506:	460c      	mov	r4, r1
 8002508:	461a      	mov	r2, r3
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <UART_SetConfig+0x384>)
 800250c:	fba3 2302 	umull	r2, r3, r3, r2
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	461d      	mov	r5, r3
 800251a:	f04f 0600 	mov.w	r6, #0
 800251e:	46a9      	mov	r9, r5
 8002520:	46b2      	mov	sl, r6
 8002522:	eb19 0309 	adds.w	r3, r9, r9
 8002526:	eb4a 040a 	adc.w	r4, sl, sl
 800252a:	4699      	mov	r9, r3
 800252c:	46a2      	mov	sl, r4
 800252e:	eb19 0905 	adds.w	r9, r9, r5
 8002532:	eb4a 0a06 	adc.w	sl, sl, r6
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002542:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002546:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800254a:	4689      	mov	r9, r1
 800254c:	4692      	mov	sl, r2
 800254e:	eb19 0005 	adds.w	r0, r9, r5
 8002552:	eb4a 0106 	adc.w	r1, sl, r6
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	461d      	mov	r5, r3
 800255c:	f04f 0600 	mov.w	r6, #0
 8002560:	196b      	adds	r3, r5, r5
 8002562:	eb46 0406 	adc.w	r4, r6, r6
 8002566:	461a      	mov	r2, r3
 8002568:	4623      	mov	r3, r4
 800256a:	f7fd fe91 	bl	8000290 <__aeabi_uldivmod>
 800256e:	4603      	mov	r3, r0
 8002570:	460c      	mov	r4, r1
 8002572:	461a      	mov	r2, r3
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <UART_SetConfig+0x384>)
 8002576:	fba3 1302 	umull	r1, r3, r3, r2
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2164      	movs	r1, #100	; 0x64
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	3332      	adds	r3, #50	; 0x32
 8002588:	4a27      	ldr	r2, [pc, #156]	; (8002628 <UART_SetConfig+0x384>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002596:	4498      	add	r8, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	461d      	mov	r5, r3
 800259c:	f04f 0600 	mov.w	r6, #0
 80025a0:	46a9      	mov	r9, r5
 80025a2:	46b2      	mov	sl, r6
 80025a4:	eb19 0309 	adds.w	r3, r9, r9
 80025a8:	eb4a 040a 	adc.w	r4, sl, sl
 80025ac:	4699      	mov	r9, r3
 80025ae:	46a2      	mov	sl, r4
 80025b0:	eb19 0905 	adds.w	r9, r9, r5
 80025b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80025b8:	f04f 0100 	mov.w	r1, #0
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025cc:	4689      	mov	r9, r1
 80025ce:	4692      	mov	sl, r2
 80025d0:	eb19 0005 	adds.w	r0, r9, r5
 80025d4:	eb4a 0106 	adc.w	r1, sl, r6
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	461d      	mov	r5, r3
 80025de:	f04f 0600 	mov.w	r6, #0
 80025e2:	196b      	adds	r3, r5, r5
 80025e4:	eb46 0406 	adc.w	r4, r6, r6
 80025e8:	461a      	mov	r2, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	f7fd fe50 	bl	8000290 <__aeabi_uldivmod>
 80025f0:	4603      	mov	r3, r0
 80025f2:	460c      	mov	r4, r1
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <UART_SetConfig+0x384>)
 80025f8:	fba3 1302 	umull	r1, r3, r3, r2
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	2164      	movs	r1, #100	; 0x64
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3332      	adds	r3, #50	; 0x32
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <UART_SetConfig+0x384>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	f003 0207 	and.w	r2, r3, #7
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4442      	add	r2, r8
 800261c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800261e:	e1b2      	b.n	8002986 <UART_SetConfig+0x6e2>
 8002620:	40011000 	.word	0x40011000
 8002624:	40011400 	.word	0x40011400
 8002628:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4ad7      	ldr	r2, [pc, #860]	; (8002990 <UART_SetConfig+0x6ec>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d005      	beq.n	8002642 <UART_SetConfig+0x39e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4ad6      	ldr	r2, [pc, #856]	; (8002994 <UART_SetConfig+0x6f0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	f040 80d1 	bne.w	80027e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002642:	f7ff fceb 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002646:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	469a      	mov	sl, r3
 800264c:	f04f 0b00 	mov.w	fp, #0
 8002650:	46d0      	mov	r8, sl
 8002652:	46d9      	mov	r9, fp
 8002654:	eb18 0308 	adds.w	r3, r8, r8
 8002658:	eb49 0409 	adc.w	r4, r9, r9
 800265c:	4698      	mov	r8, r3
 800265e:	46a1      	mov	r9, r4
 8002660:	eb18 080a 	adds.w	r8, r8, sl
 8002664:	eb49 090b 	adc.w	r9, r9, fp
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002674:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002678:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800267c:	4688      	mov	r8, r1
 800267e:	4691      	mov	r9, r2
 8002680:	eb1a 0508 	adds.w	r5, sl, r8
 8002684:	eb4b 0609 	adc.w	r6, fp, r9
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4619      	mov	r1, r3
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	f04f 0400 	mov.w	r4, #0
 800269a:	0094      	lsls	r4, r2, #2
 800269c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026a0:	008b      	lsls	r3, r1, #2
 80026a2:	461a      	mov	r2, r3
 80026a4:	4623      	mov	r3, r4
 80026a6:	4628      	mov	r0, r5
 80026a8:	4631      	mov	r1, r6
 80026aa:	f7fd fdf1 	bl	8000290 <__aeabi_uldivmod>
 80026ae:	4603      	mov	r3, r0
 80026b0:	460c      	mov	r4, r1
 80026b2:	461a      	mov	r2, r3
 80026b4:	4bb8      	ldr	r3, [pc, #736]	; (8002998 <UART_SetConfig+0x6f4>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	469b      	mov	fp, r3
 80026c4:	f04f 0c00 	mov.w	ip, #0
 80026c8:	46d9      	mov	r9, fp
 80026ca:	46e2      	mov	sl, ip
 80026cc:	eb19 0309 	adds.w	r3, r9, r9
 80026d0:	eb4a 040a 	adc.w	r4, sl, sl
 80026d4:	4699      	mov	r9, r3
 80026d6:	46a2      	mov	sl, r4
 80026d8:	eb19 090b 	adds.w	r9, r9, fp
 80026dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026f4:	4689      	mov	r9, r1
 80026f6:	4692      	mov	sl, r2
 80026f8:	eb1b 0509 	adds.w	r5, fp, r9
 80026fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	f04f 0400 	mov.w	r4, #0
 8002712:	0094      	lsls	r4, r2, #2
 8002714:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002718:	008b      	lsls	r3, r1, #2
 800271a:	461a      	mov	r2, r3
 800271c:	4623      	mov	r3, r4
 800271e:	4628      	mov	r0, r5
 8002720:	4631      	mov	r1, r6
 8002722:	f7fd fdb5 	bl	8000290 <__aeabi_uldivmod>
 8002726:	4603      	mov	r3, r0
 8002728:	460c      	mov	r4, r1
 800272a:	461a      	mov	r2, r3
 800272c:	4b9a      	ldr	r3, [pc, #616]	; (8002998 <UART_SetConfig+0x6f4>)
 800272e:	fba3 1302 	umull	r1, r3, r3, r2
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2164      	movs	r1, #100	; 0x64
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	3332      	adds	r3, #50	; 0x32
 8002740:	4a95      	ldr	r2, [pc, #596]	; (8002998 <UART_SetConfig+0x6f4>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274c:	4498      	add	r8, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	469b      	mov	fp, r3
 8002752:	f04f 0c00 	mov.w	ip, #0
 8002756:	46d9      	mov	r9, fp
 8002758:	46e2      	mov	sl, ip
 800275a:	eb19 0309 	adds.w	r3, r9, r9
 800275e:	eb4a 040a 	adc.w	r4, sl, sl
 8002762:	4699      	mov	r9, r3
 8002764:	46a2      	mov	sl, r4
 8002766:	eb19 090b 	adds.w	r9, r9, fp
 800276a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800276e:	f04f 0100 	mov.w	r1, #0
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800277a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800277e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002782:	4689      	mov	r9, r1
 8002784:	4692      	mov	sl, r2
 8002786:	eb1b 0509 	adds.w	r5, fp, r9
 800278a:	eb4c 060a 	adc.w	r6, ip, sl
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4619      	mov	r1, r3
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f04f 0400 	mov.w	r4, #0
 80027a0:	0094      	lsls	r4, r2, #2
 80027a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027a6:	008b      	lsls	r3, r1, #2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	4628      	mov	r0, r5
 80027ae:	4631      	mov	r1, r6
 80027b0:	f7fd fd6e 	bl	8000290 <__aeabi_uldivmod>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b77      	ldr	r3, [pc, #476]	; (8002998 <UART_SetConfig+0x6f4>)
 80027bc:	fba3 1302 	umull	r1, r3, r3, r2
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	2164      	movs	r1, #100	; 0x64
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	3332      	adds	r3, #50	; 0x32
 80027ce:	4a72      	ldr	r2, [pc, #456]	; (8002998 <UART_SetConfig+0x6f4>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4442      	add	r2, r8
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	e0d0      	b.n	8002986 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80027e4:	f7ff fc06 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 80027e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	469a      	mov	sl, r3
 80027ee:	f04f 0b00 	mov.w	fp, #0
 80027f2:	46d0      	mov	r8, sl
 80027f4:	46d9      	mov	r9, fp
 80027f6:	eb18 0308 	adds.w	r3, r8, r8
 80027fa:	eb49 0409 	adc.w	r4, r9, r9
 80027fe:	4698      	mov	r8, r3
 8002800:	46a1      	mov	r9, r4
 8002802:	eb18 080a 	adds.w	r8, r8, sl
 8002806:	eb49 090b 	adc.w	r9, r9, fp
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002816:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800281a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800281e:	4688      	mov	r8, r1
 8002820:	4691      	mov	r9, r2
 8002822:	eb1a 0508 	adds.w	r5, sl, r8
 8002826:	eb4b 0609 	adc.w	r6, fp, r9
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f04f 0400 	mov.w	r4, #0
 800283c:	0094      	lsls	r4, r2, #2
 800283e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002842:	008b      	lsls	r3, r1, #2
 8002844:	461a      	mov	r2, r3
 8002846:	4623      	mov	r3, r4
 8002848:	4628      	mov	r0, r5
 800284a:	4631      	mov	r1, r6
 800284c:	f7fd fd20 	bl	8000290 <__aeabi_uldivmod>
 8002850:	4603      	mov	r3, r0
 8002852:	460c      	mov	r4, r1
 8002854:	461a      	mov	r2, r3
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <UART_SetConfig+0x6f4>)
 8002858:	fba3 2302 	umull	r2, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	469b      	mov	fp, r3
 8002866:	f04f 0c00 	mov.w	ip, #0
 800286a:	46d9      	mov	r9, fp
 800286c:	46e2      	mov	sl, ip
 800286e:	eb19 0309 	adds.w	r3, r9, r9
 8002872:	eb4a 040a 	adc.w	r4, sl, sl
 8002876:	4699      	mov	r9, r3
 8002878:	46a2      	mov	sl, r4
 800287a:	eb19 090b 	adds.w	r9, r9, fp
 800287e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800288e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002896:	4689      	mov	r9, r1
 8002898:	4692      	mov	sl, r2
 800289a:	eb1b 0509 	adds.w	r5, fp, r9
 800289e:	eb4c 060a 	adc.w	r6, ip, sl
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	f04f 0400 	mov.w	r4, #0
 80028b4:	0094      	lsls	r4, r2, #2
 80028b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028ba:	008b      	lsls	r3, r1, #2
 80028bc:	461a      	mov	r2, r3
 80028be:	4623      	mov	r3, r4
 80028c0:	4628      	mov	r0, r5
 80028c2:	4631      	mov	r1, r6
 80028c4:	f7fd fce4 	bl	8000290 <__aeabi_uldivmod>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b32      	ldr	r3, [pc, #200]	; (8002998 <UART_SetConfig+0x6f4>)
 80028d0:	fba3 1302 	umull	r1, r3, r3, r2
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	2164      	movs	r1, #100	; 0x64
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	3332      	adds	r3, #50	; 0x32
 80028e2:	4a2d      	ldr	r2, [pc, #180]	; (8002998 <UART_SetConfig+0x6f4>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ee:	4498      	add	r8, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	469b      	mov	fp, r3
 80028f4:	f04f 0c00 	mov.w	ip, #0
 80028f8:	46d9      	mov	r9, fp
 80028fa:	46e2      	mov	sl, ip
 80028fc:	eb19 0309 	adds.w	r3, r9, r9
 8002900:	eb4a 040a 	adc.w	r4, sl, sl
 8002904:	4699      	mov	r9, r3
 8002906:	46a2      	mov	sl, r4
 8002908:	eb19 090b 	adds.w	r9, r9, fp
 800290c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002920:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002924:	4689      	mov	r9, r1
 8002926:	4692      	mov	sl, r2
 8002928:	eb1b 0509 	adds.w	r5, fp, r9
 800292c:	eb4c 060a 	adc.w	r6, ip, sl
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4619      	mov	r1, r3
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	f04f 0400 	mov.w	r4, #0
 8002942:	0094      	lsls	r4, r2, #2
 8002944:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002948:	008b      	lsls	r3, r1, #2
 800294a:	461a      	mov	r2, r3
 800294c:	4623      	mov	r3, r4
 800294e:	4628      	mov	r0, r5
 8002950:	4631      	mov	r1, r6
 8002952:	f7fd fc9d 	bl	8000290 <__aeabi_uldivmod>
 8002956:	4603      	mov	r3, r0
 8002958:	460c      	mov	r4, r1
 800295a:	461a      	mov	r2, r3
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <UART_SetConfig+0x6f4>)
 800295e:	fba3 1302 	umull	r1, r3, r3, r2
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2164      	movs	r1, #100	; 0x64
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	3332      	adds	r3, #50	; 0x32
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <UART_SetConfig+0x6f4>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4442      	add	r2, r8
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	e7ff      	b.n	8002986 <UART_SetConfig+0x6e2>
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f

0800299c <__errno>:
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <__errno+0x8>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0d      	ldr	r6, [pc, #52]	; (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	; (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1ba4      	subs	r4, r4, r6
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2500      	movs	r5, #0
 80029b4:	42a5      	cmp	r5, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4e0b      	ldr	r6, [pc, #44]	; (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	; (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 fc26 	bl	800320c <_init>
 80029c0:	1ba4      	subs	r4, r4, r6
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2500      	movs	r5, #0
 80029c6:	42a5      	cmp	r5, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029d0:	4798      	blx	r3
 80029d2:	3501      	adds	r5, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029da:	4798      	blx	r3
 80029dc:	3501      	adds	r5, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	080032ac 	.word	0x080032ac
 80029e4:	080032ac 	.word	0x080032ac
 80029e8:	080032ac 	.word	0x080032ac
 80029ec:	080032b0 	.word	0x080032b0

080029f0 <memset>:
 80029f0:	4402      	add	r2, r0
 80029f2:	4603      	mov	r3, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <_vsiprintf_r>:
 8002a00:	b500      	push	{lr}
 8002a02:	b09b      	sub	sp, #108	; 0x6c
 8002a04:	9100      	str	r1, [sp, #0]
 8002a06:	9104      	str	r1, [sp, #16]
 8002a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a0c:	9105      	str	r1, [sp, #20]
 8002a0e:	9102      	str	r1, [sp, #8]
 8002a10:	4905      	ldr	r1, [pc, #20]	; (8002a28 <_vsiprintf_r+0x28>)
 8002a12:	9103      	str	r1, [sp, #12]
 8002a14:	4669      	mov	r1, sp
 8002a16:	f000 f86d 	bl	8002af4 <_svfiprintf_r>
 8002a1a:	9b00      	ldr	r3, [sp, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	b01b      	add	sp, #108	; 0x6c
 8002a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a26:	bf00      	nop
 8002a28:	ffff0208 	.word	0xffff0208

08002a2c <vsiprintf>:
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	460a      	mov	r2, r1
 8002a30:	4601      	mov	r1, r0
 8002a32:	4802      	ldr	r0, [pc, #8]	; (8002a3c <vsiprintf+0x10>)
 8002a34:	6800      	ldr	r0, [r0, #0]
 8002a36:	f7ff bfe3 	b.w	8002a00 <_vsiprintf_r>
 8002a3a:	bf00      	nop
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <__ssputs_r>:
 8002a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	688e      	ldr	r6, [r1, #8]
 8002a46:	429e      	cmp	r6, r3
 8002a48:	4682      	mov	sl, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	d837      	bhi.n	8002ac2 <__ssputs_r+0x82>
 8002a52:	898a      	ldrh	r2, [r1, #12]
 8002a54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a58:	d031      	beq.n	8002abe <__ssputs_r+0x7e>
 8002a5a:	6825      	ldr	r5, [r4, #0]
 8002a5c:	6909      	ldr	r1, [r1, #16]
 8002a5e:	1a6f      	subs	r7, r5, r1
 8002a60:	6965      	ldr	r5, [r4, #20]
 8002a62:	2302      	movs	r3, #2
 8002a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a68:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a6c:	f109 0301 	add.w	r3, r9, #1
 8002a70:	443b      	add	r3, r7
 8002a72:	429d      	cmp	r5, r3
 8002a74:	bf38      	it	cc
 8002a76:	461d      	movcc	r5, r3
 8002a78:	0553      	lsls	r3, r2, #21
 8002a7a:	d530      	bpl.n	8002ade <__ssputs_r+0x9e>
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f000 fb2b 	bl	80030d8 <_malloc_r>
 8002a82:	4606      	mov	r6, r0
 8002a84:	b950      	cbnz	r0, 8002a9c <__ssputs_r+0x5c>
 8002a86:	230c      	movs	r3, #12
 8002a88:	f8ca 3000 	str.w	r3, [sl]
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a9c:	463a      	mov	r2, r7
 8002a9e:	6921      	ldr	r1, [r4, #16]
 8002aa0:	f000 faa8 	bl	8002ff4 <memcpy>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	6126      	str	r6, [r4, #16]
 8002ab2:	6165      	str	r5, [r4, #20]
 8002ab4:	443e      	add	r6, r7
 8002ab6:	1bed      	subs	r5, r5, r7
 8002ab8:	6026      	str	r6, [r4, #0]
 8002aba:	60a5      	str	r5, [r4, #8]
 8002abc:	464e      	mov	r6, r9
 8002abe:	454e      	cmp	r6, r9
 8002ac0:	d900      	bls.n	8002ac4 <__ssputs_r+0x84>
 8002ac2:	464e      	mov	r6, r9
 8002ac4:	4632      	mov	r2, r6
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	f000 fa9e 	bl	800300a <memmove>
 8002ace:	68a3      	ldr	r3, [r4, #8]
 8002ad0:	1b9b      	subs	r3, r3, r6
 8002ad2:	60a3      	str	r3, [r4, #8]
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	441e      	add	r6, r3
 8002ad8:	6026      	str	r6, [r4, #0]
 8002ada:	2000      	movs	r0, #0
 8002adc:	e7dc      	b.n	8002a98 <__ssputs_r+0x58>
 8002ade:	462a      	mov	r2, r5
 8002ae0:	f000 fb54 	bl	800318c <_realloc_r>
 8002ae4:	4606      	mov	r6, r0
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d1e2      	bne.n	8002ab0 <__ssputs_r+0x70>
 8002aea:	6921      	ldr	r1, [r4, #16]
 8002aec:	4650      	mov	r0, sl
 8002aee:	f000 faa5 	bl	800303c <_free_r>
 8002af2:	e7c8      	b.n	8002a86 <__ssputs_r+0x46>

08002af4 <_svfiprintf_r>:
 8002af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af8:	461d      	mov	r5, r3
 8002afa:	898b      	ldrh	r3, [r1, #12]
 8002afc:	061f      	lsls	r7, r3, #24
 8002afe:	b09d      	sub	sp, #116	; 0x74
 8002b00:	4680      	mov	r8, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	4616      	mov	r6, r2
 8002b06:	d50f      	bpl.n	8002b28 <_svfiprintf_r+0x34>
 8002b08:	690b      	ldr	r3, [r1, #16]
 8002b0a:	b96b      	cbnz	r3, 8002b28 <_svfiprintf_r+0x34>
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	f000 fae3 	bl	80030d8 <_malloc_r>
 8002b12:	6020      	str	r0, [r4, #0]
 8002b14:	6120      	str	r0, [r4, #16]
 8002b16:	b928      	cbnz	r0, 8002b24 <_svfiprintf_r+0x30>
 8002b18:	230c      	movs	r3, #12
 8002b1a:	f8c8 3000 	str.w	r3, [r8]
 8002b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b22:	e0c8      	b.n	8002cb6 <_svfiprintf_r+0x1c2>
 8002b24:	2340      	movs	r3, #64	; 0x40
 8002b26:	6163      	str	r3, [r4, #20]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b32:	2330      	movs	r3, #48	; 0x30
 8002b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b38:	9503      	str	r5, [sp, #12]
 8002b3a:	f04f 0b01 	mov.w	fp, #1
 8002b3e:	4637      	mov	r7, r6
 8002b40:	463d      	mov	r5, r7
 8002b42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002b46:	b10b      	cbz	r3, 8002b4c <_svfiprintf_r+0x58>
 8002b48:	2b25      	cmp	r3, #37	; 0x25
 8002b4a:	d13e      	bne.n	8002bca <_svfiprintf_r+0xd6>
 8002b4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b50:	d00b      	beq.n	8002b6a <_svfiprintf_r+0x76>
 8002b52:	4653      	mov	r3, sl
 8002b54:	4632      	mov	r2, r6
 8002b56:	4621      	mov	r1, r4
 8002b58:	4640      	mov	r0, r8
 8002b5a:	f7ff ff71 	bl	8002a40 <__ssputs_r>
 8002b5e:	3001      	adds	r0, #1
 8002b60:	f000 80a4 	beq.w	8002cac <_svfiprintf_r+0x1b8>
 8002b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b66:	4453      	add	r3, sl
 8002b68:	9309      	str	r3, [sp, #36]	; 0x24
 8002b6a:	783b      	ldrb	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 809d 	beq.w	8002cac <_svfiprintf_r+0x1b8>
 8002b72:	2300      	movs	r3, #0
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b7c:	9304      	str	r3, [sp, #16]
 8002b7e:	9307      	str	r3, [sp, #28]
 8002b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b84:	931a      	str	r3, [sp, #104]	; 0x68
 8002b86:	462f      	mov	r7, r5
 8002b88:	2205      	movs	r2, #5
 8002b8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b8e:	4850      	ldr	r0, [pc, #320]	; (8002cd0 <_svfiprintf_r+0x1dc>)
 8002b90:	f7fd fb2e 	bl	80001f0 <memchr>
 8002b94:	9b04      	ldr	r3, [sp, #16]
 8002b96:	b9d0      	cbnz	r0, 8002bce <_svfiprintf_r+0xda>
 8002b98:	06d9      	lsls	r1, r3, #27
 8002b9a:	bf44      	itt	mi
 8002b9c:	2220      	movmi	r2, #32
 8002b9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ba2:	071a      	lsls	r2, r3, #28
 8002ba4:	bf44      	itt	mi
 8002ba6:	222b      	movmi	r2, #43	; 0x2b
 8002ba8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bac:	782a      	ldrb	r2, [r5, #0]
 8002bae:	2a2a      	cmp	r2, #42	; 0x2a
 8002bb0:	d015      	beq.n	8002bde <_svfiprintf_r+0xea>
 8002bb2:	9a07      	ldr	r2, [sp, #28]
 8002bb4:	462f      	mov	r7, r5
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	250a      	movs	r5, #10
 8002bba:	4639      	mov	r1, r7
 8002bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bc0:	3b30      	subs	r3, #48	; 0x30
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	d94d      	bls.n	8002c62 <_svfiprintf_r+0x16e>
 8002bc6:	b1b8      	cbz	r0, 8002bf8 <_svfiprintf_r+0x104>
 8002bc8:	e00f      	b.n	8002bea <_svfiprintf_r+0xf6>
 8002bca:	462f      	mov	r7, r5
 8002bcc:	e7b8      	b.n	8002b40 <_svfiprintf_r+0x4c>
 8002bce:	4a40      	ldr	r2, [pc, #256]	; (8002cd0 <_svfiprintf_r+0x1dc>)
 8002bd0:	1a80      	subs	r0, r0, r2
 8002bd2:	fa0b f000 	lsl.w	r0, fp, r0
 8002bd6:	4318      	orrs	r0, r3
 8002bd8:	9004      	str	r0, [sp, #16]
 8002bda:	463d      	mov	r5, r7
 8002bdc:	e7d3      	b.n	8002b86 <_svfiprintf_r+0x92>
 8002bde:	9a03      	ldr	r2, [sp, #12]
 8002be0:	1d11      	adds	r1, r2, #4
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	9103      	str	r1, [sp, #12]
 8002be6:	2a00      	cmp	r2, #0
 8002be8:	db01      	blt.n	8002bee <_svfiprintf_r+0xfa>
 8002bea:	9207      	str	r2, [sp, #28]
 8002bec:	e004      	b.n	8002bf8 <_svfiprintf_r+0x104>
 8002bee:	4252      	negs	r2, r2
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	9207      	str	r2, [sp, #28]
 8002bf6:	9304      	str	r3, [sp, #16]
 8002bf8:	783b      	ldrb	r3, [r7, #0]
 8002bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8002bfc:	d10c      	bne.n	8002c18 <_svfiprintf_r+0x124>
 8002bfe:	787b      	ldrb	r3, [r7, #1]
 8002c00:	2b2a      	cmp	r3, #42	; 0x2a
 8002c02:	d133      	bne.n	8002c6c <_svfiprintf_r+0x178>
 8002c04:	9b03      	ldr	r3, [sp, #12]
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	9203      	str	r2, [sp, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bfb8      	it	lt
 8002c10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002c14:	3702      	adds	r7, #2
 8002c16:	9305      	str	r3, [sp, #20]
 8002c18:	4d2e      	ldr	r5, [pc, #184]	; (8002cd4 <_svfiprintf_r+0x1e0>)
 8002c1a:	7839      	ldrb	r1, [r7, #0]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f7fd fae6 	bl	80001f0 <memchr>
 8002c24:	b138      	cbz	r0, 8002c36 <_svfiprintf_r+0x142>
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	1b40      	subs	r0, r0, r5
 8002c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c2e:	9b04      	ldr	r3, [sp, #16]
 8002c30:	4303      	orrs	r3, r0
 8002c32:	3701      	adds	r7, #1
 8002c34:	9304      	str	r3, [sp, #16]
 8002c36:	7839      	ldrb	r1, [r7, #0]
 8002c38:	4827      	ldr	r0, [pc, #156]	; (8002cd8 <_svfiprintf_r+0x1e4>)
 8002c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c3e:	2206      	movs	r2, #6
 8002c40:	1c7e      	adds	r6, r7, #1
 8002c42:	f7fd fad5 	bl	80001f0 <memchr>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d038      	beq.n	8002cbc <_svfiprintf_r+0x1c8>
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <_svfiprintf_r+0x1e8>)
 8002c4c:	bb13      	cbnz	r3, 8002c94 <_svfiprintf_r+0x1a0>
 8002c4e:	9b03      	ldr	r3, [sp, #12]
 8002c50:	3307      	adds	r3, #7
 8002c52:	f023 0307 	bic.w	r3, r3, #7
 8002c56:	3308      	adds	r3, #8
 8002c58:	9303      	str	r3, [sp, #12]
 8002c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c5c:	444b      	add	r3, r9
 8002c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c60:	e76d      	b.n	8002b3e <_svfiprintf_r+0x4a>
 8002c62:	fb05 3202 	mla	r2, r5, r2, r3
 8002c66:	2001      	movs	r0, #1
 8002c68:	460f      	mov	r7, r1
 8002c6a:	e7a6      	b.n	8002bba <_svfiprintf_r+0xc6>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	3701      	adds	r7, #1
 8002c70:	9305      	str	r3, [sp, #20]
 8002c72:	4619      	mov	r1, r3
 8002c74:	250a      	movs	r5, #10
 8002c76:	4638      	mov	r0, r7
 8002c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c7c:	3a30      	subs	r2, #48	; 0x30
 8002c7e:	2a09      	cmp	r2, #9
 8002c80:	d903      	bls.n	8002c8a <_svfiprintf_r+0x196>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0c8      	beq.n	8002c18 <_svfiprintf_r+0x124>
 8002c86:	9105      	str	r1, [sp, #20]
 8002c88:	e7c6      	b.n	8002c18 <_svfiprintf_r+0x124>
 8002c8a:	fb05 2101 	mla	r1, r5, r1, r2
 8002c8e:	2301      	movs	r3, #1
 8002c90:	4607      	mov	r7, r0
 8002c92:	e7f0      	b.n	8002c76 <_svfiprintf_r+0x182>
 8002c94:	ab03      	add	r3, sp, #12
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	4622      	mov	r2, r4
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <_svfiprintf_r+0x1ec>)
 8002c9c:	a904      	add	r1, sp, #16
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	f3af 8000 	nop.w
 8002ca4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002ca8:	4681      	mov	r9, r0
 8002caa:	d1d6      	bne.n	8002c5a <_svfiprintf_r+0x166>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	065b      	lsls	r3, r3, #25
 8002cb0:	f53f af35 	bmi.w	8002b1e <_svfiprintf_r+0x2a>
 8002cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cb6:	b01d      	add	sp, #116	; 0x74
 8002cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbc:	ab03      	add	r3, sp, #12
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <_svfiprintf_r+0x1ec>)
 8002cc4:	a904      	add	r1, sp, #16
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	f000 f882 	bl	8002dd0 <_printf_i>
 8002ccc:	e7ea      	b.n	8002ca4 <_svfiprintf_r+0x1b0>
 8002cce:	bf00      	nop
 8002cd0:	08003270 	.word	0x08003270
 8002cd4:	08003276 	.word	0x08003276
 8002cd8:	0800327a 	.word	0x0800327a
 8002cdc:	00000000 	.word	0x00000000
 8002ce0:	08002a41 	.word	0x08002a41

08002ce4 <_printf_common>:
 8002ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce8:	4691      	mov	r9, r2
 8002cea:	461f      	mov	r7, r3
 8002cec:	688a      	ldr	r2, [r1, #8]
 8002cee:	690b      	ldr	r3, [r1, #16]
 8002cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	bfb8      	it	lt
 8002cf8:	4613      	movlt	r3, r2
 8002cfa:	f8c9 3000 	str.w	r3, [r9]
 8002cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d02:	4606      	mov	r6, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	b112      	cbz	r2, 8002d0e <_printf_common+0x2a>
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f8c9 3000 	str.w	r3, [r9]
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	0699      	lsls	r1, r3, #26
 8002d12:	bf42      	ittt	mi
 8002d14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d18:	3302      	addmi	r3, #2
 8002d1a:	f8c9 3000 	strmi.w	r3, [r9]
 8002d1e:	6825      	ldr	r5, [r4, #0]
 8002d20:	f015 0506 	ands.w	r5, r5, #6
 8002d24:	d107      	bne.n	8002d36 <_printf_common+0x52>
 8002d26:	f104 0a19 	add.w	sl, r4, #25
 8002d2a:	68e3      	ldr	r3, [r4, #12]
 8002d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	42ab      	cmp	r3, r5
 8002d34:	dc28      	bgt.n	8002d88 <_printf_common+0xa4>
 8002d36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d3a:	6822      	ldr	r2, [r4, #0]
 8002d3c:	3300      	adds	r3, #0
 8002d3e:	bf18      	it	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	0692      	lsls	r2, r2, #26
 8002d44:	d42d      	bmi.n	8002da2 <_printf_common+0xbe>
 8002d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d4a:	4639      	mov	r1, r7
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	47c0      	blx	r8
 8002d50:	3001      	adds	r0, #1
 8002d52:	d020      	beq.n	8002d96 <_printf_common+0xb2>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	68e5      	ldr	r5, [r4, #12]
 8002d58:	f8d9 2000 	ldr.w	r2, [r9]
 8002d5c:	f003 0306 	and.w	r3, r3, #6
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	bf08      	it	eq
 8002d64:	1aad      	subeq	r5, r5, r2
 8002d66:	68a3      	ldr	r3, [r4, #8]
 8002d68:	6922      	ldr	r2, [r4, #16]
 8002d6a:	bf0c      	ite	eq
 8002d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d70:	2500      	movne	r5, #0
 8002d72:	4293      	cmp	r3, r2
 8002d74:	bfc4      	itt	gt
 8002d76:	1a9b      	subgt	r3, r3, r2
 8002d78:	18ed      	addgt	r5, r5, r3
 8002d7a:	f04f 0900 	mov.w	r9, #0
 8002d7e:	341a      	adds	r4, #26
 8002d80:	454d      	cmp	r5, r9
 8002d82:	d11a      	bne.n	8002dba <_printf_common+0xd6>
 8002d84:	2000      	movs	r0, #0
 8002d86:	e008      	b.n	8002d9a <_printf_common+0xb6>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4652      	mov	r2, sl
 8002d8c:	4639      	mov	r1, r7
 8002d8e:	4630      	mov	r0, r6
 8002d90:	47c0      	blx	r8
 8002d92:	3001      	adds	r0, #1
 8002d94:	d103      	bne.n	8002d9e <_printf_common+0xba>
 8002d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d9e:	3501      	adds	r5, #1
 8002da0:	e7c3      	b.n	8002d2a <_printf_common+0x46>
 8002da2:	18e1      	adds	r1, r4, r3
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	2030      	movs	r0, #48	; 0x30
 8002da8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dac:	4422      	add	r2, r4
 8002dae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002db2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002db6:	3302      	adds	r3, #2
 8002db8:	e7c5      	b.n	8002d46 <_printf_common+0x62>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	4639      	mov	r1, r7
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	47c0      	blx	r8
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d0e6      	beq.n	8002d96 <_printf_common+0xb2>
 8002dc8:	f109 0901 	add.w	r9, r9, #1
 8002dcc:	e7d8      	b.n	8002d80 <_printf_common+0x9c>
	...

08002dd0 <_printf_i>:
 8002dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002dd8:	460c      	mov	r4, r1
 8002dda:	7e09      	ldrb	r1, [r1, #24]
 8002ddc:	b085      	sub	sp, #20
 8002dde:	296e      	cmp	r1, #110	; 0x6e
 8002de0:	4617      	mov	r7, r2
 8002de2:	4606      	mov	r6, r0
 8002de4:	4698      	mov	r8, r3
 8002de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002de8:	f000 80b3 	beq.w	8002f52 <_printf_i+0x182>
 8002dec:	d822      	bhi.n	8002e34 <_printf_i+0x64>
 8002dee:	2963      	cmp	r1, #99	; 0x63
 8002df0:	d036      	beq.n	8002e60 <_printf_i+0x90>
 8002df2:	d80a      	bhi.n	8002e0a <_printf_i+0x3a>
 8002df4:	2900      	cmp	r1, #0
 8002df6:	f000 80b9 	beq.w	8002f6c <_printf_i+0x19c>
 8002dfa:	2958      	cmp	r1, #88	; 0x58
 8002dfc:	f000 8083 	beq.w	8002f06 <_printf_i+0x136>
 8002e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002e08:	e032      	b.n	8002e70 <_printf_i+0xa0>
 8002e0a:	2964      	cmp	r1, #100	; 0x64
 8002e0c:	d001      	beq.n	8002e12 <_printf_i+0x42>
 8002e0e:	2969      	cmp	r1, #105	; 0x69
 8002e10:	d1f6      	bne.n	8002e00 <_printf_i+0x30>
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	6813      	ldr	r3, [r2, #0]
 8002e16:	0605      	lsls	r5, r0, #24
 8002e18:	f103 0104 	add.w	r1, r3, #4
 8002e1c:	d52a      	bpl.n	8002e74 <_printf_i+0xa4>
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6011      	str	r1, [r2, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	da03      	bge.n	8002e2e <_printf_i+0x5e>
 8002e26:	222d      	movs	r2, #45	; 0x2d
 8002e28:	425b      	negs	r3, r3
 8002e2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e2e:	486f      	ldr	r0, [pc, #444]	; (8002fec <_printf_i+0x21c>)
 8002e30:	220a      	movs	r2, #10
 8002e32:	e039      	b.n	8002ea8 <_printf_i+0xd8>
 8002e34:	2973      	cmp	r1, #115	; 0x73
 8002e36:	f000 809d 	beq.w	8002f74 <_printf_i+0x1a4>
 8002e3a:	d808      	bhi.n	8002e4e <_printf_i+0x7e>
 8002e3c:	296f      	cmp	r1, #111	; 0x6f
 8002e3e:	d020      	beq.n	8002e82 <_printf_i+0xb2>
 8002e40:	2970      	cmp	r1, #112	; 0x70
 8002e42:	d1dd      	bne.n	8002e00 <_printf_i+0x30>
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	f043 0320 	orr.w	r3, r3, #32
 8002e4a:	6023      	str	r3, [r4, #0]
 8002e4c:	e003      	b.n	8002e56 <_printf_i+0x86>
 8002e4e:	2975      	cmp	r1, #117	; 0x75
 8002e50:	d017      	beq.n	8002e82 <_printf_i+0xb2>
 8002e52:	2978      	cmp	r1, #120	; 0x78
 8002e54:	d1d4      	bne.n	8002e00 <_printf_i+0x30>
 8002e56:	2378      	movs	r3, #120	; 0x78
 8002e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e5c:	4864      	ldr	r0, [pc, #400]	; (8002ff0 <_printf_i+0x220>)
 8002e5e:	e055      	b.n	8002f0c <_printf_i+0x13c>
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	1d19      	adds	r1, r3, #4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6011      	str	r1, [r2, #0]
 8002e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e70:	2301      	movs	r3, #1
 8002e72:	e08c      	b.n	8002f8e <_printf_i+0x1be>
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6011      	str	r1, [r2, #0]
 8002e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e7c:	bf18      	it	ne
 8002e7e:	b21b      	sxthne	r3, r3
 8002e80:	e7cf      	b.n	8002e22 <_printf_i+0x52>
 8002e82:	6813      	ldr	r3, [r2, #0]
 8002e84:	6825      	ldr	r5, [r4, #0]
 8002e86:	1d18      	adds	r0, r3, #4
 8002e88:	6010      	str	r0, [r2, #0]
 8002e8a:	0628      	lsls	r0, r5, #24
 8002e8c:	d501      	bpl.n	8002e92 <_printf_i+0xc2>
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	e002      	b.n	8002e98 <_printf_i+0xc8>
 8002e92:	0668      	lsls	r0, r5, #25
 8002e94:	d5fb      	bpl.n	8002e8e <_printf_i+0xbe>
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	4854      	ldr	r0, [pc, #336]	; (8002fec <_printf_i+0x21c>)
 8002e9a:	296f      	cmp	r1, #111	; 0x6f
 8002e9c:	bf14      	ite	ne
 8002e9e:	220a      	movne	r2, #10
 8002ea0:	2208      	moveq	r2, #8
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ea8:	6865      	ldr	r5, [r4, #4]
 8002eaa:	60a5      	str	r5, [r4, #8]
 8002eac:	2d00      	cmp	r5, #0
 8002eae:	f2c0 8095 	blt.w	8002fdc <_printf_i+0x20c>
 8002eb2:	6821      	ldr	r1, [r4, #0]
 8002eb4:	f021 0104 	bic.w	r1, r1, #4
 8002eb8:	6021      	str	r1, [r4, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d13d      	bne.n	8002f3a <_printf_i+0x16a>
 8002ebe:	2d00      	cmp	r5, #0
 8002ec0:	f040 808e 	bne.w	8002fe0 <_printf_i+0x210>
 8002ec4:	4665      	mov	r5, ip
 8002ec6:	2a08      	cmp	r2, #8
 8002ec8:	d10b      	bne.n	8002ee2 <_printf_i+0x112>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	07db      	lsls	r3, r3, #31
 8002ece:	d508      	bpl.n	8002ee2 <_printf_i+0x112>
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	6862      	ldr	r2, [r4, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	bfde      	ittt	le
 8002ed8:	2330      	movle	r3, #48	; 0x30
 8002eda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ede:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ee2:	ebac 0305 	sub.w	r3, ip, r5
 8002ee6:	6123      	str	r3, [r4, #16]
 8002ee8:	f8cd 8000 	str.w	r8, [sp]
 8002eec:	463b      	mov	r3, r7
 8002eee:	aa03      	add	r2, sp, #12
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7ff fef6 	bl	8002ce4 <_printf_common>
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d14d      	bne.n	8002f98 <_printf_i+0x1c8>
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f00:	b005      	add	sp, #20
 8002f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f06:	4839      	ldr	r0, [pc, #228]	; (8002fec <_printf_i+0x21c>)
 8002f08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002f0c:	6813      	ldr	r3, [r2, #0]
 8002f0e:	6821      	ldr	r1, [r4, #0]
 8002f10:	1d1d      	adds	r5, r3, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6015      	str	r5, [r2, #0]
 8002f16:	060a      	lsls	r2, r1, #24
 8002f18:	d50b      	bpl.n	8002f32 <_printf_i+0x162>
 8002f1a:	07ca      	lsls	r2, r1, #31
 8002f1c:	bf44      	itt	mi
 8002f1e:	f041 0120 	orrmi.w	r1, r1, #32
 8002f22:	6021      	strmi	r1, [r4, #0]
 8002f24:	b91b      	cbnz	r3, 8002f2e <_printf_i+0x15e>
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	f022 0220 	bic.w	r2, r2, #32
 8002f2c:	6022      	str	r2, [r4, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	e7b7      	b.n	8002ea2 <_printf_i+0xd2>
 8002f32:	064d      	lsls	r5, r1, #25
 8002f34:	bf48      	it	mi
 8002f36:	b29b      	uxthmi	r3, r3
 8002f38:	e7ef      	b.n	8002f1a <_printf_i+0x14a>
 8002f3a:	4665      	mov	r5, ip
 8002f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f40:	fb02 3311 	mls	r3, r2, r1, r3
 8002f44:	5cc3      	ldrb	r3, [r0, r3]
 8002f46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	2900      	cmp	r1, #0
 8002f4e:	d1f5      	bne.n	8002f3c <_printf_i+0x16c>
 8002f50:	e7b9      	b.n	8002ec6 <_printf_i+0xf6>
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	6825      	ldr	r5, [r4, #0]
 8002f56:	6961      	ldr	r1, [r4, #20]
 8002f58:	1d18      	adds	r0, r3, #4
 8002f5a:	6010      	str	r0, [r2, #0]
 8002f5c:	0628      	lsls	r0, r5, #24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	d501      	bpl.n	8002f66 <_printf_i+0x196>
 8002f62:	6019      	str	r1, [r3, #0]
 8002f64:	e002      	b.n	8002f6c <_printf_i+0x19c>
 8002f66:	066a      	lsls	r2, r5, #25
 8002f68:	d5fb      	bpl.n	8002f62 <_printf_i+0x192>
 8002f6a:	8019      	strh	r1, [r3, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	6123      	str	r3, [r4, #16]
 8002f70:	4665      	mov	r5, ip
 8002f72:	e7b9      	b.n	8002ee8 <_printf_i+0x118>
 8002f74:	6813      	ldr	r3, [r2, #0]
 8002f76:	1d19      	adds	r1, r3, #4
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	681d      	ldr	r5, [r3, #0]
 8002f7c:	6862      	ldr	r2, [r4, #4]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7fd f935 	bl	80001f0 <memchr>
 8002f86:	b108      	cbz	r0, 8002f8c <_printf_i+0x1bc>
 8002f88:	1b40      	subs	r0, r0, r5
 8002f8a:	6060      	str	r0, [r4, #4]
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	6123      	str	r3, [r4, #16]
 8002f90:	2300      	movs	r3, #0
 8002f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f96:	e7a7      	b.n	8002ee8 <_printf_i+0x118>
 8002f98:	6923      	ldr	r3, [r4, #16]
 8002f9a:	462a      	mov	r2, r5
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	47c0      	blx	r8
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d0aa      	beq.n	8002efc <_printf_i+0x12c>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	079b      	lsls	r3, r3, #30
 8002faa:	d413      	bmi.n	8002fd4 <_printf_i+0x204>
 8002fac:	68e0      	ldr	r0, [r4, #12]
 8002fae:	9b03      	ldr	r3, [sp, #12]
 8002fb0:	4298      	cmp	r0, r3
 8002fb2:	bfb8      	it	lt
 8002fb4:	4618      	movlt	r0, r3
 8002fb6:	e7a3      	b.n	8002f00 <_printf_i+0x130>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	464a      	mov	r2, r9
 8002fbc:	4639      	mov	r1, r7
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	47c0      	blx	r8
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	d09a      	beq.n	8002efc <_printf_i+0x12c>
 8002fc6:	3501      	adds	r5, #1
 8002fc8:	68e3      	ldr	r3, [r4, #12]
 8002fca:	9a03      	ldr	r2, [sp, #12]
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	42ab      	cmp	r3, r5
 8002fd0:	dcf2      	bgt.n	8002fb8 <_printf_i+0x1e8>
 8002fd2:	e7eb      	b.n	8002fac <_printf_i+0x1dc>
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	f104 0919 	add.w	r9, r4, #25
 8002fda:	e7f5      	b.n	8002fc8 <_printf_i+0x1f8>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ac      	bne.n	8002f3a <_printf_i+0x16a>
 8002fe0:	7803      	ldrb	r3, [r0, #0]
 8002fe2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fea:	e76c      	b.n	8002ec6 <_printf_i+0xf6>
 8002fec:	08003281 	.word	0x08003281
 8002ff0:	08003292 	.word	0x08003292

08002ff4 <memcpy>:
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	1e43      	subs	r3, r0, #1
 8002ff8:	440a      	add	r2, r1
 8002ffa:	4291      	cmp	r1, r2
 8002ffc:	d100      	bne.n	8003000 <memcpy+0xc>
 8002ffe:	bd10      	pop	{r4, pc}
 8003000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003008:	e7f7      	b.n	8002ffa <memcpy+0x6>

0800300a <memmove>:
 800300a:	4288      	cmp	r0, r1
 800300c:	b510      	push	{r4, lr}
 800300e:	eb01 0302 	add.w	r3, r1, r2
 8003012:	d807      	bhi.n	8003024 <memmove+0x1a>
 8003014:	1e42      	subs	r2, r0, #1
 8003016:	4299      	cmp	r1, r3
 8003018:	d00a      	beq.n	8003030 <memmove+0x26>
 800301a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800301e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003022:	e7f8      	b.n	8003016 <memmove+0xc>
 8003024:	4283      	cmp	r3, r0
 8003026:	d9f5      	bls.n	8003014 <memmove+0xa>
 8003028:	1881      	adds	r1, r0, r2
 800302a:	1ad2      	subs	r2, r2, r3
 800302c:	42d3      	cmn	r3, r2
 800302e:	d100      	bne.n	8003032 <memmove+0x28>
 8003030:	bd10      	pop	{r4, pc}
 8003032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003036:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800303a:	e7f7      	b.n	800302c <memmove+0x22>

0800303c <_free_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	4605      	mov	r5, r0
 8003040:	2900      	cmp	r1, #0
 8003042:	d045      	beq.n	80030d0 <_free_r+0x94>
 8003044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003048:	1f0c      	subs	r4, r1, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	bfb8      	it	lt
 800304e:	18e4      	addlt	r4, r4, r3
 8003050:	f000 f8d2 	bl	80031f8 <__malloc_lock>
 8003054:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <_free_r+0x98>)
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	4610      	mov	r0, r2
 800305a:	b933      	cbnz	r3, 800306a <_free_r+0x2e>
 800305c:	6063      	str	r3, [r4, #4]
 800305e:	6014      	str	r4, [r2, #0]
 8003060:	4628      	mov	r0, r5
 8003062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003066:	f000 b8c8 	b.w	80031fa <__malloc_unlock>
 800306a:	42a3      	cmp	r3, r4
 800306c:	d90c      	bls.n	8003088 <_free_r+0x4c>
 800306e:	6821      	ldr	r1, [r4, #0]
 8003070:	1862      	adds	r2, r4, r1
 8003072:	4293      	cmp	r3, r2
 8003074:	bf04      	itt	eq
 8003076:	681a      	ldreq	r2, [r3, #0]
 8003078:	685b      	ldreq	r3, [r3, #4]
 800307a:	6063      	str	r3, [r4, #4]
 800307c:	bf04      	itt	eq
 800307e:	1852      	addeq	r2, r2, r1
 8003080:	6022      	streq	r2, [r4, #0]
 8003082:	6004      	str	r4, [r0, #0]
 8003084:	e7ec      	b.n	8003060 <_free_r+0x24>
 8003086:	4613      	mov	r3, r2
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	b10a      	cbz	r2, 8003090 <_free_r+0x54>
 800308c:	42a2      	cmp	r2, r4
 800308e:	d9fa      	bls.n	8003086 <_free_r+0x4a>
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	1858      	adds	r0, r3, r1
 8003094:	42a0      	cmp	r0, r4
 8003096:	d10b      	bne.n	80030b0 <_free_r+0x74>
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	4401      	add	r1, r0
 800309c:	1858      	adds	r0, r3, r1
 800309e:	4282      	cmp	r2, r0
 80030a0:	6019      	str	r1, [r3, #0]
 80030a2:	d1dd      	bne.n	8003060 <_free_r+0x24>
 80030a4:	6810      	ldr	r0, [r2, #0]
 80030a6:	6852      	ldr	r2, [r2, #4]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	4401      	add	r1, r0
 80030ac:	6019      	str	r1, [r3, #0]
 80030ae:	e7d7      	b.n	8003060 <_free_r+0x24>
 80030b0:	d902      	bls.n	80030b8 <_free_r+0x7c>
 80030b2:	230c      	movs	r3, #12
 80030b4:	602b      	str	r3, [r5, #0]
 80030b6:	e7d3      	b.n	8003060 <_free_r+0x24>
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	1821      	adds	r1, r4, r0
 80030bc:	428a      	cmp	r2, r1
 80030be:	bf04      	itt	eq
 80030c0:	6811      	ldreq	r1, [r2, #0]
 80030c2:	6852      	ldreq	r2, [r2, #4]
 80030c4:	6062      	str	r2, [r4, #4]
 80030c6:	bf04      	itt	eq
 80030c8:	1809      	addeq	r1, r1, r0
 80030ca:	6021      	streq	r1, [r4, #0]
 80030cc:	605c      	str	r4, [r3, #4]
 80030ce:	e7c7      	b.n	8003060 <_free_r+0x24>
 80030d0:	bd38      	pop	{r3, r4, r5, pc}
 80030d2:	bf00      	nop
 80030d4:	20000090 	.word	0x20000090

080030d8 <_malloc_r>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	1ccd      	adds	r5, r1, #3
 80030dc:	f025 0503 	bic.w	r5, r5, #3
 80030e0:	3508      	adds	r5, #8
 80030e2:	2d0c      	cmp	r5, #12
 80030e4:	bf38      	it	cc
 80030e6:	250c      	movcc	r5, #12
 80030e8:	2d00      	cmp	r5, #0
 80030ea:	4606      	mov	r6, r0
 80030ec:	db01      	blt.n	80030f2 <_malloc_r+0x1a>
 80030ee:	42a9      	cmp	r1, r5
 80030f0:	d903      	bls.n	80030fa <_malloc_r+0x22>
 80030f2:	230c      	movs	r3, #12
 80030f4:	6033      	str	r3, [r6, #0]
 80030f6:	2000      	movs	r0, #0
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	f000 f87d 	bl	80031f8 <__malloc_lock>
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <_malloc_r+0xac>)
 8003100:	6814      	ldr	r4, [r2, #0]
 8003102:	4621      	mov	r1, r4
 8003104:	b991      	cbnz	r1, 800312c <_malloc_r+0x54>
 8003106:	4c20      	ldr	r4, [pc, #128]	; (8003188 <_malloc_r+0xb0>)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	b91b      	cbnz	r3, 8003114 <_malloc_r+0x3c>
 800310c:	4630      	mov	r0, r6
 800310e:	f000 f863 	bl	80031d8 <_sbrk_r>
 8003112:	6020      	str	r0, [r4, #0]
 8003114:	4629      	mov	r1, r5
 8003116:	4630      	mov	r0, r6
 8003118:	f000 f85e 	bl	80031d8 <_sbrk_r>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d124      	bne.n	800316a <_malloc_r+0x92>
 8003120:	230c      	movs	r3, #12
 8003122:	6033      	str	r3, [r6, #0]
 8003124:	4630      	mov	r0, r6
 8003126:	f000 f868 	bl	80031fa <__malloc_unlock>
 800312a:	e7e4      	b.n	80030f6 <_malloc_r+0x1e>
 800312c:	680b      	ldr	r3, [r1, #0]
 800312e:	1b5b      	subs	r3, r3, r5
 8003130:	d418      	bmi.n	8003164 <_malloc_r+0x8c>
 8003132:	2b0b      	cmp	r3, #11
 8003134:	d90f      	bls.n	8003156 <_malloc_r+0x7e>
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	50cd      	str	r5, [r1, r3]
 800313a:	18cc      	adds	r4, r1, r3
 800313c:	4630      	mov	r0, r6
 800313e:	f000 f85c 	bl	80031fa <__malloc_unlock>
 8003142:	f104 000b 	add.w	r0, r4, #11
 8003146:	1d23      	adds	r3, r4, #4
 8003148:	f020 0007 	bic.w	r0, r0, #7
 800314c:	1ac3      	subs	r3, r0, r3
 800314e:	d0d3      	beq.n	80030f8 <_malloc_r+0x20>
 8003150:	425a      	negs	r2, r3
 8003152:	50e2      	str	r2, [r4, r3]
 8003154:	e7d0      	b.n	80030f8 <_malloc_r+0x20>
 8003156:	428c      	cmp	r4, r1
 8003158:	684b      	ldr	r3, [r1, #4]
 800315a:	bf16      	itet	ne
 800315c:	6063      	strne	r3, [r4, #4]
 800315e:	6013      	streq	r3, [r2, #0]
 8003160:	460c      	movne	r4, r1
 8003162:	e7eb      	b.n	800313c <_malloc_r+0x64>
 8003164:	460c      	mov	r4, r1
 8003166:	6849      	ldr	r1, [r1, #4]
 8003168:	e7cc      	b.n	8003104 <_malloc_r+0x2c>
 800316a:	1cc4      	adds	r4, r0, #3
 800316c:	f024 0403 	bic.w	r4, r4, #3
 8003170:	42a0      	cmp	r0, r4
 8003172:	d005      	beq.n	8003180 <_malloc_r+0xa8>
 8003174:	1a21      	subs	r1, r4, r0
 8003176:	4630      	mov	r0, r6
 8003178:	f000 f82e 	bl	80031d8 <_sbrk_r>
 800317c:	3001      	adds	r0, #1
 800317e:	d0cf      	beq.n	8003120 <_malloc_r+0x48>
 8003180:	6025      	str	r5, [r4, #0]
 8003182:	e7db      	b.n	800313c <_malloc_r+0x64>
 8003184:	20000090 	.word	0x20000090
 8003188:	20000094 	.word	0x20000094

0800318c <_realloc_r>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	4607      	mov	r7, r0
 8003190:	4614      	mov	r4, r2
 8003192:	460e      	mov	r6, r1
 8003194:	b921      	cbnz	r1, 80031a0 <_realloc_r+0x14>
 8003196:	4611      	mov	r1, r2
 8003198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800319c:	f7ff bf9c 	b.w	80030d8 <_malloc_r>
 80031a0:	b922      	cbnz	r2, 80031ac <_realloc_r+0x20>
 80031a2:	f7ff ff4b 	bl	800303c <_free_r>
 80031a6:	4625      	mov	r5, r4
 80031a8:	4628      	mov	r0, r5
 80031aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ac:	f000 f826 	bl	80031fc <_malloc_usable_size_r>
 80031b0:	42a0      	cmp	r0, r4
 80031b2:	d20f      	bcs.n	80031d4 <_realloc_r+0x48>
 80031b4:	4621      	mov	r1, r4
 80031b6:	4638      	mov	r0, r7
 80031b8:	f7ff ff8e 	bl	80030d8 <_malloc_r>
 80031bc:	4605      	mov	r5, r0
 80031be:	2800      	cmp	r0, #0
 80031c0:	d0f2      	beq.n	80031a8 <_realloc_r+0x1c>
 80031c2:	4631      	mov	r1, r6
 80031c4:	4622      	mov	r2, r4
 80031c6:	f7ff ff15 	bl	8002ff4 <memcpy>
 80031ca:	4631      	mov	r1, r6
 80031cc:	4638      	mov	r0, r7
 80031ce:	f7ff ff35 	bl	800303c <_free_r>
 80031d2:	e7e9      	b.n	80031a8 <_realloc_r+0x1c>
 80031d4:	4635      	mov	r5, r6
 80031d6:	e7e7      	b.n	80031a8 <_realloc_r+0x1c>

080031d8 <_sbrk_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4c06      	ldr	r4, [pc, #24]	; (80031f4 <_sbrk_r+0x1c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	4605      	mov	r5, r0
 80031e0:	4608      	mov	r0, r1
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	f7fd fc72 	bl	8000acc <_sbrk>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_sbrk_r+0x1a>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_sbrk_r+0x1a>
 80031f0:	602b      	str	r3, [r5, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	2000013c 	.word	0x2000013c

080031f8 <__malloc_lock>:
 80031f8:	4770      	bx	lr

080031fa <__malloc_unlock>:
 80031fa:	4770      	bx	lr

080031fc <_malloc_usable_size_r>:
 80031fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003200:	1f18      	subs	r0, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	bfbc      	itt	lt
 8003206:	580b      	ldrlt	r3, [r1, r0]
 8003208:	18c0      	addlt	r0, r0, r3
 800320a:	4770      	bx	lr

0800320c <_init>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr

08003218 <_fini>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr
