
SD_SPI_RD_WR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006944  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007094  08007094  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800709c  0800709c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080070a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047f8  20000084  08007128  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000487c  08007128  0002487c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f50d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002250  00000000  00000000  0002f5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  00031818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  00032350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003d77  00000000  00000000  00032d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b74e  00000000  00000000  00036ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008812c  00000000  00000000  00042235  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca361  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031bc  00000000  00000000  000ca3dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006acc 	.word	0x08006acc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08006acc 	.word	0x08006acc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b598      	push	{r3, r4, r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d70:	f000 fb72 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d74:	f000 f8c4 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d78:	f000 f982 	bl	8001080 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000d7c:	f000 f920 	bl	8000fc0 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000d80:	f000 f954 	bl	800102c <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8000d84:	f001 ffa8 	bl	8002cd8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	fresult = f_mount(&fs, "", 0);	//mount SD card
 8000d88:	2200      	movs	r2, #0
 8000d8a:	494b      	ldr	r1, [pc, #300]	; (8000eb8 <main+0x14c>)
 8000d8c:	484b      	ldr	r0, [pc, #300]	; (8000ebc <main+0x150>)
 8000d8e:	f004 f9e7 	bl	8005160 <f_mount>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <main+0x154>)
 8000d98:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <main+0x154>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <main+0x3e>
	  sendUART("Could not mount SD card!!\n");
 8000da2:	4848      	ldr	r0, [pc, #288]	; (8000ec4 <main+0x158>)
 8000da4:	f000 f99e 	bl	80010e4 <sendUART>
 8000da8:	e002      	b.n	8000db0 <main+0x44>
	else
	  sendUART("Successfully mounted SD card!\n");
 8000daa:	4847      	ldr	r0, [pc, #284]	; (8000ec8 <main+0x15c>)
 8000dac:	f000 f99a 	bl	80010e4 <sendUART>


	f_getfree("", &fre_clust, &pfs);
 8000db0:	4a46      	ldr	r2, [pc, #280]	; (8000ecc <main+0x160>)
 8000db2:	4947      	ldr	r1, [pc, #284]	; (8000ed0 <main+0x164>)
 8000db4:	4840      	ldr	r0, [pc, #256]	; (8000eb8 <main+0x14c>)
 8000db6:	f004 ff80 	bl	8005cba <f_getfree>
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000dba:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <main+0x160>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	3b02      	subs	r3, #2
 8000dc2:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <main+0x160>)
 8000dc4:	6812      	ldr	r2, [r2, #0]
 8000dc6:	8952      	ldrh	r2, [r2, #10]
 8000dc8:	fb02 f303 	mul.w	r3, r2, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fba1 	bl	8000514 <__aeabi_ui2d>
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <main+0x168>)
 8000dd8:	f7ff fc16 	bl	8000608 <__aeabi_dmul>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	460c      	mov	r4, r1
 8000de0:	4618      	mov	r0, r3
 8000de2:	4621      	mov	r1, r4
 8000de4:	f7ff fe22 	bl	8000a2c <__aeabi_d2uiz>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <main+0x16c>)
 8000dec:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "SD Total Size: %lu\n", total);
 8000dee:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <main+0x16c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4939      	ldr	r1, [pc, #228]	; (8000edc <main+0x170>)
 8000df6:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <main+0x174>)
 8000df8:	f005 fa42 	bl	8006280 <siprintf>
	sendUART(buffer);
 8000dfc:	4838      	ldr	r0, [pc, #224]	; (8000ee0 <main+0x174>)
 8000dfe:	f000 f971 	bl	80010e4 <sendUART>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000e02:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <main+0x160>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	895b      	ldrh	r3, [r3, #10]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <main+0x164>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	fb03 f302 	mul.w	r3, r3, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fb7e 	bl	8000514 <__aeabi_ui2d>
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <main+0x168>)
 8000e1e:	f7ff fbf3 	bl	8000608 <__aeabi_dmul>
 8000e22:	4603      	mov	r3, r0
 8000e24:	460c      	mov	r4, r1
 8000e26:	4618      	mov	r0, r3
 8000e28:	4621      	mov	r1, r4
 8000e2a:	f7ff fdff 	bl	8000a2c <__aeabi_d2uiz>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <main+0x178>)
 8000e32:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "SD Free Space: %lu\n", free_space);
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <main+0x178>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	492b      	ldr	r1, [pc, #172]	; (8000ee8 <main+0x17c>)
 8000e3c:	4828      	ldr	r0, [pc, #160]	; (8000ee0 <main+0x174>)
 8000e3e:	f005 fa1f 	bl	8006280 <siprintf>
	sendUART(buffer);
 8000e42:	4827      	ldr	r0, [pc, #156]	; (8000ee0 <main+0x174>)
 8000e44:	f000 f94e 	bl	80010e4 <sendUART>

	fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);	//open file / create is non-existent
 8000e48:	2213      	movs	r2, #19
 8000e4a:	4928      	ldr	r1, [pc, #160]	; (8000eec <main+0x180>)
 8000e4c:	4828      	ldr	r0, [pc, #160]	; (8000ef0 <main+0x184>)
 8000e4e:	f004 f9cd 	bl	80051ec <f_open>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <main+0x154>)
 8000e58:	701a      	strb	r2, [r3, #0]

	fresult = f_puts("this data is from the first file\n\n", &fil);
 8000e5a:	4925      	ldr	r1, [pc, #148]	; (8000ef0 <main+0x184>)
 8000e5c:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <main+0x188>)
 8000e5e:	f005 f896 	bl	8005f8e <f_puts>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <main+0x154>)
 8000e68:	701a      	strb	r2, [r3, #0]

	sendUART("file1.txt created/opened and written to\n");
 8000e6a:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <main+0x18c>)
 8000e6c:	f000 f93a 	bl	80010e4 <sendUART>

	fresult = f_close(&fil);
 8000e70:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <main+0x184>)
 8000e72:	f004 fef8 	bl	8005c66 <f_close>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <main+0x154>)
 8000e7c:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&fil, "file1.txt", FA_READ);	//open file / create is non-existent
 8000e7e:	2201      	movs	r2, #1
 8000e80:	491a      	ldr	r1, [pc, #104]	; (8000eec <main+0x180>)
 8000e82:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <main+0x184>)
 8000e84:	f004 f9b2 	bl	80051ec <f_open>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <main+0x154>)
 8000e8e:	701a      	strb	r2, [r3, #0]

	f_gets(buffer, 1024, &fil);
 8000e90:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <main+0x184>)
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <main+0x174>)
 8000e98:	f004 ffc4 	bl	8005e24 <f_gets>

	sendUART("reading... output = \n		");
 8000e9c:	4817      	ldr	r0, [pc, #92]	; (8000efc <main+0x190>)
 8000e9e:	f000 f921 	bl	80010e4 <sendUART>
	sendUART(buffer);
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <main+0x174>)
 8000ea4:	f000 f91e 	bl	80010e4 <sendUART>

	fresult = f_close(&fil);
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <main+0x184>)
 8000eaa:	f004 fedc 	bl	8005c66 <f_close>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <main+0x154>)
 8000eb4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <main+0x14a>
 8000eb8:	08006ae4 	.word	0x08006ae4
 8000ebc:	200002e8 	.word	0x200002e8
 8000ec0:	2000172c 	.word	0x2000172c
 8000ec4:	08006ae8 	.word	0x08006ae8
 8000ec8:	08006b04 	.word	0x08006b04
 8000ecc:	20001728 	.word	0x20001728
 8000ed0:	200002e4 	.word	0x200002e4
 8000ed4:	3fe00000 	.word	0x3fe00000
 8000ed8:	200017cc 	.word	0x200017cc
 8000edc:	08006b24 	.word	0x08006b24
 8000ee0:	20001328 	.word	0x20001328
 8000ee4:	20001324 	.word	0x20001324
 8000ee8:	08006b38 	.word	0x08006b38
 8000eec:	08006b4c 	.word	0x08006b4c
 8000ef0:	200017d0 	.word	0x200017d0
 8000ef4:	08006b58 	.word	0x08006b58
 8000ef8:	08006b7c 	.word	0x08006b7c
 8000efc:	08006ba8 	.word	0x08006ba8

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 f9ae 	bl	8006270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <SystemClock_Config+0xb8>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <SystemClock_Config+0xb8>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <SystemClock_Config+0xb8>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <SystemClock_Config+0xbc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <SystemClock_Config+0xbc>)
 8000f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <SystemClock_Config+0xbc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd63 	bl	8001a40 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f80:	f000 f8d6 	bl	8001130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 ffbd 	bl	8001f20 <HAL_RCC_ClockConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000fac:	f000 f8c0 	bl	8001130 <Error_Handler>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3750      	adds	r7, #80	; 0x50
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <MX_SPI1_Init+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_SPI1_Init+0x64>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_SPI1_Init+0x64>)
 800100c:	220a      	movs	r2, #10
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_SPI1_Init+0x64>)
 8001012:	f001 f951 	bl	80022b8 <HAL_SPI_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800101c:	f000 f888 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20001730 	.word	0x20001730
 8001028:	40013000 	.word	0x40013000

0800102c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_USART2_UART_Init+0x50>)
 8001034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001064:	f001 f98c 	bl	8002380 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800106e:	f000 f85f 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000178c 	.word	0x2000178c
 800107c:	40004400 	.word	0x40004400

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MX_GPIO_Init+0x5c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <MX_GPIO_Init+0x5c>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <MX_GPIO_Init+0x5c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2110      	movs	r1, #16
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <MX_GPIO_Init+0x60>)
 80010b6:	f000 fca9 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80010ba:	2310      	movs	r3, #16
 80010bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_GPIO_Init+0x60>)
 80010d0:	f000 fb1a 	bl	8001708 <HAL_GPIO_Init>

}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <sendUART>:

/* USER CODE BEGIN 4 */
void sendUART(char *format,...) {
 80010e4:	b40f      	push	{r0, r1, r2, r3}
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b096      	sub	sp, #88	; 0x58
 80010ea:	af00      	add	r7, sp, #0
    char str[80];

    /*Extract the the argument list using VA apis */
    va_list args;
    va_start(args, format);
 80010ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010f0:	607b      	str	r3, [r7, #4]
    vsprintf(str, format,args);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f8f6 	bl	80062ec <vsiprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f86b 	bl	80001e0 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	b29a      	uxth	r2, r3
 800110e:	f107 0108 	add.w	r1, r7, #8
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <sendUART+0x48>)
 8001118:	f001 f97f 	bl	800241a <HAL_UART_Transmit>
    va_end(args);
}
 800111c:	bf00      	nop
 800111e:	3758      	adds	r7, #88	; 0x58
 8001120:	46bd      	mov	sp, r7
 8001122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001126:	b004      	add	sp, #16
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000178c 	.word	0x2000178c

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001136:	e7fe      	b.n	8001136 <Error_Handler+0x6>

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_MspInit+0x4c>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_MspInit+0x4c>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_SPI_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011e2:	23e0      	movs	r3, #224	; 0xe0
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f2:	2305      	movs	r3, #5
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_SPI_MspInit+0x8c>)
 80011fe:	f000 fa83 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40013000 	.word	0x40013000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_UART_MspInit+0x84>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12b      	bne.n	8001292 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001272:	230c      	movs	r3, #12
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001282:	2307      	movs	r3, #7
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_UART_MspInit+0x8c>)
 800128e:	f000 fa3b 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40004400 	.word	0x40004400
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <SDTimer_Handler>:
//adding timer function:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <SDTimer_Handler+0x40>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <SDTimer_Handler+0x1c>
		Timer1--;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <SDTimer_Handler+0x40>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b01      	subs	r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <SDTimer_Handler+0x40>)
 80012c2:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <SDTimer_Handler+0x44>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <SDTimer_Handler+0x34>
		Timer2--;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <SDTimer_Handler+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SDTimer_Handler+0x44>)
 80012da:	701a      	strb	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20002801 	.word	0x20002801
 80012ec:	20002800 	.word	0x20002800

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <SysTick_Handler+0x30>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <SysTick_Handler+0x30>)
 8001348:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <SysTick_Handler+0x30>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b09      	cmp	r3, #9
 8001352:	d904      	bls.n	800135e <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Handler+0x30>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800135a:	f7ff ffa5 	bl	80012a8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135e:	f000 f8cd 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000a0 	.word	0x200000a0

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f004 ff3e 	bl	800621c <__errno>
 80013a0:	4602      	mov	r2, r0
 80013a2:	230c      	movs	r3, #12
 80013a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20018000 	.word	0x20018000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	200000a4 	.word	0x200000a4
 80013d4:	20004880 	.word	0x20004880

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <SystemInit+0x28>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <SystemInit+0x28>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SystemInit+0x28>)
 80013ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f2:	609a      	str	r2, [r3, #8]
#endif
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800140a:	e003      	b.n	8001414 <LoopCopyDataInit>

0800140c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800140e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001412:	3104      	adds	r1, #4

08001414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800141a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800141c:	d3f6      	bcc.n	800140c <CopyDataInit>
  ldr  r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001420:	e002      	b.n	8001428 <LoopFillZerobss>

08001422 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001424:	f842 3b04 	str.w	r3, [r2], #4

08001428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800142a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800142c:	d3f9      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800142e:	f7ff ffd3 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f004 fef9 	bl	8006228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fc99 	bl	8000d6c <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001440:	080070a4 	.word	0x080070a4
  ldr  r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001448:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800144c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001450:	2000487c 	.word	0x2000487c

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f90d 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fe54 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f917 	bl	80016ee <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d8:	f000 f8ed 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	20002804 	.word	0x20002804

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20002804 	.word	0x20002804

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff47 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff5c 	bl	8001584 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffb0 	bl	800165c <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e159      	b.n	80019d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 8148 	bne.w	80019d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d00b      	beq.n	8001762 <HAL_GPIO_Init+0x5a>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001756:	2b11      	cmp	r3, #17
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b12      	cmp	r3, #18
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0xfc>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b12      	cmp	r3, #18
 8001802:	d123      	bne.n	800184c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a2 	beq.w	80019d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_GPIO_Init+0x2e4>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a55      	ldr	r2, [pc, #340]	; (80019ec <HAL_GPIO_Init+0x2e4>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_GPIO_Init+0x2e4>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018aa:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a48      	ldr	r2, [pc, #288]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d019      	beq.n	800190a <HAL_GPIO_Init+0x202>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x1fe>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a46      	ldr	r2, [pc, #280]	; (80019fc <HAL_GPIO_Init+0x2f4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1fa>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a45      	ldr	r2, [pc, #276]	; (8001a00 <HAL_GPIO_Init+0x2f8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1f6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a44      	ldr	r2, [pc, #272]	; (8001a04 <HAL_GPIO_Init+0x2fc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1f2>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x204>
 80018fa:	2307      	movs	r3, #7
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x204>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x204>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x204>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x204>
 800190a:	2300      	movs	r3, #0
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191c:	4934      	ldr	r1, [pc, #208]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_GPIO_Init+0x300>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194e:	4a2e      	ldr	r2, [pc, #184]	; (8001a08 <HAL_GPIO_Init+0x300>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001954:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_GPIO_Init+0x300>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001978:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <HAL_GPIO_Init+0x300>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_GPIO_Init+0x300>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a2:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_GPIO_Init+0x300>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_GPIO_Init+0x300>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_GPIO_Init+0x300>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	f67f aea2 	bls.w	8001724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e0:	bf00      	nop
 80019e2:	3724      	adds	r7, #36	; 0x24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40013c00 	.word	0x40013c00

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a28:	e003      	b.n	8001a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e25b      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d075      	beq.n	8001b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5e:	4ba3      	ldr	r3, [pc, #652]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d00c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6a:	4ba0      	ldr	r3, [pc, #640]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d112      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a76:	4b9d      	ldr	r3, [pc, #628]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a82:	d10b      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	4b99      	ldr	r3, [pc, #612]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d05b      	beq.n	8001b48 <HAL_RCC_OscConfig+0x108>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d157      	bne.n	8001b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e236      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d106      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x74>
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a90      	ldr	r2, [pc, #576]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0xb0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x98>
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a8a      	ldr	r2, [pc, #552]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a87      	ldr	r2, [pc, #540]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xb0>
 8001ad8:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a83      	ldr	r2, [pc, #524]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fd14 	bl	8001524 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fd10 	bl	8001524 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1fb      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xc0>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fd00 	bl	8001524 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fcfc 	bl	8001524 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1e7      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0xe8>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d063      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b62:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d116      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x152>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e1bb      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4952      	ldr	r1, [pc, #328]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	e03a      	b.n	8001c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <HAL_RCC_OscConfig+0x2b0>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fcb5 	bl	8001524 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fcb1 	bl	8001524 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e19c      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4940      	ldr	r1, [pc, #256]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_OscConfig+0x2b0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fc94 	bl	8001524 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff fc90 	bl	8001524 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e17b      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d030      	beq.n	8001c8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d016      	beq.n	8001c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_OscConfig+0x2b4>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff fc74 	bl	8001524 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff fc70 	bl	8001524 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e15b      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x200>
 8001c5e:	e015      	b.n	8001c8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_OscConfig+0x2b4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fc5d 	bl	8001524 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fc59 	bl	8001524 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e144      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a0 	beq.w	8001dda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x2b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d121      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_RCC_OscConfig+0x2b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_RCC_OscConfig+0x2b8>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fc1f 	bl	8001524 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e011      	b.n	8001d0e <HAL_RCC_OscConfig+0x2ce>
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	42470000 	.word	0x42470000
 8001cf4:	42470e80 	.word	0x42470e80
 8001cf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7ff fc12 	bl	8001524 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0fd      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b81      	ldr	r3, [pc, #516]	; (8001f14 <HAL_RCC_OscConfig+0x4d4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
 8001d22:	4b7d      	ldr	r3, [pc, #500]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a7c      	ldr	r2, [pc, #496]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2e:	e01c      	b.n	8001d6a <HAL_RCC_OscConfig+0x32a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x312>
 8001d38:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a76      	ldr	r2, [pc, #472]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	4b74      	ldr	r3, [pc, #464]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a73      	ldr	r2, [pc, #460]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	e00b      	b.n	8001d6a <HAL_RCC_OscConfig+0x32a>
 8001d52:	4b71      	ldr	r3, [pc, #452]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a70      	ldr	r2, [pc, #448]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5e:	4b6e      	ldr	r3, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a6d      	ldr	r2, [pc, #436]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d72:	f7ff fbd7 	bl	8001524 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fbd3 	bl	8001524 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0bc      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ee      	beq.n	8001d7a <HAL_RCC_OscConfig+0x33a>
 8001d9c:	e014      	b.n	8001dc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fbc1 	bl	8001524 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff fbbd 	bl	8001524 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0a6      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8092 	beq.w	8001f08 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de4:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d05c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d141      	bne.n	8001e7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fb91 	bl	8001524 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff fb8d 	bl	8001524 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e078      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	019b      	lsls	r3, r3, #6
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	061b      	lsls	r3, r3, #24
 8001e48:	4933      	ldr	r1, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4e:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fb66 	bl	8001524 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff fb62 	bl	8001524 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e04d      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x41c>
 8001e7a:	e045      	b.n	8001f08 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fb4f 	bl	8001524 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff fb4b 	bl	8001524 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e036      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x44a>
 8001ea8:	e02e      	b.n	8001f08 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e029      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_RCC_OscConfig+0x4d8>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d115      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ede:	4013      	ands	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10d      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40007000 	.word	0x40007000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470060 	.word	0x42470060

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0cc      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d90c      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d044      	beq.n	8002040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d119      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e067      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4934      	ldr	r1, [pc, #208]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002010:	f7ff fa88 	bl	8001524 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff fa84 	bl	8001524 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e04f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d20c      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4601      	mov	r1, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	fa21 f303 	lsr.w	r3, r1, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f9e8 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00
 80020dc:	40023800 	.word	0x40023800
 80020e0:	08006c08 	.word	0x08006c08
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002102:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCC_GetSysClockFreq+0x158>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b04      	cmp	r3, #4
 800210c:	d007      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x32>
 800210e:	2b08      	cmp	r3, #8
 8002110:	d008      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x38>
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 808d 	bne.w	8002232 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_RCC_GetSysClockFreq+0x15c>)
 800211a:	60bb      	str	r3, [r7, #8]
       break;
 800211c:	e08c      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800211e:	4b4b      	ldr	r3, [pc, #300]	; (800224c <HAL_RCC_GetSysClockFreq+0x160>)
 8002120:	60bb      	str	r3, [r7, #8]
      break;
 8002122:	e089      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_GetSysClockFreq+0x158>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212e:	4b45      	ldr	r3, [pc, #276]	; (8002244 <HAL_RCC_GetSysClockFreq+0x158>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d023      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213a:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_GetSysClockFreq+0x158>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	f04f 0400 	mov.w	r4, #0
 8002144:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	ea03 0501 	and.w	r5, r3, r1
 8002150:	ea04 0602 	and.w	r6, r4, r2
 8002154:	4a3d      	ldr	r2, [pc, #244]	; (800224c <HAL_RCC_GetSysClockFreq+0x160>)
 8002156:	fb02 f106 	mul.w	r1, r2, r6
 800215a:	2200      	movs	r2, #0
 800215c:	fb02 f205 	mul.w	r2, r2, r5
 8002160:	440a      	add	r2, r1
 8002162:	493a      	ldr	r1, [pc, #232]	; (800224c <HAL_RCC_GetSysClockFreq+0x160>)
 8002164:	fba5 0101 	umull	r0, r1, r5, r1
 8002168:	1853      	adds	r3, r2, r1
 800216a:	4619      	mov	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f04f 0400 	mov.w	r4, #0
 8002172:	461a      	mov	r2, r3
 8002174:	4623      	mov	r3, r4
 8002176:	f7fe fc79 	bl	8000a6c <__aeabi_uldivmod>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e049      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_GetSysClockFreq+0x158>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	f04f 0400 	mov.w	r4, #0
 800218c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	ea03 0501 	and.w	r5, r3, r1
 8002198:	ea04 0602 	and.w	r6, r4, r2
 800219c:	4629      	mov	r1, r5
 800219e:	4632      	mov	r2, r6
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	f04f 0400 	mov.w	r4, #0
 80021a8:	0154      	lsls	r4, r2, #5
 80021aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021ae:	014b      	lsls	r3, r1, #5
 80021b0:	4619      	mov	r1, r3
 80021b2:	4622      	mov	r2, r4
 80021b4:	1b49      	subs	r1, r1, r5
 80021b6:	eb62 0206 	sbc.w	r2, r2, r6
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	f04f 0400 	mov.w	r4, #0
 80021c2:	0194      	lsls	r4, r2, #6
 80021c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021c8:	018b      	lsls	r3, r1, #6
 80021ca:	1a5b      	subs	r3, r3, r1
 80021cc:	eb64 0402 	sbc.w	r4, r4, r2
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	00e2      	lsls	r2, r4, #3
 80021da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021de:	00d9      	lsls	r1, r3, #3
 80021e0:	460b      	mov	r3, r1
 80021e2:	4614      	mov	r4, r2
 80021e4:	195b      	adds	r3, r3, r5
 80021e6:	eb44 0406 	adc.w	r4, r4, r6
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	02a2      	lsls	r2, r4, #10
 80021f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021f8:	0299      	lsls	r1, r3, #10
 80021fa:	460b      	mov	r3, r1
 80021fc:	4614      	mov	r4, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	4621      	mov	r1, r4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	461a      	mov	r2, r3
 800220a:	4623      	mov	r3, r4
 800220c:	f7fe fc2e 	bl	8000a6c <__aeabi_uldivmod>
 8002210:	4603      	mov	r3, r0
 8002212:	460c      	mov	r4, r1
 8002214:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_GetSysClockFreq+0x158>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0c1b      	lsrs	r3, r3, #16
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	3301      	adds	r3, #1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	60bb      	str	r3, [r7, #8]
      break;
 8002230:	e002      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002234:	60bb      	str	r3, [r7, #8]
      break;
 8002236:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002238:	68bb      	ldr	r3, [r7, #8]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	00f42400 	.word	0x00f42400
 800224c:	017d7840 	.word	0x017d7840

08002250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_RCC_GetHCLKFreq+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000000 	.word	0x20000000

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800226c:	f7ff fff0 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002270:	4601      	mov	r1, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0a9b      	lsrs	r3, r3, #10
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4a03      	ldr	r2, [pc, #12]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	08006c18 	.word	0x08006c18

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002294:	f7ff ffdc 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002298:	4601      	mov	r1, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0b5b      	lsrs	r3, r3, #13
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4a03      	ldr	r2, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08006c18 	.word	0x08006c18

080022b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e056      	b.n	8002378 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe ff4f 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002300:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	ea42 0103 	orr.w	r1, r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	0c1b      	lsrs	r3, r3, #16
 8002348:	f003 0104 	and.w	r1, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e03f      	b.n	8002412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe ff36 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f90b 	bl	80025e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b088      	sub	sp, #32
 800241e:	af02      	add	r7, sp, #8
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 8083 	bne.w	8002542 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_UART_Transmit+0x2e>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e07b      	b.n	8002544 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_UART_Transmit+0x40>
 8002456:	2302      	movs	r3, #2
 8002458:	e074      	b.n	8002544 <HAL_UART_Transmit+0x12a>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2221      	movs	r2, #33	; 0x21
 800246c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002470:	f7ff f858 	bl	8001524 <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800248a:	e042      	b.n	8002512 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a2:	d122      	bne.n	80024ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f84c 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e042      	b.n	8002544 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3302      	adds	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	e017      	b.n	8002512 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	e013      	b.n	8002512 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f829 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e01f      	b.n	8002544 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60ba      	str	r2, [r7, #8]
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1b7      	bne.n	800248c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2200      	movs	r2, #0
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f810 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e006      	b.n	8002544 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255c:	e02c      	b.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002564:	d028      	beq.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <UART_WaitOnFlagUntilTimeout+0x30>
 800256c:	f7fe ffda 	bl	8001524 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	429a      	cmp	r2, r3
 800257a:	d21d      	bcs.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800258a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e00f      	b.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4013      	ands	r3, r2
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d0c3      	beq.n	800255e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002622:	f023 030c 	bic.w	r3, r3, #12
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	430b      	orrs	r3, r1
 800262e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264e:	f040 818b 	bne.w	8002968 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4ac1      	ldr	r2, [pc, #772]	; (800295c <UART_SetConfig+0x37c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d005      	beq.n	8002668 <UART_SetConfig+0x88>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4abf      	ldr	r2, [pc, #764]	; (8002960 <UART_SetConfig+0x380>)
 8002662:	4293      	cmp	r3, r2
 8002664:	f040 80bd 	bne.w	80027e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002668:	f7ff fe12 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 800266c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	461d      	mov	r5, r3
 8002672:	f04f 0600 	mov.w	r6, #0
 8002676:	46a8      	mov	r8, r5
 8002678:	46b1      	mov	r9, r6
 800267a:	eb18 0308 	adds.w	r3, r8, r8
 800267e:	eb49 0409 	adc.w	r4, r9, r9
 8002682:	4698      	mov	r8, r3
 8002684:	46a1      	mov	r9, r4
 8002686:	eb18 0805 	adds.w	r8, r8, r5
 800268a:	eb49 0906 	adc.w	r9, r9, r6
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800269a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800269e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026a2:	4688      	mov	r8, r1
 80026a4:	4691      	mov	r9, r2
 80026a6:	eb18 0005 	adds.w	r0, r8, r5
 80026aa:	eb49 0106 	adc.w	r1, r9, r6
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	461d      	mov	r5, r3
 80026b4:	f04f 0600 	mov.w	r6, #0
 80026b8:	196b      	adds	r3, r5, r5
 80026ba:	eb46 0406 	adc.w	r4, r6, r6
 80026be:	461a      	mov	r2, r3
 80026c0:	4623      	mov	r3, r4
 80026c2:	f7fe f9d3 	bl	8000a6c <__aeabi_uldivmod>
 80026c6:	4603      	mov	r3, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	461a      	mov	r2, r3
 80026cc:	4ba5      	ldr	r3, [pc, #660]	; (8002964 <UART_SetConfig+0x384>)
 80026ce:	fba3 2302 	umull	r2, r3, r3, r2
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	461d      	mov	r5, r3
 80026dc:	f04f 0600 	mov.w	r6, #0
 80026e0:	46a9      	mov	r9, r5
 80026e2:	46b2      	mov	sl, r6
 80026e4:	eb19 0309 	adds.w	r3, r9, r9
 80026e8:	eb4a 040a 	adc.w	r4, sl, sl
 80026ec:	4699      	mov	r9, r3
 80026ee:	46a2      	mov	sl, r4
 80026f0:	eb19 0905 	adds.w	r9, r9, r5
 80026f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002704:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002708:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800270c:	4689      	mov	r9, r1
 800270e:	4692      	mov	sl, r2
 8002710:	eb19 0005 	adds.w	r0, r9, r5
 8002714:	eb4a 0106 	adc.w	r1, sl, r6
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	461d      	mov	r5, r3
 800271e:	f04f 0600 	mov.w	r6, #0
 8002722:	196b      	adds	r3, r5, r5
 8002724:	eb46 0406 	adc.w	r4, r6, r6
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	f7fe f99e 	bl	8000a6c <__aeabi_uldivmod>
 8002730:	4603      	mov	r3, r0
 8002732:	460c      	mov	r4, r1
 8002734:	461a      	mov	r2, r3
 8002736:	4b8b      	ldr	r3, [pc, #556]	; (8002964 <UART_SetConfig+0x384>)
 8002738:	fba3 1302 	umull	r1, r3, r3, r2
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	2164      	movs	r1, #100	; 0x64
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	3332      	adds	r3, #50	; 0x32
 800274a:	4a86      	ldr	r2, [pc, #536]	; (8002964 <UART_SetConfig+0x384>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002758:	4498      	add	r8, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	461d      	mov	r5, r3
 800275e:	f04f 0600 	mov.w	r6, #0
 8002762:	46a9      	mov	r9, r5
 8002764:	46b2      	mov	sl, r6
 8002766:	eb19 0309 	adds.w	r3, r9, r9
 800276a:	eb4a 040a 	adc.w	r4, sl, sl
 800276e:	4699      	mov	r9, r3
 8002770:	46a2      	mov	sl, r4
 8002772:	eb19 0905 	adds.w	r9, r9, r5
 8002776:	eb4a 0a06 	adc.w	sl, sl, r6
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800278a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800278e:	4689      	mov	r9, r1
 8002790:	4692      	mov	sl, r2
 8002792:	eb19 0005 	adds.w	r0, r9, r5
 8002796:	eb4a 0106 	adc.w	r1, sl, r6
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	461d      	mov	r5, r3
 80027a0:	f04f 0600 	mov.w	r6, #0
 80027a4:	196b      	adds	r3, r5, r5
 80027a6:	eb46 0406 	adc.w	r4, r6, r6
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	f7fe f95d 	bl	8000a6c <__aeabi_uldivmod>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b6a      	ldr	r3, [pc, #424]	; (8002964 <UART_SetConfig+0x384>)
 80027ba:	fba3 1302 	umull	r1, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2164      	movs	r1, #100	; 0x64
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	3332      	adds	r3, #50	; 0x32
 80027cc:	4a65      	ldr	r2, [pc, #404]	; (8002964 <UART_SetConfig+0x384>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	f003 0207 	and.w	r2, r3, #7
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4442      	add	r2, r8
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e26f      	b.n	8002cc2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027e2:	f7ff fd41 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80027e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	461d      	mov	r5, r3
 80027ec:	f04f 0600 	mov.w	r6, #0
 80027f0:	46a8      	mov	r8, r5
 80027f2:	46b1      	mov	r9, r6
 80027f4:	eb18 0308 	adds.w	r3, r8, r8
 80027f8:	eb49 0409 	adc.w	r4, r9, r9
 80027fc:	4698      	mov	r8, r3
 80027fe:	46a1      	mov	r9, r4
 8002800:	eb18 0805 	adds.w	r8, r8, r5
 8002804:	eb49 0906 	adc.w	r9, r9, r6
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002814:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002818:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800281c:	4688      	mov	r8, r1
 800281e:	4691      	mov	r9, r2
 8002820:	eb18 0005 	adds.w	r0, r8, r5
 8002824:	eb49 0106 	adc.w	r1, r9, r6
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	461d      	mov	r5, r3
 800282e:	f04f 0600 	mov.w	r6, #0
 8002832:	196b      	adds	r3, r5, r5
 8002834:	eb46 0406 	adc.w	r4, r6, r6
 8002838:	461a      	mov	r2, r3
 800283a:	4623      	mov	r3, r4
 800283c:	f7fe f916 	bl	8000a6c <__aeabi_uldivmod>
 8002840:	4603      	mov	r3, r0
 8002842:	460c      	mov	r4, r1
 8002844:	461a      	mov	r2, r3
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <UART_SetConfig+0x384>)
 8002848:	fba3 2302 	umull	r2, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	461d      	mov	r5, r3
 8002856:	f04f 0600 	mov.w	r6, #0
 800285a:	46a9      	mov	r9, r5
 800285c:	46b2      	mov	sl, r6
 800285e:	eb19 0309 	adds.w	r3, r9, r9
 8002862:	eb4a 040a 	adc.w	r4, sl, sl
 8002866:	4699      	mov	r9, r3
 8002868:	46a2      	mov	sl, r4
 800286a:	eb19 0905 	adds.w	r9, r9, r5
 800286e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800287e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002882:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002886:	4689      	mov	r9, r1
 8002888:	4692      	mov	sl, r2
 800288a:	eb19 0005 	adds.w	r0, r9, r5
 800288e:	eb4a 0106 	adc.w	r1, sl, r6
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	461d      	mov	r5, r3
 8002898:	f04f 0600 	mov.w	r6, #0
 800289c:	196b      	adds	r3, r5, r5
 800289e:	eb46 0406 	adc.w	r4, r6, r6
 80028a2:	461a      	mov	r2, r3
 80028a4:	4623      	mov	r3, r4
 80028a6:	f7fe f8e1 	bl	8000a6c <__aeabi_uldivmod>
 80028aa:	4603      	mov	r3, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <UART_SetConfig+0x384>)
 80028b2:	fba3 1302 	umull	r1, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2164      	movs	r1, #100	; 0x64
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	3332      	adds	r3, #50	; 0x32
 80028c4:	4a27      	ldr	r2, [pc, #156]	; (8002964 <UART_SetConfig+0x384>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028d2:	4498      	add	r8, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	461d      	mov	r5, r3
 80028d8:	f04f 0600 	mov.w	r6, #0
 80028dc:	46a9      	mov	r9, r5
 80028de:	46b2      	mov	sl, r6
 80028e0:	eb19 0309 	adds.w	r3, r9, r9
 80028e4:	eb4a 040a 	adc.w	r4, sl, sl
 80028e8:	4699      	mov	r9, r3
 80028ea:	46a2      	mov	sl, r4
 80028ec:	eb19 0905 	adds.w	r9, r9, r5
 80028f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002900:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002904:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002908:	4689      	mov	r9, r1
 800290a:	4692      	mov	sl, r2
 800290c:	eb19 0005 	adds.w	r0, r9, r5
 8002910:	eb4a 0106 	adc.w	r1, sl, r6
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	461d      	mov	r5, r3
 800291a:	f04f 0600 	mov.w	r6, #0
 800291e:	196b      	adds	r3, r5, r5
 8002920:	eb46 0406 	adc.w	r4, r6, r6
 8002924:	461a      	mov	r2, r3
 8002926:	4623      	mov	r3, r4
 8002928:	f7fe f8a0 	bl	8000a6c <__aeabi_uldivmod>
 800292c:	4603      	mov	r3, r0
 800292e:	460c      	mov	r4, r1
 8002930:	461a      	mov	r2, r3
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <UART_SetConfig+0x384>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <UART_SetConfig+0x384>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4442      	add	r2, r8
 8002958:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800295a:	e1b2      	b.n	8002cc2 <UART_SetConfig+0x6e2>
 800295c:	40011000 	.word	0x40011000
 8002960:	40011400 	.word	0x40011400
 8002964:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4ad7      	ldr	r2, [pc, #860]	; (8002ccc <UART_SetConfig+0x6ec>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d005      	beq.n	800297e <UART_SetConfig+0x39e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4ad6      	ldr	r2, [pc, #856]	; (8002cd0 <UART_SetConfig+0x6f0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	f040 80d1 	bne.w	8002b20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800297e:	f7ff fc87 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8002982:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	469a      	mov	sl, r3
 8002988:	f04f 0b00 	mov.w	fp, #0
 800298c:	46d0      	mov	r8, sl
 800298e:	46d9      	mov	r9, fp
 8002990:	eb18 0308 	adds.w	r3, r8, r8
 8002994:	eb49 0409 	adc.w	r4, r9, r9
 8002998:	4698      	mov	r8, r3
 800299a:	46a1      	mov	r9, r4
 800299c:	eb18 080a 	adds.w	r8, r8, sl
 80029a0:	eb49 090b 	adc.w	r9, r9, fp
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029b8:	4688      	mov	r8, r1
 80029ba:	4691      	mov	r9, r2
 80029bc:	eb1a 0508 	adds.w	r5, sl, r8
 80029c0:	eb4b 0609 	adc.w	r6, fp, r9
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	f04f 0400 	mov.w	r4, #0
 80029d6:	0094      	lsls	r4, r2, #2
 80029d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029dc:	008b      	lsls	r3, r1, #2
 80029de:	461a      	mov	r2, r3
 80029e0:	4623      	mov	r3, r4
 80029e2:	4628      	mov	r0, r5
 80029e4:	4631      	mov	r1, r6
 80029e6:	f7fe f841 	bl	8000a6c <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	461a      	mov	r2, r3
 80029f0:	4bb8      	ldr	r3, [pc, #736]	; (8002cd4 <UART_SetConfig+0x6f4>)
 80029f2:	fba3 2302 	umull	r2, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	469b      	mov	fp, r3
 8002a00:	f04f 0c00 	mov.w	ip, #0
 8002a04:	46d9      	mov	r9, fp
 8002a06:	46e2      	mov	sl, ip
 8002a08:	eb19 0309 	adds.w	r3, r9, r9
 8002a0c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a10:	4699      	mov	r9, r3
 8002a12:	46a2      	mov	sl, r4
 8002a14:	eb19 090b 	adds.w	r9, r9, fp
 8002a18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a1c:	f04f 0100 	mov.w	r1, #0
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a30:	4689      	mov	r9, r1
 8002a32:	4692      	mov	sl, r2
 8002a34:	eb1b 0509 	adds.w	r5, fp, r9
 8002a38:	eb4c 060a 	adc.w	r6, ip, sl
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	f04f 0400 	mov.w	r4, #0
 8002a4e:	0094      	lsls	r4, r2, #2
 8002a50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a54:	008b      	lsls	r3, r1, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	4623      	mov	r3, r4
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	4631      	mov	r1, r6
 8002a5e:	f7fe f805 	bl	8000a6c <__aeabi_uldivmod>
 8002a62:	4603      	mov	r3, r0
 8002a64:	460c      	mov	r4, r1
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b9a      	ldr	r3, [pc, #616]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	2164      	movs	r1, #100	; 0x64
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	3332      	adds	r3, #50	; 0x32
 8002a7c:	4a95      	ldr	r2, [pc, #596]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a88:	4498      	add	r8, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	469b      	mov	fp, r3
 8002a8e:	f04f 0c00 	mov.w	ip, #0
 8002a92:	46d9      	mov	r9, fp
 8002a94:	46e2      	mov	sl, ip
 8002a96:	eb19 0309 	adds.w	r3, r9, r9
 8002a9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002a9e:	4699      	mov	r9, r3
 8002aa0:	46a2      	mov	sl, r4
 8002aa2:	eb19 090b 	adds.w	r9, r9, fp
 8002aa6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002abe:	4689      	mov	r9, r1
 8002ac0:	4692      	mov	sl, r2
 8002ac2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ac6:	eb4c 060a 	adc.w	r6, ip, sl
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f04f 0400 	mov.w	r4, #0
 8002adc:	0094      	lsls	r4, r2, #2
 8002ade:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ae2:	008b      	lsls	r3, r1, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	4628      	mov	r0, r5
 8002aea:	4631      	mov	r1, r6
 8002aec:	f7fd ffbe 	bl	8000a6c <__aeabi_uldivmod>
 8002af0:	4603      	mov	r3, r0
 8002af2:	460c      	mov	r4, r1
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b77      	ldr	r3, [pc, #476]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002af8:	fba3 1302 	umull	r1, r3, r3, r2
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	2164      	movs	r1, #100	; 0x64
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	3332      	adds	r3, #50	; 0x32
 8002b0a:	4a72      	ldr	r2, [pc, #456]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4442      	add	r2, r8
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	e0d0      	b.n	8002cc2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b20:	f7ff fba2 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8002b24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	469a      	mov	sl, r3
 8002b2a:	f04f 0b00 	mov.w	fp, #0
 8002b2e:	46d0      	mov	r8, sl
 8002b30:	46d9      	mov	r9, fp
 8002b32:	eb18 0308 	adds.w	r3, r8, r8
 8002b36:	eb49 0409 	adc.w	r4, r9, r9
 8002b3a:	4698      	mov	r8, r3
 8002b3c:	46a1      	mov	r9, r4
 8002b3e:	eb18 080a 	adds.w	r8, r8, sl
 8002b42:	eb49 090b 	adc.w	r9, r9, fp
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b5a:	4688      	mov	r8, r1
 8002b5c:	4691      	mov	r9, r2
 8002b5e:	eb1a 0508 	adds.w	r5, sl, r8
 8002b62:	eb4b 0609 	adc.w	r6, fp, r9
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	0094      	lsls	r4, r2, #2
 8002b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b7e:	008b      	lsls	r3, r1, #2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	4631      	mov	r1, r6
 8002b88:	f7fd ff70 	bl	8000a6c <__aeabi_uldivmod>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002b94:	fba3 2302 	umull	r2, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	469b      	mov	fp, r3
 8002ba2:	f04f 0c00 	mov.w	ip, #0
 8002ba6:	46d9      	mov	r9, fp
 8002ba8:	46e2      	mov	sl, ip
 8002baa:	eb19 0309 	adds.w	r3, r9, r9
 8002bae:	eb4a 040a 	adc.w	r4, sl, sl
 8002bb2:	4699      	mov	r9, r3
 8002bb4:	46a2      	mov	sl, r4
 8002bb6:	eb19 090b 	adds.w	r9, r9, fp
 8002bba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bd2:	4689      	mov	r9, r1
 8002bd4:	4692      	mov	sl, r2
 8002bd6:	eb1b 0509 	adds.w	r5, fp, r9
 8002bda:	eb4c 060a 	adc.w	r6, ip, sl
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4619      	mov	r1, r3
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	f04f 0400 	mov.w	r4, #0
 8002bf0:	0094      	lsls	r4, r2, #2
 8002bf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bf6:	008b      	lsls	r3, r1, #2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	4631      	mov	r1, r6
 8002c00:	f7fd ff34 	bl	8000a6c <__aeabi_uldivmod>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	2164      	movs	r1, #100	; 0x64
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	3332      	adds	r3, #50	; 0x32
 8002c1e:	4a2d      	ldr	r2, [pc, #180]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2a:	4498      	add	r8, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	469b      	mov	fp, r3
 8002c30:	f04f 0c00 	mov.w	ip, #0
 8002c34:	46d9      	mov	r9, fp
 8002c36:	46e2      	mov	sl, ip
 8002c38:	eb19 0309 	adds.w	r3, r9, r9
 8002c3c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c40:	4699      	mov	r9, r3
 8002c42:	46a2      	mov	sl, r4
 8002c44:	eb19 090b 	adds.w	r9, r9, fp
 8002c48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c60:	4689      	mov	r9, r1
 8002c62:	4692      	mov	sl, r2
 8002c64:	eb1b 0509 	adds.w	r5, fp, r9
 8002c68:	eb4c 060a 	adc.w	r6, ip, sl
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	0094      	lsls	r4, r2, #2
 8002c80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c84:	008b      	lsls	r3, r1, #2
 8002c86:	461a      	mov	r2, r3
 8002c88:	4623      	mov	r3, r4
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	f7fd feed 	bl	8000a6c <__aeabi_uldivmod>
 8002c92:	4603      	mov	r3, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2164      	movs	r1, #100	; 0x64
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	3332      	adds	r3, #50	; 0x32
 8002cac:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <UART_SetConfig+0x6f4>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4442      	add	r2, r8
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	e7ff      	b.n	8002cc2 <UART_SetConfig+0x6e2>
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ccc:	40011000 	.word	0x40011000
 8002cd0:	40011400 	.word	0x40011400
 8002cd4:	51eb851f 	.word	0x51eb851f

08002cd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002cdc:	4904      	ldr	r1, [pc, #16]	; (8002cf0 <MX_FATFS_Init+0x18>)
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <MX_FATFS_Init+0x1c>)
 8002ce0:	f003 f9c6 	bl	8006070 <FATFS_LinkDriver>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <MX_FATFS_Init+0x20>)
 8002cea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20002808 	.word	0x20002808
 8002cf4:	2000000c 	.word	0x2000000c
 8002cf8:	2000280c 	.word	0x2000280c

08002cfc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002d00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <USER_initialize+0x24>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <USER_initialize+0x24>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000009 	.word	0x20000009

08002d34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <USER_status+0x24>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <USER_status+0x24>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000009 	.word	0x20000009

08002d5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002d6c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4603      	mov	r3, r0
 8002d88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002d8a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	603a      	str	r2, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
 8002da4:	460b      	mov	r3, r1
 8002da6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
    return res;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <disk_status+0x30>)
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	79fa      	ldrb	r2, [r7, #7]
 8002dd4:	4905      	ldr	r1, [pc, #20]	; (8002dec <disk_status+0x30>)
 8002dd6:	440a      	add	r2, r1
 8002dd8:	7a12      	ldrb	r2, [r2, #8]
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4798      	blx	r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200002d0 	.word	0x200002d0

08002df0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <disk_initialize+0x48>)
 8002e02:	5cd3      	ldrb	r3, [r2, r3]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <disk_initialize+0x48>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <disk_initialize+0x48>)
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	79fa      	ldrb	r2, [r7, #7]
 8002e1e:	4906      	ldr	r1, [pc, #24]	; (8002e38 <disk_initialize+0x48>)
 8002e20:	440a      	add	r2, r1
 8002e22:	7a12      	ldrb	r2, [r2, #8]
 8002e24:	4610      	mov	r0, r2
 8002e26:	4798      	blx	r3
 8002e28:	4603      	mov	r3, r0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200002d0 	.word	0x200002d0

08002e3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <disk_read+0x3c>)
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	689c      	ldr	r4, [r3, #8]
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <disk_read+0x3c>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	7a18      	ldrb	r0, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	47a0      	blx	r4
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200002d0 	.word	0x200002d0

08002e7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <disk_write+0x3c>)
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	68dc      	ldr	r4, [r3, #12]
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <disk_write+0x3c>)
 8002e9c:	4413      	add	r3, r2
 8002e9e:	7a18      	ldrb	r0, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	47a0      	blx	r4
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200002d0 	.word	0x200002d0

08002ebc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	603a      	str	r2, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <disk_ioctl+0x38>)
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	79fa      	ldrb	r2, [r7, #7]
 8002eda:	4906      	ldr	r1, [pc, #24]	; (8002ef4 <disk_ioctl+0x38>)
 8002edc:	440a      	add	r2, r1
 8002ede:	7a10      	ldrb	r0, [r2, #8]
 8002ee0:	79b9      	ldrb	r1, [r7, #6]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4798      	blx	r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  return res;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200002d0 	.word	0x200002d0

08002ef8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3301      	adds	r3, #1
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002f08:	89fb      	ldrh	r3, [r7, #14]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	b21a      	sxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	4313      	orrs	r3, r2
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002f1a:	89fb      	ldrh	r3, [r7, #14]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3303      	adds	r3, #3
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	3202      	adds	r2, #2
 8002f40:	7812      	ldrb	r2, [r2, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	3201      	adds	r2, #1
 8002f4e:	7812      	ldrb	r2, [r2, #0]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
	return rv;
 8002f60:	68fb      	ldr	r3, [r7, #12]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	887a      	ldrh	r2, [r7, #2]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	1c53      	adds	r3, r2, #1
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	6179      	str	r1, [r7, #20]
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3b01      	subs	r3, #1
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f1      	bne.n	8003016 <mem_cpy+0x1a>
	}
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800303e:	b480      	push	{r7}
 8003040:	b087      	sub	sp, #28
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	617a      	str	r2, [r7, #20]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3b01      	subs	r3, #1
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f3      	bne.n	800304e <mem_set+0x10>
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003072:	b480      	push	{r7}
 8003074:	b089      	sub	sp, #36	; 0x24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	61fa      	str	r2, [r7, #28]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	61ba      	str	r2, [r7, #24]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	1acb      	subs	r3, r1, r3
 800309e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <mem_cmp+0x40>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0eb      	beq.n	800308a <mem_cmp+0x18>

	return r;
 80030b2:	697b      	ldr	r3, [r7, #20]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3724      	adds	r7, #36	; 0x24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80030ca:	e002      	b.n	80030d2 <chk_chr+0x12>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3301      	adds	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <chk_chr+0x26>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d1f2      	bne.n	80030cc <chk_chr+0xc>
	return *str;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	781b      	ldrb	r3, [r3, #0]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e029      	b.n	8003160 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800310c:	4a27      	ldr	r2, [pc, #156]	; (80031ac <chk_lock+0xb4>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01d      	beq.n	8003156 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800311a:	4a24      	ldr	r2, [pc, #144]	; (80031ac <chk_lock+0xb4>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	4413      	add	r3, r2
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d116      	bne.n	800315a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <chk_lock+0xb4>)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800313c:	429a      	cmp	r2, r3
 800313e:	d10c      	bne.n	800315a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003140:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <chk_lock+0xb4>)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	4413      	add	r3, r2
 8003148:	3308      	adds	r3, #8
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003150:	429a      	cmp	r2, r3
 8003152:	d102      	bne.n	800315a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003154:	e007      	b.n	8003166 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d9d2      	bls.n	800310c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d109      	bne.n	8003180 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <chk_lock+0x80>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d101      	bne.n	800317c <chk_lock+0x84>
 8003178:	2300      	movs	r3, #0
 800317a:	e010      	b.n	800319e <chk_lock+0xa6>
 800317c:	2312      	movs	r3, #18
 800317e:	e00e      	b.n	800319e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <chk_lock+0xa0>
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <chk_lock+0xb4>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4413      	add	r3, r2
 800318e:	330c      	adds	r3, #12
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003196:	d101      	bne.n	800319c <chk_lock+0xa4>
 8003198:	2310      	movs	r3, #16
 800319a:	e000      	b.n	800319e <chk_lock+0xa6>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	200000b0 	.word	0x200000b0

080031b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e002      	b.n	80031c2 <enq_lock+0x12>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3301      	adds	r3, #1
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d806      	bhi.n	80031d6 <enq_lock+0x26>
 80031c8:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <enq_lock+0x40>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f2      	bne.n	80031bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200000b0 	.word	0x200000b0

080031f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e01f      	b.n	8003244 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003204:	4a41      	ldr	r2, [pc, #260]	; (800330c <inc_lock+0x118>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d113      	bne.n	800323e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003216:	4a3d      	ldr	r2, [pc, #244]	; (800330c <inc_lock+0x118>)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003226:	429a      	cmp	r2, r3
 8003228:	d109      	bne.n	800323e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <inc_lock+0x118>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	4413      	add	r3, r2
 8003232:	3308      	adds	r3, #8
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800323a:	429a      	cmp	r2, r3
 800323c:	d006      	beq.n	800324c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d9dc      	bls.n	8003204 <inc_lock+0x10>
 800324a:	e000      	b.n	800324e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800324c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d132      	bne.n	80032ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e002      	b.n	8003260 <inc_lock+0x6c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d806      	bhi.n	8003274 <inc_lock+0x80>
 8003266:	4a29      	ldr	r2, [pc, #164]	; (800330c <inc_lock+0x118>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	4413      	add	r3, r2
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f2      	bne.n	800325a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d101      	bne.n	800327e <inc_lock+0x8a>
 800327a:	2300      	movs	r3, #0
 800327c:	e040      	b.n	8003300 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4922      	ldr	r1, [pc, #136]	; (800330c <inc_lock+0x118>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	440b      	add	r3, r1
 800328a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	491e      	ldr	r1, [pc, #120]	; (800330c <inc_lock+0x118>)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	440b      	add	r3, r1
 8003298:	3304      	adds	r3, #4
 800329a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	491a      	ldr	r1, [pc, #104]	; (800330c <inc_lock+0x118>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	440b      	add	r3, r1
 80032a8:	3308      	adds	r3, #8
 80032aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80032ac:	4a17      	ldr	r2, [pc, #92]	; (800330c <inc_lock+0x118>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	4413      	add	r3, r2
 80032b4:	330c      	adds	r3, #12
 80032b6:	2200      	movs	r2, #0
 80032b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <inc_lock+0xe0>
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <inc_lock+0x118>)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	330c      	adds	r3, #12
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <inc_lock+0xe0>
 80032d0:	2300      	movs	r3, #0
 80032d2:	e015      	b.n	8003300 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d108      	bne.n	80032ec <inc_lock+0xf8>
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <inc_lock+0x118>)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	330c      	adds	r3, #12
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	e001      	b.n	80032f0 <inc_lock+0xfc>
 80032ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f0:	4906      	ldr	r1, [pc, #24]	; (800330c <inc_lock+0x118>)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	440b      	add	r3, r1
 80032f8:	330c      	adds	r3, #12
 80032fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3301      	adds	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	200000b0 	.word	0x200000b0

08003310 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d825      	bhi.n	8003370 <dec_lock+0x60>
		n = Files[i].ctr;
 8003324:	4a17      	ldr	r2, [pc, #92]	; (8003384 <dec_lock+0x74>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	330c      	adds	r3, #12
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003332:	89fb      	ldrh	r3, [r7, #14]
 8003334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003338:	d101      	bne.n	800333e <dec_lock+0x2e>
 800333a:	2300      	movs	r3, #0
 800333c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800333e:	89fb      	ldrh	r3, [r7, #14]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <dec_lock+0x3a>
 8003344:	89fb      	ldrh	r3, [r7, #14]
 8003346:	3b01      	subs	r3, #1
 8003348:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <dec_lock+0x74>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	4413      	add	r3, r2
 8003352:	330c      	adds	r3, #12
 8003354:	89fa      	ldrh	r2, [r7, #14]
 8003356:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <dec_lock+0x5a>
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <dec_lock+0x74>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4413      	add	r3, r2
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	737b      	strb	r3, [r7, #13]
 800336e:	e001      	b.n	8003374 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003370:	2302      	movs	r3, #2
 8003372:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003374:	7b7b      	ldrb	r3, [r7, #13]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	200000b0 	.word	0x200000b0

08003388 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e010      	b.n	80033b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003396:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <clear_lock+0x44>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	4413      	add	r3, r2
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d105      	bne.n	80033b2 <clear_lock+0x2a>
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <clear_lock+0x44>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d9eb      	bls.n	8003396 <clear_lock+0xe>
	}
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	200000b0 	.word	0x200000b0

080033d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	78db      	ldrb	r3, [r3, #3]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d034      	beq.n	800344e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7858      	ldrb	r0, [r3, #1]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80033f4:	2301      	movs	r3, #1
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	f7ff fd40 	bl	8002e7c <disk_write>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e022      	b.n	800344e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	1ad2      	subs	r2, r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	429a      	cmp	r2, r3
 800341c:	d217      	bcs.n	800344e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	789b      	ldrb	r3, [r3, #2]
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	e010      	b.n	8003448 <sync_window+0x78>
					wsect += fs->fsize;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4413      	add	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7858      	ldrb	r0, [r3, #1]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800343a:	2301      	movs	r3, #1
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	f7ff fd1d 	bl	8002e7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	3b01      	subs	r3, #1
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d8eb      	bhi.n	8003426 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d01b      	beq.n	80034a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffad 	bl	80033d0 <sync_window>
 8003476:	4603      	mov	r3, r0
 8003478:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d113      	bne.n	80034a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7858      	ldrb	r0, [r3, #1]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800348a:	2301      	movs	r3, #1
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	f7ff fcd5 	bl	8002e3c <disk_read>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800349c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff87 	bl	80033d0 <sync_window>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d159      	bne.n	8003580 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d149      	bne.n	8003568 <sync_fs+0xb4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d145      	bne.n	8003568 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	899b      	ldrh	r3, [r3, #12]
 80034e6:	461a      	mov	r2, r3
 80034e8:	2100      	movs	r1, #0
 80034ea:	f7ff fda8 	bl	800303e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3338      	adds	r3, #56	; 0x38
 80034f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80034f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fd37 	bl	8002f6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3338      	adds	r3, #56	; 0x38
 8003504:	4921      	ldr	r1, [pc, #132]	; (800358c <sync_fs+0xd8>)
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fd4c 	bl	8002fa4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3338      	adds	r3, #56	; 0x38
 8003510:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003514:	491e      	ldr	r1, [pc, #120]	; (8003590 <sync_fs+0xdc>)
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fd44 	bl	8002fa4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3338      	adds	r3, #56	; 0x38
 8003520:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7ff fd3a 	bl	8002fa4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3338      	adds	r3, #56	; 0x38
 8003534:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7ff fd30 	bl	8002fa4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7858      	ldrb	r0, [r3, #1]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355c:	2301      	movs	r3, #1
 800355e:	f7ff fc8d 	bl	8002e7c <disk_write>
			fs->fsi_flag = 0;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	2200      	movs	r2, #0
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fca3 	bl	8002ebc <disk_ioctl>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <sync_fs+0xcc>
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	41615252 	.word	0x41615252
 8003590:	61417272 	.word	0x61417272

08003594 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	3b02      	subs	r3, #2
 80035a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	3b02      	subs	r3, #2
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d301      	bcc.n	80035b4 <clust2sect+0x20>
 80035b0:	2300      	movs	r3, #0
 80035b2:	e008      	b.n	80035c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	895b      	ldrh	r3, [r3, #10]
 80035b8:	461a      	mov	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	fb03 f202 	mul.w	r2, r3, r2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	4413      	add	r3, r2
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d904      	bls.n	80035f2 <get_fat+0x20>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80035f2:	2301      	movs	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e0b7      	b.n	8003768 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d05a      	beq.n	80036bc <get_fat+0xea>
 8003606:	2b03      	cmp	r3, #3
 8003608:	d07d      	beq.n	8003706 <get_fat+0x134>
 800360a:	2b01      	cmp	r3, #1
 800360c:	f040 80a2 	bne.w	8003754 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	899b      	ldrh	r3, [r3, #12]
 8003626:	4619      	mov	r1, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	fbb3 f3f1 	udiv	r3, r3, r1
 800362e:	4413      	add	r3, r2
 8003630:	4619      	mov	r1, r3
 8003632:	6938      	ldr	r0, [r7, #16]
 8003634:	f7ff ff10 	bl	8003458 <move_window>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 808d 	bne.w	800375a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	60fa      	str	r2, [r7, #12]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	8992      	ldrh	r2, [r2, #12]
 800364a:	fbb3 f1f2 	udiv	r1, r3, r2
 800364e:	fb02 f201 	mul.w	r2, r2, r1
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800365c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	899b      	ldrh	r3, [r3, #12]
 8003666:	4619      	mov	r1, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	fbb3 f3f1 	udiv	r3, r3, r1
 800366e:	4413      	add	r3, r2
 8003670:	4619      	mov	r1, r3
 8003672:	6938      	ldr	r0, [r7, #16]
 8003674:	f7ff fef0 	bl	8003458 <move_window>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d16f      	bne.n	800375e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	899b      	ldrh	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	fbb3 f1f2 	udiv	r1, r3, r2
 800368a:	fb02 f201 	mul.w	r2, r2, r1
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <get_fat+0xe0>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	e002      	b.n	80036b8 <get_fat+0xe6>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	617b      	str	r3, [r7, #20]
			break;
 80036ba:	e055      	b.n	8003768 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	899b      	ldrh	r3, [r3, #12]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d0:	4413      	add	r3, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	6938      	ldr	r0, [r7, #16]
 80036d6:	f7ff febf 	bl	8003458 <move_window>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d140      	bne.n	8003762 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	8992      	ldrh	r2, [r2, #12]
 80036ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80036f2:	fb02 f200 	mul.w	r2, r2, r0
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	440b      	add	r3, r1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fbfc 	bl	8002ef8 <ld_word>
 8003700:	4603      	mov	r3, r0
 8003702:	617b      	str	r3, [r7, #20]
			break;
 8003704:	e030      	b.n	8003768 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	899b      	ldrh	r3, [r3, #12]
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	b29b      	uxth	r3, r3
 8003712:	4619      	mov	r1, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	4413      	add	r3, r2
 800371c:	4619      	mov	r1, r3
 800371e:	6938      	ldr	r0, [r7, #16]
 8003720:	f7ff fe9a 	bl	8003458 <move_window>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11d      	bne.n	8003766 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	8992      	ldrh	r2, [r2, #12]
 8003738:	fbb3 f0f2 	udiv	r0, r3, r2
 800373c:	fb02 f200 	mul.w	r2, r2, r0
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	440b      	add	r3, r1
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fbef 	bl	8002f28 <ld_dword>
 800374a:	4603      	mov	r3, r0
 800374c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003750:	617b      	str	r3, [r7, #20]
			break;
 8003752:	e009      	b.n	8003768 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e006      	b.n	8003768 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800375a:	bf00      	nop
 800375c:	e004      	b.n	8003768 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003766:	bf00      	nop
		}
	}

	return val;
 8003768:	697b      	ldr	r3, [r7, #20]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003772:	b590      	push	{r4, r7, lr}
 8003774:	b089      	sub	sp, #36	; 0x24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800377e:	2302      	movs	r3, #2
 8003780:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b01      	cmp	r3, #1
 8003786:	f240 8106 	bls.w	8003996 <put_fat+0x224>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	f080 8100 	bcs.w	8003996 <put_fat+0x224>
		switch (fs->fs_type) {
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	f000 8088 	beq.w	80038b0 <put_fat+0x13e>
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	f000 80b0 	beq.w	8003906 <put_fat+0x194>
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	f040 80f5 	bne.w	8003996 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	899b      	ldrh	r3, [r3, #12]
 80037c2:	4619      	mov	r1, r3
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ca:	4413      	add	r3, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff fe42 	bl	8003458 <move_window>
 80037d4:	4603      	mov	r3, r0
 80037d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80037d8:	7ffb      	ldrb	r3, [r7, #31]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 80d4 	bne.w	8003988 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	61ba      	str	r2, [r7, #24]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	8992      	ldrh	r2, [r2, #12]
 80037f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80037f4:	fb02 f200 	mul.w	r2, r2, r0
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	440b      	add	r3, r1
 80037fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <put_fat+0xb2>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	b25b      	sxtb	r3, r3
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	b25a      	sxtb	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	b25b      	sxtb	r3, r3
 800381c:	4313      	orrs	r3, r2
 800381e:	b25b      	sxtb	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e001      	b.n	8003828 <put_fat+0xb6>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	899b      	ldrh	r3, [r3, #12]
 800383a:	4619      	mov	r1, r3
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003842:	4413      	add	r3, r2
 8003844:	4619      	mov	r1, r3
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fe06 	bl	8003458 <move_window>
 800384c:	4603      	mov	r3, r0
 800384e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003850:	7ffb      	ldrb	r3, [r7, #31]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 809a 	bne.w	800398c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	899b      	ldrh	r3, [r3, #12]
 8003862:	461a      	mov	r2, r3
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	fbb3 f0f2 	udiv	r0, r3, r2
 800386a:	fb02 f200 	mul.w	r2, r2, r0
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	440b      	add	r3, r1
 8003872:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <put_fat+0x114>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e00e      	b.n	80038a4 <put_fat+0x132>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b25b      	sxtb	r3, r3
 800388c:	f023 030f 	bic.w	r3, r3, #15
 8003890:	b25a      	sxtb	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	b25b      	sxtb	r3, r3
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	b25b      	sxtb	r3, r3
 800389e:	4313      	orrs	r3, r2
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	70da      	strb	r2, [r3, #3]
			break;
 80038ae:	e072      	b.n	8003996 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	899b      	ldrh	r3, [r3, #12]
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4619      	mov	r1, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c4:	4413      	add	r3, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fdc5 	bl	8003458 <move_window>
 80038ce:	4603      	mov	r3, r0
 80038d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038d2:	7ffb      	ldrb	r3, [r7, #31]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d15b      	bne.n	8003990 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	8992      	ldrh	r2, [r2, #12]
 80038e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80038ea:	fb02 f200 	mul.w	r2, r2, r0
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	b292      	uxth	r2, r2
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fb38 	bl	8002f6e <st_word>
			fs->wflag = 1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	70da      	strb	r2, [r3, #3]
			break;
 8003904:	e047      	b.n	8003996 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	899b      	ldrh	r3, [r3, #12]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	b29b      	uxth	r3, r3
 8003912:	4619      	mov	r1, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	fbb3 f3f1 	udiv	r3, r3, r1
 800391a:	4413      	add	r3, r2
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fd9a 	bl	8003458 <move_window>
 8003924:	4603      	mov	r3, r0
 8003926:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003928:	7ffb      	ldrb	r3, [r7, #31]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d132      	bne.n	8003994 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	8992      	ldrh	r2, [r2, #12]
 8003942:	fbb3 f0f2 	udiv	r0, r3, r2
 8003946:	fb02 f200 	mul.w	r2, r2, r0
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	440b      	add	r3, r1
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff faea 	bl	8002f28 <ld_dword>
 8003954:	4603      	mov	r3, r0
 8003956:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800395a:	4323      	orrs	r3, r4
 800395c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	8992      	ldrh	r2, [r2, #12]
 800396c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003970:	fb02 f200 	mul.w	r2, r2, r0
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	440b      	add	r3, r1
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fb12 	bl	8002fa4 <st_dword>
			fs->wflag = 1;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	70da      	strb	r2, [r3, #3]
			break;
 8003986:	e006      	b.n	8003996 <put_fat+0x224>
			if (res != FR_OK) break;
 8003988:	bf00      	nop
 800398a:	e004      	b.n	8003996 <put_fat+0x224>
			if (res != FR_OK) break;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <put_fat+0x224>
			if (res != FR_OK) break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <put_fat+0x224>
			if (res != FR_OK) break;
 8003994:	bf00      	nop
		}
	}
	return res;
 8003996:	7ffb      	ldrb	r3, [r7, #31]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3724      	adds	r7, #36	; 0x24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}

080039a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d904      	bls.n	80039c6 <remove_chain+0x26>
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d301      	bcc.n	80039ca <remove_chain+0x2a>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e04b      	b.n	8003a62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	69b8      	ldr	r0, [r7, #24]
 80039d8:	f7ff fecb 	bl	8003772 <put_fat>
 80039dc:	4603      	mov	r3, r0
 80039de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80039e0:	7ffb      	ldrb	r3, [r7, #31]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <remove_chain+0x4a>
 80039e6:	7ffb      	ldrb	r3, [r7, #31]
 80039e8:	e03b      	b.n	8003a62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7ff fdf0 	bl	80035d2 <get_fat>
 80039f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d031      	beq.n	8003a5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <remove_chain+0x64>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e02e      	b.n	8003a62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0a:	d101      	bne.n	8003a10 <remove_chain+0x70>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e028      	b.n	8003a62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003a10:	2200      	movs	r2, #0
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	69b8      	ldr	r0, [r7, #24]
 8003a16:	f7ff feac 	bl	8003772 <put_fat>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003a1e:	7ffb      	ldrb	r3, [r7, #31]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <remove_chain+0x88>
 8003a24:	7ffb      	ldrb	r3, [r7, #31]
 8003a26:	e01c      	b.n	8003a62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	3b02      	subs	r3, #2
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20b      	bcs.n	8003a4e <remove_chain+0xae>
			fs->free_clst++;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	791b      	ldrb	r3, [r3, #4]
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3c6      	bcc.n	80039ea <remove_chain+0x4a>
 8003a5c:	e000      	b.n	8003a60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003a5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10d      	bne.n	8003a9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <create_chain+0x2c>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d31b      	bcc.n	8003ace <create_chain+0x64>
 8003a96:	2301      	movs	r3, #1
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e018      	b.n	8003ace <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fd97 	bl	80035d2 <get_fat>
 8003aa4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d801      	bhi.n	8003ab0 <create_chain+0x46>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e070      	b.n	8003b92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab6:	d101      	bne.n	8003abc <create_chain+0x52>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	e06a      	b.n	8003b92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d201      	bcs.n	8003aca <create_chain+0x60>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	e063      	b.n	8003b92 <create_chain+0x128>
		scl = clst;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d307      	bcc.n	8003af2 <create_chain+0x88>
				ncl = 2;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d901      	bls.n	8003af2 <create_chain+0x88>
 8003aee:	2300      	movs	r3, #0
 8003af0:	e04f      	b.n	8003b92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003af2:	69f9      	ldr	r1, [r7, #28]
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff fd6c 	bl	80035d2 <get_fat>
 8003afa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00e      	beq.n	8003b20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d003      	beq.n	8003b10 <create_chain+0xa6>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0e:	d101      	bne.n	8003b14 <create_chain+0xaa>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	e03e      	b.n	8003b92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1da      	bne.n	8003ad2 <create_chain+0x68>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e038      	b.n	8003b92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003b20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b26:	69f9      	ldr	r1, [r7, #28]
 8003b28:	6938      	ldr	r0, [r7, #16]
 8003b2a:	f7ff fe22 	bl	8003772 <put_fat>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <create_chain+0xe2>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	6839      	ldr	r1, [r7, #0]
 8003b42:	6938      	ldr	r0, [r7, #16]
 8003b44:	f7ff fe15 	bl	8003772 <put_fat>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <create_chain+0x116>
		fs->last_clst = ncl;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	3b02      	subs	r3, #2
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d804      	bhi.n	8003b70 <create_chain+0x106>
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	1e5a      	subs	r2, r3, #1
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	791b      	ldrb	r3, [r3, #4]
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	711a      	strb	r2, [r3, #4]
 8003b7e:	e007      	b.n	8003b90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d102      	bne.n	8003b8c <create_chain+0x122>
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8a:	e000      	b.n	8003b8e <create_chain+0x124>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003b90:	69fb      	ldr	r3, [r7, #28]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b087      	sub	sp, #28
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	3304      	adds	r3, #4
 8003bb0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	899b      	ldrh	r3, [r3, #12]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	8952      	ldrh	r2, [r2, #10]
 8003bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	613a      	str	r2, [r7, #16]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <clmt_clust+0x42>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e010      	b.n	8003bfe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d307      	bcc.n	8003bf4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003bf2:	e7e9      	b.n	8003bc8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003bf4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	4413      	add	r3, r2
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c20:	d204      	bcs.n	8003c2c <dir_sdi+0x22>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e071      	b.n	8003d14 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <dir_sdi+0x46>
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d902      	bls.n	8003c50 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10c      	bne.n	8003c70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	8912      	ldrh	r2, [r2, #8]
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d301      	bcc.n	8003c66 <dir_sdi+0x5c>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e056      	b.n	8003d14 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	61da      	str	r2, [r3, #28]
 8003c6e:	e02d      	b.n	8003ccc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	895b      	ldrh	r3, [r3, #10]
 8003c74:	461a      	mov	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	899b      	ldrh	r3, [r3, #12]
 8003c7a:	fb03 f302 	mul.w	r3, r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003c80:	e019      	b.n	8003cb6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fca3 	bl	80035d2 <get_fat>
 8003c8c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c94:	d101      	bne.n	8003c9a <dir_sdi+0x90>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e03c      	b.n	8003d14 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d904      	bls.n	8003caa <dir_sdi+0xa0>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d301      	bcc.n	8003cae <dir_sdi+0xa4>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e032      	b.n	8003d14 <dir_sdi+0x10a>
			ofs -= csz;
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d2e1      	bcs.n	8003c82 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003cbe:	6979      	ldr	r1, [r7, #20]
 8003cc0:	6938      	ldr	r0, [r7, #16]
 8003cc2:	f7ff fc67 	bl	8003594 <clust2sect>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <dir_sdi+0xd4>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e01a      	b.n	8003d14 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	899b      	ldrh	r3, [r3, #12]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cee:	441a      	add	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	899b      	ldrh	r3, [r3, #12]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d06:	fb02 f200 	mul.w	r2, r2, r0
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	18ca      	adds	r2, r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	3320      	adds	r3, #32
 8003d32:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <dir_next+0x28>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d42:	d301      	bcc.n	8003d48 <dir_next+0x2c>
 8003d44:	2304      	movs	r3, #4
 8003d46:	e0bb      	b.n	8003ec0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	899b      	ldrh	r3, [r3, #12]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d54:	fb02 f201 	mul.w	r2, r2, r1
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 809d 	bne.w	8003e9a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	8912      	ldrh	r2, [r2, #8]
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f0c0 808d 	bcc.w	8003e9a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	61da      	str	r2, [r3, #28]
 8003d86:	2304      	movs	r3, #4
 8003d88:	e09a      	b.n	8003ec0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	899b      	ldrh	r3, [r3, #12]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	8952      	ldrh	r2, [r2, #10]
 8003d9a:	3a01      	subs	r2, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d17b      	bne.n	8003e9a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7ff fc11 	bl	80035d2 <get_fat>
 8003db0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d801      	bhi.n	8003dbc <dir_next+0xa0>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e081      	b.n	8003ec0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc2:	d101      	bne.n	8003dc8 <dir_next+0xac>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e07b      	b.n	8003ec0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d359      	bcc.n	8003e86 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
 8003dde:	2304      	movs	r3, #4
 8003de0:	e06e      	b.n	8003ec0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7ff fe3d 	bl	8003a6a <create_chain>
 8003df0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <dir_next+0xe0>
 8003df8:	2307      	movs	r3, #7
 8003dfa:	e061      	b.n	8003ec0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <dir_next+0xea>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e05c      	b.n	8003ec0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0c:	d101      	bne.n	8003e12 <dir_next+0xf6>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e056      	b.n	8003ec0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fadc 	bl	80033d0 <sync_window>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <dir_next+0x106>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e04e      	b.n	8003ec0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	899b      	ldrh	r3, [r3, #12]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2100      	movs	r1, #0
 8003e30:	f7ff f905 	bl	800303e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	6979      	ldr	r1, [r7, #20]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff fbaa 	bl	8003594 <clust2sect>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34
 8003e46:	e012      	b.n	8003e6e <dir_next+0x152>
						fs->wflag = 1;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff fabe 	bl	80033d0 <sync_window>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <dir_next+0x142>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e030      	b.n	8003ec0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3301      	adds	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	895b      	ldrh	r3, [r3, #10]
 8003e72:	461a      	mov	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d3e6      	bcc.n	8003e48 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad2      	subs	r2, r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff fb80 	bl	8003594 <clust2sect>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	899b      	ldrh	r3, [r3, #12]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	fbb3 f0f2 	udiv	r0, r3, r2
 8003eb2:	fb02 f200 	mul.w	r2, r2, r0
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	18ca      	adds	r2, r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003ed8:	2100      	movs	r1, #0
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff fe95 	bl	8003c0a <dir_sdi>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d12b      	bne.n	8003f42 <dir_alloc+0x7a>
		n = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff faaf 	bl	8003458 <move_window>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11d      	bne.n	8003f40 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2be5      	cmp	r3, #229	; 0xe5
 8003f0c:	d004      	beq.n	8003f18 <dir_alloc+0x50>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d102      	bne.n	8003f2c <dir_alloc+0x64>
 8003f26:	e00c      	b.n	8003f42 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fef4 	bl	8003d1c <dir_next>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0d7      	beq.n	8003eee <dir_alloc+0x26>
 8003f3e:	e000      	b.n	8003f42 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003f40:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d101      	bne.n	8003f4c <dir_alloc+0x84>
 8003f48:	2307      	movs	r3, #7
 8003f4a:	75fb      	strb	r3, [r7, #23]
	return res;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	331a      	adds	r3, #26
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe ffc7 	bl	8002ef8 <ld_word>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d109      	bne.n	8003f8a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe ffbc 	bl	8002ef8 <ld_word>
 8003f80:	4603      	mov	r3, r0
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	331a      	adds	r3, #26
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe ffdf 	bl	8002f6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d109      	bne.n	8003fcc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f103 0214 	add.w	r2, r3, #20
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fe ffd1 	bl	8002f6e <st_word>
	}
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	331a      	adds	r3, #26
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe ff88 	bl	8002ef8 <ld_word>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <cmp_lfn+0x1e>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e059      	b.n	80040a6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ffa:	1e5a      	subs	r2, r3, #1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004008:	2301      	movs	r3, #1
 800400a:	81fb      	strh	r3, [r7, #14]
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	e033      	b.n	800407a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004012:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <cmp_lfn+0xdc>)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4413      	add	r3, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe ff69 	bl	8002ef8 <ld_word>
 8004026:	4603      	mov	r3, r0
 8004028:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800402a:	89fb      	ldrh	r3, [r7, #14]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2bfe      	cmp	r3, #254	; 0xfe
 8004034:	d812      	bhi.n	800405c <cmp_lfn+0x88>
 8004036:	89bb      	ldrh	r3, [r7, #12]
 8004038:	4618      	mov	r0, r3
 800403a:	f002 f865 	bl	8006108 <ff_wtoupper>
 800403e:	4603      	mov	r3, r0
 8004040:	461c      	mov	r4, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	617a      	str	r2, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f002 f859 	bl	8006108 <ff_wtoupper>
 8004056:	4603      	mov	r3, r0
 8004058:	429c      	cmp	r4, r3
 800405a:	d001      	beq.n	8004060 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800405c:	2300      	movs	r3, #0
 800405e:	e022      	b.n	80040a6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004060:	89bb      	ldrh	r3, [r7, #12]
 8004062:	81fb      	strh	r3, [r7, #14]
 8004064:	e006      	b.n	8004074 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004066:	89bb      	ldrh	r3, [r7, #12]
 8004068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800406c:	4293      	cmp	r3, r2
 800406e:	d001      	beq.n	8004074 <cmp_lfn+0xa0>
 8004070:	2300      	movs	r3, #0
 8004072:	e018      	b.n	80040a6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	3301      	adds	r3, #1
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b0c      	cmp	r3, #12
 800407e:	d9c8      	bls.n	8004012 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <cmp_lfn+0xd0>
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <cmp_lfn+0xd0>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <cmp_lfn+0xd0>
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80040a4:	2301      	movs	r3, #1
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	bf00      	nop
 80040b0:	08006ca0 	.word	0x08006ca0

080040b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4611      	mov	r1, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	460b      	mov	r3, r1
 80040c4:	71fb      	strb	r3, [r7, #7]
 80040c6:	4613      	mov	r3, r2
 80040c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	330d      	adds	r3, #13
 80040ce:	79ba      	ldrb	r2, [r7, #6]
 80040d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	330b      	adds	r3, #11
 80040d6:	220f      	movs	r2, #15
 80040d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	330c      	adds	r3, #12
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	331a      	adds	r3, #26
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe ff40 	bl	8002f6e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	82fb      	strh	r3, [r7, #22]
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <put_lfn+0x6c>
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	61fa      	str	r2, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004120:	4a17      	ldr	r2, [pc, #92]	; (8004180 <put_lfn+0xcc>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4413      	add	r3, r2
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4413      	add	r3, r2
 800412e:	8afa      	ldrh	r2, [r7, #22]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe ff1b 	bl	8002f6e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004138:	8afb      	ldrh	r3, [r7, #22]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <put_lfn+0x90>
 800413e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004142:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	3301      	adds	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d9da      	bls.n	8004106 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004150:	8afb      	ldrh	r3, [r7, #22]
 8004152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004156:	4293      	cmp	r3, r2
 8004158:	d006      	beq.n	8004168 <put_lfn+0xb4>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d103      	bne.n	8004170 <put_lfn+0xbc>
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	79fa      	ldrb	r2, [r7, #7]
 8004174:	701a      	strb	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	08006ca0 	.word	0x08006ca0

08004184 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	; 0x30
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004192:	220b      	movs	r2, #11
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7fe ff30 	bl	8002ffc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d92b      	bls.n	80041fa <gen_numname+0x76>
		sr = seq;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80041a6:	e022      	b.n	80041ee <gen_numname+0x6a>
			wc = *lfn++;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80041b2:	2300      	movs	r3, #0
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b6:	e017      	b.n	80041e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	005a      	lsls	r2, r3, #1
 80041bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80041c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <gen_numname+0x5e>
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80041dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80041e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	3301      	adds	r3, #1
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d9e4      	bls.n	80041b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1d8      	bne.n	80041a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80041fa:	2307      	movs	r3, #7
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	b2db      	uxtb	r3, r3
 8004208:	3330      	adds	r3, #48	; 0x30
 800420a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800420e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004212:	2b39      	cmp	r3, #57	; 0x39
 8004214:	d904      	bls.n	8004220 <gen_numname+0x9c>
 8004216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800421a:	3307      	adds	r3, #7
 800421c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	62ba      	str	r2, [r7, #40]	; 0x28
 8004226:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800422a:	4413      	add	r3, r2
 800422c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004230:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	603b      	str	r3, [r7, #0]
	} while (seq);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1de      	bne.n	80041fe <gen_numname+0x7a>
	ns[i] = '~';
 8004240:	f107 0214 	add.w	r2, r7, #20
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	4413      	add	r3, r2
 8004248:	227e      	movs	r2, #126	; 0x7e
 800424a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	e002      	b.n	8004258 <gen_numname+0xd4>
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	3301      	adds	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	429a      	cmp	r2, r3
 800425e:	d205      	bcs.n	800426c <gen_numname+0xe8>
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	4413      	add	r3, r2
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b20      	cmp	r3, #32
 800426a:	d1f2      	bne.n	8004252 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	2b07      	cmp	r3, #7
 8004270:	d808      	bhi.n	8004284 <gen_numname+0x100>
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	62ba      	str	r2, [r7, #40]	; 0x28
 8004278:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800427c:	4413      	add	r3, r2
 800427e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004282:	e000      	b.n	8004286 <gen_numname+0x102>
 8004284:	2120      	movs	r1, #32
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	627a      	str	r2, [r7, #36]	; 0x24
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	460a      	mov	r2, r1
 8004292:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	2b07      	cmp	r3, #7
 8004298:	d9e8      	bls.n	800426c <gen_numname+0xe8>
}
 800429a:	bf00      	nop
 800429c:	3730      	adds	r7, #48	; 0x30
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80042ae:	230b      	movs	r3, #11
 80042b0:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	0852      	lsrs	r2, r2, #1
 80042b8:	01db      	lsls	r3, r3, #7
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	1c59      	adds	r1, r3, #1
 80042c2:	6079      	str	r1, [r7, #4]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	4413      	add	r3, r2
 80042c8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ed      	bne.n	80042b2 <sum_sfn+0x10>
	return sum;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80042f2:	2100      	movs	r1, #0
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fc88 	bl	8003c0a <dir_sdi>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <dir_find+0x24>
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	e0a9      	b.n	800445c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004308:	23ff      	movs	r3, #255	; 0xff
 800430a:	753b      	strb	r3, [r7, #20]
 800430c:	7d3b      	ldrb	r3, [r7, #20]
 800430e:	757b      	strb	r3, [r7, #21]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	4619      	mov	r1, r3
 800431e:	6938      	ldr	r0, [r7, #16]
 8004320:	f7ff f89a 	bl	8003458 <move_window>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 8090 	bne.w	8004450 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004338:	7dbb      	ldrb	r3, [r7, #22]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <dir_find+0x60>
 800433e:	2304      	movs	r3, #4
 8004340:	75fb      	strb	r3, [r7, #23]
 8004342:	e08a      	b.n	800445a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	330b      	adds	r3, #11
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004358:	7dbb      	ldrb	r3, [r7, #22]
 800435a:	2be5      	cmp	r3, #229	; 0xe5
 800435c:	d007      	beq.n	800436e <dir_find+0x8a>
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <dir_find+0x98>
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b0f      	cmp	r3, #15
 800436c:	d006      	beq.n	800437c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800436e:	23ff      	movs	r3, #255	; 0xff
 8004370:	757b      	strb	r3, [r7, #21]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
 800437a:	e05e      	b.n	800443a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	d136      	bne.n	80043f0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d154      	bne.n	800443a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004390:	7dbb      	ldrb	r3, [r7, #22]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	7b5b      	ldrb	r3, [r3, #13]
 80043a0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80043a2:	7dbb      	ldrb	r3, [r7, #22]
 80043a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a8:	75bb      	strb	r3, [r7, #22]
 80043aa:	7dbb      	ldrb	r3, [r7, #22]
 80043ac:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80043b6:	7dba      	ldrb	r2, [r7, #22]
 80043b8:	7d7b      	ldrb	r3, [r7, #21]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d115      	bne.n	80043ea <dir_find+0x106>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	330d      	adds	r3, #13
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	7d3a      	ldrb	r2, [r7, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d10e      	bne.n	80043ea <dir_find+0x106>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f7ff fdfc 	bl	8003fd4 <cmp_lfn>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <dir_find+0x106>
 80043e2:	7d7b      	ldrb	r3, [r7, #21]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e000      	b.n	80043ec <dir_find+0x108>
 80043ea:	23ff      	movs	r3, #255	; 0xff
 80043ec:	757b      	strb	r3, [r7, #21]
 80043ee:	e024      	b.n	800443a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80043f0:	7d7b      	ldrb	r3, [r7, #21]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <dir_find+0x126>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ff51 	bl	80042a2 <sum_sfn>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	7d3b      	ldrb	r3, [r7, #20]
 8004406:	4293      	cmp	r3, r2
 8004408:	d024      	beq.n	8004454 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <dir_find+0x14a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a18      	ldr	r0, [r3, #32]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3324      	adds	r3, #36	; 0x24
 8004420:	220b      	movs	r2, #11
 8004422:	4619      	mov	r1, r3
 8004424:	f7fe fe25 	bl	8003072 <mem_cmp>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d014      	beq.n	8004458 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800442e:	23ff      	movs	r3, #255	; 0xff
 8004430:	757b      	strb	r3, [r7, #21]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800443a:	2100      	movs	r1, #0
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fc6d 	bl	8003d1c <dir_next>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f43f af65 	beq.w	8004318 <dir_find+0x34>
 800444e:	e004      	b.n	800445a <dir_find+0x176>
		if (res != FR_OK) break;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004458:	bf00      	nop

	return res;
 800445a:	7dfb      	ldrb	r3, [r7, #23]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004478:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <dir_register+0x20>
 8004480:	2306      	movs	r3, #6
 8004482:	e0e0      	b.n	8004646 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
 8004488:	e002      	b.n	8004490 <dir_register+0x2c>
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	3301      	adds	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f4      	bne.n	800448a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80044a6:	f107 030c 	add.w	r3, r7, #12
 80044aa:	220c      	movs	r2, #12
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fda5 	bl	8002ffc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d032      	beq.n	8004522 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80044c4:	2301      	movs	r3, #1
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c8:	e016      	b.n	80044f8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	f107 010c 	add.w	r1, r7, #12
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f7ff fe53 	bl	8004184 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff00 	bl	80042e4 <dir_find>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80044ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	3301      	adds	r3, #1
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2b63      	cmp	r3, #99	; 0x63
 80044fc:	d9e5      	bls.n	80044ca <dir_register+0x66>
 80044fe:	e000      	b.n	8004502 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004500:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d101      	bne.n	800450c <dir_register+0xa8>
 8004508:	2307      	movs	r3, #7
 800450a:	e09c      	b.n	8004646 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800450c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004510:	2b04      	cmp	r3, #4
 8004512:	d002      	beq.n	800451a <dir_register+0xb6>
 8004514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004518:	e095      	b.n	8004646 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800451a:	7dfa      	ldrb	r2, [r7, #23]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <dir_register+0xd8>
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	330c      	adds	r3, #12
 8004530:	4a47      	ldr	r2, [pc, #284]	; (8004650 <dir_register+0x1ec>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	089b      	lsrs	r3, r3, #2
 8004538:	3301      	adds	r3, #1
 800453a:	e000      	b.n	800453e <dir_register+0xda>
 800453c:	2301      	movs	r3, #1
 800453e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004540:	6a39      	ldr	r1, [r7, #32]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fcc0 	bl	8003ec8 <dir_alloc>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800454e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004552:	2b00      	cmp	r3, #0
 8004554:	d148      	bne.n	80045e8 <dir_register+0x184>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	3b01      	subs	r3, #1
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d042      	beq.n	80045e8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	015b      	lsls	r3, r3, #5
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fb4b 	bl	8003c0a <dir_sdi>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800457a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800457e:	2b00      	cmp	r3, #0
 8004580:	d132      	bne.n	80045e8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3324      	adds	r3, #36	; 0x24
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe8b 	bl	80042a2 <sum_sfn>
 800458c:	4603      	mov	r3, r0
 800458e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4619      	mov	r1, r3
 8004596:	69f8      	ldr	r0, [r7, #28]
 8004598:	f7fe ff5e 	bl	8003458 <move_window>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80045a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	6918      	ldr	r0, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a19      	ldr	r1, [r3, #32]
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	7efb      	ldrb	r3, [r7, #27]
 80045b8:	f7ff fd7c 	bl	80040b4 <put_lfn>
				fs->wflag = 1;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2201      	movs	r2, #1
 80045c0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80045c2:	2100      	movs	r1, #0
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fba9 	bl	8003d1c <dir_next>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80045d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <dir_register+0x184>
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	3b01      	subs	r3, #1
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1d5      	bne.n	8004590 <dir_register+0x12c>
 80045e4:	e000      	b.n	80045e8 <dir_register+0x184>
				if (res != FR_OK) break;
 80045e6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80045e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d128      	bne.n	8004642 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4619      	mov	r1, r3
 80045f6:	69f8      	ldr	r0, [r7, #28]
 80045f8:	f7fe ff2e 	bl	8003458 <move_window>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11b      	bne.n	8004642 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	2220      	movs	r2, #32
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fd13 	bl	800303e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a18      	ldr	r0, [r3, #32]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3324      	adds	r3, #36	; 0x24
 8004620:	220b      	movs	r2, #11
 8004622:	4619      	mov	r1, r3
 8004624:	f7fe fcea 	bl	8002ffc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	330c      	adds	r3, #12
 8004634:	f002 0218 	and.w	r2, r2, #24
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2201      	movs	r2, #1
 8004640:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004646:	4618      	mov	r0, r3
 8004648:	3730      	adds	r7, #48	; 0x30
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	4ec4ec4f 	.word	0x4ec4ec4f

08004654 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	61ba      	str	r2, [r7, #24]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004684:	2b1f      	cmp	r3, #31
 8004686:	d940      	bls.n	800470a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800468a:	2b2f      	cmp	r3, #47	; 0x2f
 800468c:	d006      	beq.n	800469c <create_name+0x48>
 800468e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004690:	2b5c      	cmp	r3, #92	; 0x5c
 8004692:	d110      	bne.n	80046b6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004694:	e002      	b.n	800469c <create_name+0x48>
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3301      	adds	r3, #1
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4413      	add	r3, r2
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b2f      	cmp	r3, #47	; 0x2f
 80046a6:	d0f6      	beq.n	8004696 <create_name+0x42>
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4413      	add	r3, r2
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b5c      	cmp	r3, #92	; 0x5c
 80046b2:	d0f0      	beq.n	8004696 <create_name+0x42>
			break;
 80046b4:	e02a      	b.n	800470c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2bfe      	cmp	r3, #254	; 0xfe
 80046ba:	d901      	bls.n	80046c0 <create_name+0x6c>
 80046bc:	2306      	movs	r3, #6
 80046be:	e177      	b.n	80049b0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80046c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80046c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 fce0 	bl	8006090 <ff_convert>
 80046d0:	4603      	mov	r3, r0
 80046d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80046d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <create_name+0x8a>
 80046da:	2306      	movs	r3, #6
 80046dc:	e168      	b.n	80049b0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80046de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046e0:	2b7f      	cmp	r3, #127	; 0x7f
 80046e2:	d809      	bhi.n	80046f8 <create_name+0xa4>
 80046e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046e6:	4619      	mov	r1, r3
 80046e8:	48b3      	ldr	r0, [pc, #716]	; (80049b8 <create_name+0x364>)
 80046ea:	f7fe fce9 	bl	80030c0 <chk_chr>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <create_name+0xa4>
 80046f4:	2306      	movs	r3, #6
 80046f6:	e15b      	b.n	80049b0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	617a      	str	r2, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004706:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004708:	e7b4      	b.n	8004674 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800470a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	441a      	add	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004718:	2b1f      	cmp	r3, #31
 800471a:	d801      	bhi.n	8004720 <create_name+0xcc>
 800471c:	2304      	movs	r3, #4
 800471e:	e000      	b.n	8004722 <create_name+0xce>
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004726:	e011      	b.n	800474c <create_name+0xf8>
		w = lfn[di - 1];
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800472e:	3b01      	subs	r3, #1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800473a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800473c:	2b20      	cmp	r3, #32
 800473e:	d002      	beq.n	8004746 <create_name+0xf2>
 8004740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004742:	2b2e      	cmp	r3, #46	; 0x2e
 8004744:	d106      	bne.n	8004754 <create_name+0x100>
		di--;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	3b01      	subs	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1ea      	bne.n	8004728 <create_name+0xd4>
 8004752:	e000      	b.n	8004756 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004754:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	2200      	movs	r2, #0
 8004760:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <create_name+0x118>
 8004768:	2306      	movs	r3, #6
 800476a:	e121      	b.n	80049b0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	220b      	movs	r2, #11
 8004772:	2120      	movs	r1, #32
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fc62 	bl	800303e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e002      	b.n	8004786 <create_name+0x132>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	3301      	adds	r3, #1
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	2b20      	cmp	r3, #32
 8004792:	d0f5      	beq.n	8004780 <create_name+0x12c>
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	2b2e      	cmp	r3, #46	; 0x2e
 80047a0:	d0ee      	beq.n	8004780 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <create_name+0x168>
 80047a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ac:	f043 0303 	orr.w	r3, r3, #3
 80047b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80047b4:	e002      	b.n	80047bc <create_name+0x168>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <create_name+0x182>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047c8:	3b01      	subs	r3, #1
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2b2e      	cmp	r3, #46	; 0x2e
 80047d4:	d1ef      	bne.n	80047b6 <create_name+0x162>

	i = b = 0; ni = 8;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	2308      	movs	r3, #8
 80047e2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	61ba      	str	r2, [r7, #24]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80047f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8090 	beq.w	800491c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80047fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d006      	beq.n	8004810 <create_name+0x1bc>
 8004802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004804:	2b2e      	cmp	r3, #46	; 0x2e
 8004806:	d10a      	bne.n	800481e <create_name+0x1ca>
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	d006      	beq.n	800481e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004814:	f043 0303 	orr.w	r3, r3, #3
 8004818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800481c:	e07d      	b.n	800491a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	429a      	cmp	r2, r3
 8004824:	d203      	bcs.n	800482e <create_name+0x1da>
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	429a      	cmp	r2, r3
 800482c:	d123      	bne.n	8004876 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2b0b      	cmp	r3, #11
 8004832:	d106      	bne.n	8004842 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004838:	f043 0303 	orr.w	r3, r3, #3
 800483c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004840:	e06f      	b.n	8004922 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	429a      	cmp	r2, r3
 8004848:	d005      	beq.n	8004856 <create_name+0x202>
 800484a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800484e:	f043 0303 	orr.w	r3, r3, #3
 8004852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	429a      	cmp	r2, r3
 800485c:	d860      	bhi.n	8004920 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	2308      	movs	r3, #8
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	230b      	movs	r3, #11
 8004868:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800486a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004874:	e051      	b.n	800491a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d914      	bls.n	80048a6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800487c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f001 fc05 	bl	8006090 <ff_convert>
 8004886:	4603      	mov	r3, r0
 8004888:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800488a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <create_name+0x246>
 8004890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004892:	3b80      	subs	r3, #128	; 0x80
 8004894:	4a49      	ldr	r2, [pc, #292]	; (80049bc <create_name+0x368>)
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800489a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80048a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <create_name+0x268>
 80048ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048ae:	4619      	mov	r1, r3
 80048b0:	4843      	ldr	r0, [pc, #268]	; (80049c0 <create_name+0x36c>)
 80048b2:	f7fe fc05 	bl	80030c0 <chk_chr>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80048bc:	235f      	movs	r3, #95	; 0x5f
 80048be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048c4:	f043 0303 	orr.w	r3, r3, #3
 80048c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048cc:	e01b      	b.n	8004906 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80048ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d909      	bls.n	80048e8 <create_name+0x294>
 80048d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048d6:	2b5a      	cmp	r3, #90	; 0x5a
 80048d8:	d806      	bhi.n	80048e8 <create_name+0x294>
					b |= 2;
 80048da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048de:	f043 0302 	orr.w	r3, r3, #2
 80048e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80048e6:	e00e      	b.n	8004906 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80048e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048ea:	2b60      	cmp	r3, #96	; 0x60
 80048ec:	d90b      	bls.n	8004906 <create_name+0x2b2>
 80048ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048f0:	2b7a      	cmp	r3, #122	; 0x7a
 80048f2:	d808      	bhi.n	8004906 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80048f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004902:	3b20      	subs	r3, #32
 8004904:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	623a      	str	r2, [r7, #32]
 800490c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800490e:	b2d1      	uxtb	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	460a      	mov	r2, r1
 8004916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800491a:	e763      	b.n	80047e4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8004920:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004928:	2be5      	cmp	r3, #229	; 0xe5
 800492a:	d103      	bne.n	8004934 <create_name+0x2e0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2205      	movs	r2, #5
 8004930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b08      	cmp	r3, #8
 8004938:	d104      	bne.n	8004944 <create_name+0x2f0>
 800493a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004944:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b0c      	cmp	r3, #12
 800494e:	d005      	beq.n	800495c <create_name+0x308>
 8004950:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b03      	cmp	r3, #3
 800495a:	d105      	bne.n	8004968 <create_name+0x314>
 800495c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d117      	bne.n	80049a4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004974:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <create_name+0x338>
 8004980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004984:	f043 0310 	orr.w	r3, r3, #16
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800498c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b04      	cmp	r3, #4
 8004996:	d105      	bne.n	80049a4 <create_name+0x350>
 8004998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800499c:	f043 0308 	orr.w	r3, r3, #8
 80049a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80049aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80049ae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08006bc0 	.word	0x08006bc0
 80049bc:	08006c20 	.word	0x08006c20
 80049c0:	08006bcc 	.word	0x08006bcc

080049c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80049d8:	e002      	b.n	80049e0 <follow_path+0x1c>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b2f      	cmp	r3, #47	; 0x2f
 80049e6:	d0f8      	beq.n	80049da <follow_path+0x16>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b5c      	cmp	r3, #92	; 0x5c
 80049ee:	d0f4      	beq.n	80049da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b1f      	cmp	r3, #31
 80049fc:	d80a      	bhi.n	8004a14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004a06:	2100      	movs	r1, #0
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff f8fe 	bl	8003c0a <dir_sdi>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	75fb      	strb	r3, [r7, #23]
 8004a12:	e048      	b.n	8004aa6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004a14:	463b      	mov	r3, r7
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fe1b 	bl	8004654 <create_name>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d139      	bne.n	8004a9c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fc5b 	bl	80042e4 <dir_find>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004a38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d12c      	bne.n	8004aa0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004a46:	7afb      	ldrb	r3, [r7, #11]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d127      	bne.n	8004aa0 <follow_path+0xdc>
 8004a50:	2305      	movs	r3, #5
 8004a52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004a54:	e024      	b.n	8004aa0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d121      	bne.n	8004aa4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	799b      	ldrb	r3, [r3, #6]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004a6c:	2305      	movs	r3, #5
 8004a6e:	75fb      	strb	r3, [r7, #23]
 8004a70:	e019      	b.n	8004aa6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	8992      	ldrh	r2, [r2, #12]
 8004a80:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a84:	fb02 f200 	mul.w	r2, r2, r0
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f7ff fa61 	bl	8003f56 <ld_clust>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004a9a:	e7bb      	b.n	8004a14 <follow_path+0x50>
			if (res != FR_OK) break;
 8004a9c:	bf00      	nop
 8004a9e:	e002      	b.n	8004aa6 <follow_path+0xe2>
				break;
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004aa4:	bf00      	nop
			}
		}
	}

	return res;
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004abc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d031      	beq.n	8004b2a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e002      	b.n	8004ad4 <get_ldnumber+0x24>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b1f      	cmp	r3, #31
 8004ada:	d903      	bls.n	8004ae4 <get_ldnumber+0x34>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b3a      	cmp	r3, #58	; 0x3a
 8004ae2:	d1f4      	bne.n	8004ace <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b3a      	cmp	r3, #58	; 0x3a
 8004aea:	d11c      	bne.n	8004b26 <get_ldnumber+0x76>
			tp = *path;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	60fa      	str	r2, [r7, #12]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	3b30      	subs	r3, #48	; 0x30
 8004afc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b09      	cmp	r3, #9
 8004b02:	d80e      	bhi.n	8004b22 <get_ldnumber+0x72>
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d10a      	bne.n	8004b22 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d107      	bne.n	8004b22 <get_ldnumber+0x72>
					vol = (int)i;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	e002      	b.n	8004b2c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004b2a:	693b      	ldr	r3, [r7, #16]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	70da      	strb	r2, [r3, #3]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe fc80 	bl	8003458 <move_window>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <check_fs+0x2a>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	e038      	b.n	8004bd4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3338      	adds	r3, #56	; 0x38
 8004b66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe f9c4 	bl	8002ef8 <ld_word>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <check_fs+0x48>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e029      	b.n	8004bd4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b86:	2be9      	cmp	r3, #233	; 0xe9
 8004b88:	d009      	beq.n	8004b9e <check_fs+0x66>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b90:	2beb      	cmp	r3, #235	; 0xeb
 8004b92:	d11e      	bne.n	8004bd2 <check_fs+0x9a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b9a:	2b90      	cmp	r3, #144	; 0x90
 8004b9c:	d119      	bne.n	8004bd2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3338      	adds	r3, #56	; 0x38
 8004ba2:	3336      	adds	r3, #54	; 0x36
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fe f9bf 	bl	8002f28 <ld_dword>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <check_fs+0xa4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <check_fs+0x82>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e00c      	b.n	8004bd4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3338      	adds	r3, #56	; 0x38
 8004bbe:	3352      	adds	r3, #82	; 0x52
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe f9b1 	bl	8002f28 <ld_dword>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <check_fs+0xa8>)
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d101      	bne.n	8004bd2 <check_fs+0x9a>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004bd2:	2302      	movs	r3, #2
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	00544146 	.word	0x00544146
 8004be0:	33544146 	.word	0x33544146

08004be4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b096      	sub	sp, #88	; 0x58
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff ff59 	bl	8004ab0 <get_ldnumber>
 8004bfe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da01      	bge.n	8004c0a <find_volume+0x26>
 8004c06:	230b      	movs	r3, #11
 8004c08:	e268      	b.n	80050dc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004c0a:	4ab0      	ldr	r2, [pc, #704]	; (8004ecc <find_volume+0x2e8>)
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <find_volume+0x3a>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	e25e      	b.n	80050dc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c22:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01a      	beq.n	8004c6a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe f8bf 	bl	8002dbc <disk_status>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004c44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10c      	bne.n	8004c6a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <find_volume+0x82>
 8004c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004c62:	230a      	movs	r3, #10
 8004c64:	e23a      	b.n	80050dc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8004c66:	2300      	movs	r3, #0
 8004c68:	e238      	b.n	80050dc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe f8b7 	bl	8002df0 <disk_initialize>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004c94:	2303      	movs	r3, #3
 8004c96:	e221      	b.n	80050dc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <find_volume+0xca>
 8004c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004caa:	230a      	movs	r3, #10
 8004cac:	e216      	b.n	80050dc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	7858      	ldrb	r0, [r3, #1]
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2102      	movs	r1, #2
 8004cba:	f7fe f8ff 	bl	8002ebc <disk_ioctl>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <find_volume+0xe4>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e209      	b.n	80050dc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	899b      	ldrh	r3, [r3, #12]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d80d      	bhi.n	8004cee <find_volume+0x10a>
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	899b      	ldrh	r3, [r3, #12]
 8004cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cda:	d308      	bcc.n	8004cee <find_volume+0x10a>
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	899b      	ldrh	r3, [r3, #12]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	899b      	ldrh	r3, [r3, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <find_volume+0x10e>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1f4      	b.n	80050dc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004cf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cfa:	f7ff ff1d 	bl	8004b38 <check_fs>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d14b      	bne.n	8004da4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d10:	e01f      	b.n	8004d52 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004d20:	4413      	add	r3, r2
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	3304      	adds	r3, #4
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d006      	beq.n	8004d3c <find_volume+0x158>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	3308      	adds	r3, #8
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe f8f8 	bl	8002f28 <ld_dword>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	e000      	b.n	8004d3e <find_volume+0x15a>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004d46:	440b      	add	r3, r1
 8004d48:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4e:	3301      	adds	r3, #1
 8004d50:	643b      	str	r3, [r7, #64]	; 0x40
 8004d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d9dc      	bls.n	8004d12 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004d58:	2300      	movs	r3, #0
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <find_volume+0x184>
 8004d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d64:	3b01      	subs	r3, #1
 8004d66:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004d70:	4413      	add	r3, r2
 8004d72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004d76:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <find_volume+0x1a6>
 8004d7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d82:	f7ff fed9 	bl	8004b38 <check_fs>
 8004d86:	4603      	mov	r3, r0
 8004d88:	e000      	b.n	8004d8c <find_volume+0x1a8>
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d905      	bls.n	8004da4 <find_volume+0x1c0>
 8004d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d9e1      	bls.n	8004d68 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d101      	bne.n	8004db0 <find_volume+0x1cc>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e195      	b.n	80050dc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d901      	bls.n	8004dbc <find_volume+0x1d8>
 8004db8:	230d      	movs	r3, #13
 8004dba:	e18f      	b.n	80050dc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	3338      	adds	r3, #56	; 0x38
 8004dc0:	330b      	adds	r3, #11
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe f898 	bl	8002ef8 <ld_word>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	899b      	ldrh	r3, [r3, #12]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <find_volume+0x1f4>
 8004dd4:	230d      	movs	r3, #13
 8004dd6:	e181      	b.n	80050dc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	3338      	adds	r3, #56	; 0x38
 8004ddc:	3316      	adds	r3, #22
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe f88a 	bl	8002ef8 <ld_word>
 8004de4:	4603      	mov	r3, r0
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <find_volume+0x218>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	3338      	adds	r3, #56	; 0x38
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fe f897 	bl	8002f28 <ld_dword>
 8004dfa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e00:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	789b      	ldrb	r3, [r3, #2]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d005      	beq.n	8004e20 <find_volume+0x23c>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	789b      	ldrb	r3, [r3, #2]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d001      	beq.n	8004e20 <find_volume+0x23c>
 8004e1c:	230d      	movs	r3, #13
 8004e1e:	e15d      	b.n	80050dc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	789b      	ldrb	r3, [r3, #2]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	895b      	ldrh	r3, [r3, #10]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <find_volume+0x270>
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	895b      	ldrh	r3, [r3, #10]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	895b      	ldrh	r3, [r3, #10]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <find_volume+0x274>
 8004e54:	230d      	movs	r3, #13
 8004e56:	e141      	b.n	80050dc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	3338      	adds	r3, #56	; 0x38
 8004e5c:	3311      	adds	r3, #17
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe f84a 	bl	8002ef8 <ld_word>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	891b      	ldrh	r3, [r3, #8]
 8004e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e72:	8992      	ldrh	r2, [r2, #12]
 8004e74:	0952      	lsrs	r2, r2, #5
 8004e76:	b292      	uxth	r2, r2
 8004e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e7c:	fb02 f201 	mul.w	r2, r2, r1
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <find_volume+0x2a8>
 8004e88:	230d      	movs	r3, #13
 8004e8a:	e127      	b.n	80050dc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	3338      	adds	r3, #56	; 0x38
 8004e90:	3313      	adds	r3, #19
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe f830 	bl	8002ef8 <ld_word>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <find_volume+0x2cc>
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	3338      	adds	r3, #56	; 0x38
 8004ea6:	3320      	adds	r3, #32
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe f83d 	bl	8002f28 <ld_dword>
 8004eae:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	3338      	adds	r3, #56	; 0x38
 8004eb4:	330e      	adds	r3, #14
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe f81e 	bl	8002ef8 <ld_word>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004ec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <find_volume+0x2ec>
 8004ec6:	230d      	movs	r3, #13
 8004ec8:	e108      	b.n	80050dc <find_volume+0x4f8>
 8004eca:	bf00      	nop
 8004ecc:	200000a8 	.word	0x200000a8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004ed0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	4413      	add	r3, r2
 8004ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed8:	8911      	ldrh	r1, [r2, #8]
 8004eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004edc:	8992      	ldrh	r2, [r2, #12]
 8004ede:	0952      	lsrs	r2, r2, #5
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	fbb1 f2f2 	udiv	r2, r1, r2
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	4413      	add	r3, r2
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d201      	bcs.n	8004ef8 <find_volume+0x314>
 8004ef4:	230d      	movs	r3, #13
 8004ef6:	e0f1      	b.n	80050dc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f00:	8952      	ldrh	r2, [r2, #10]
 8004f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <find_volume+0x32e>
 8004f0e:	230d      	movs	r3, #13
 8004f10:	e0e4      	b.n	80050dc <find_volume+0x4f8>
		fmt = FS_FAT32;
 8004f12:	2303      	movs	r3, #3
 8004f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <find_volume+0x344>
 8004f22:	2302      	movs	r3, #2
 8004f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d802      	bhi.n	8004f38 <find_volume+0x354>
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1c9a      	adds	r2, r3, #2
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004f46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4a:	441a      	add	r2, r3
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004f50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	441a      	add	r2, r3
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004f5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d11e      	bne.n	8004fa0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	3338      	adds	r3, #56	; 0x38
 8004f66:	332a      	adds	r3, #42	; 0x2a
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd ffc5 	bl	8002ef8 <ld_word>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <find_volume+0x394>
 8004f74:	230d      	movs	r3, #13
 8004f76:	e0b1      	b.n	80050dc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	891b      	ldrh	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <find_volume+0x3a0>
 8004f80:	230d      	movs	r3, #13
 8004f82:	e0ab      	b.n	80050dc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	3338      	adds	r3, #56	; 0x38
 8004f88:	332c      	adds	r3, #44	; 0x2c
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd ffcc 	bl	8002f28 <ld_dword>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f9e:	e01f      	b.n	8004fe0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	891b      	ldrh	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <find_volume+0x3c8>
 8004fa8:	230d      	movs	r3, #13
 8004faa:	e097      	b.n	80050dc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	441a      	add	r2, r3
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d103      	bne.n	8004fc8 <find_volume+0x3e4>
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	e00a      	b.n	8004fde <find_volume+0x3fa>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	085a      	lsrs	r2, r3, #1
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	899b      	ldrh	r3, [r3, #12]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fec:	440b      	add	r3, r1
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ff2:	8989      	ldrh	r1, [r1, #12]
 8004ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d201      	bcs.n	8005000 <find_volume+0x41c>
 8004ffc:	230d      	movs	r3, #13
 8004ffe:	e06d      	b.n	80050dc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005006:	619a      	str	r2, [r3, #24]
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800501a:	2b03      	cmp	r3, #3
 800501c:	d149      	bne.n	80050b2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	3338      	adds	r3, #56	; 0x38
 8005022:	3330      	adds	r3, #48	; 0x30
 8005024:	4618      	mov	r0, r3
 8005026:	f7fd ff67 	bl	8002ef8 <ld_word>
 800502a:	4603      	mov	r3, r0
 800502c:	2b01      	cmp	r3, #1
 800502e:	d140      	bne.n	80050b2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005032:	3301      	adds	r3, #1
 8005034:	4619      	mov	r1, r3
 8005036:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005038:	f7fe fa0e 	bl	8003458 <move_window>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d137      	bne.n	80050b2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	2200      	movs	r2, #0
 8005046:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	3338      	adds	r3, #56	; 0x38
 800504c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd ff51 	bl	8002ef8 <ld_word>
 8005056:	4603      	mov	r3, r0
 8005058:	461a      	mov	r2, r3
 800505a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800505e:	429a      	cmp	r2, r3
 8005060:	d127      	bne.n	80050b2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	3338      	adds	r3, #56	; 0x38
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd ff5e 	bl	8002f28 <ld_dword>
 800506c:	4602      	mov	r2, r0
 800506e:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <find_volume+0x500>)
 8005070:	429a      	cmp	r2, r3
 8005072:	d11e      	bne.n	80050b2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	3338      	adds	r3, #56	; 0x38
 8005078:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800507c:	4618      	mov	r0, r3
 800507e:	f7fd ff53 	bl	8002f28 <ld_dword>
 8005082:	4602      	mov	r2, r0
 8005084:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <find_volume+0x504>)
 8005086:	429a      	cmp	r2, r3
 8005088:	d113      	bne.n	80050b2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	3338      	adds	r3, #56	; 0x38
 800508e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005092:	4618      	mov	r0, r3
 8005094:	f7fd ff48 	bl	8002f28 <ld_dword>
 8005098:	4602      	mov	r2, r0
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	3338      	adds	r3, #56	; 0x38
 80050a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd ff3e 	bl	8002f28 <ld_dword>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80050b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <find_volume+0x508>)
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <find_volume+0x508>)
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <find_volume+0x508>)
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <find_volume+0x50c>)
 80050d2:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80050d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050d6:	f7fe f957 	bl	8003388 <clear_lock>
#endif
	return FR_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3758      	adds	r7, #88	; 0x58
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	41615252 	.word	0x41615252
 80050e8:	61417272 	.word	0x61417272
 80050ec:	200000ac 	.word	0x200000ac
 80050f0:	200000d0 	.word	0x200000d0

080050f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80050fe:	2309      	movs	r3, #9
 8005100:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01c      	beq.n	8005142 <validate+0x4e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d018      	beq.n	8005142 <validate+0x4e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d013      	beq.n	8005142 <validate+0x4e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	889a      	ldrh	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	88db      	ldrh	r3, [r3, #6]
 8005124:	429a      	cmp	r2, r3
 8005126:	d10c      	bne.n	8005142 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	785b      	ldrb	r3, [r3, #1]
 800512e:	4618      	mov	r0, r3
 8005130:	f7fd fe44 	bl	8002dbc <disk_status>
 8005134:	4603      	mov	r3, r0
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <validate+0x4e>
			res = FR_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <validate+0x5a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	e000      	b.n	8005150 <validate+0x5c>
 800514e:	2300      	movs	r3, #0
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	6013      	str	r3, [r2, #0]
	return res;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005172:	f107 0310 	add.w	r3, r7, #16
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fc9a 	bl	8004ab0 <get_ldnumber>
 800517c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	da01      	bge.n	8005188 <f_mount+0x28>
 8005184:	230b      	movs	r3, #11
 8005186:	e02b      	b.n	80051e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005188:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <f_mount+0x88>)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005190:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005198:	69b8      	ldr	r0, [r7, #24]
 800519a:	f7fe f8f5 	bl	8003388 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	490d      	ldr	r1, [pc, #52]	; (80051e8 <f_mount+0x88>)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <f_mount+0x66>
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <f_mount+0x6a>
 80051c6:	2300      	movs	r3, #0
 80051c8:	e00a      	b.n	80051e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80051ca:	f107 010c 	add.w	r1, r7, #12
 80051ce:	f107 0308 	add.w	r3, r7, #8
 80051d2:	2200      	movs	r2, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fd05 	bl	8004be4 <find_volume>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200000a8 	.word	0x200000a8

080051ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b09a      	sub	sp, #104	; 0x68
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <f_open+0x18>
 8005200:	2309      	movs	r3, #9
 8005202:	e1bb      	b.n	800557c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800520a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800520c:	79fa      	ldrb	r2, [r7, #7]
 800520e:	f107 0114 	add.w	r1, r7, #20
 8005212:	f107 0308 	add.w	r3, r7, #8
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fce4 	bl	8004be4 <find_volume>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005222:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005226:	2b00      	cmp	r3, #0
 8005228:	f040 819f 	bne.w	800556a <f_open+0x37e>
		dj.obj.fs = fs;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	f107 0318 	add.w	r3, r7, #24
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fbc3 	bl	80049c4 <follow_path>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005244:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005248:	2b00      	cmp	r3, #0
 800524a:	d11a      	bne.n	8005282 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800524c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005250:	b25b      	sxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	da03      	bge.n	800525e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005256:	2306      	movs	r3, #6
 8005258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800525c:	e011      	b.n	8005282 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	f107 0318 	add.w	r3, r7, #24
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd ff3e 	bl	80030f8 <chk_lock>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	f003 031c 	and.w	r3, r3, #28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d07f      	beq.n	800538c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800528c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005294:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005298:	2b04      	cmp	r3, #4
 800529a:	d10e      	bne.n	80052ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800529c:	f7fd ff88 	bl	80031b0 <enq_lock>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d006      	beq.n	80052b4 <f_open+0xc8>
 80052a6:	f107 0318 	add.w	r3, r7, #24
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff f8da 	bl	8004464 <dir_register>
 80052b0:	4603      	mov	r3, r0
 80052b2:	e000      	b.n	80052b6 <f_open+0xca>
 80052b4:	2312      	movs	r3, #18
 80052b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	71fb      	strb	r3, [r7, #7]
 80052c2:	e010      	b.n	80052e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80052c4:	7fbb      	ldrb	r3, [r7, #30]
 80052c6:	f003 0311 	and.w	r3, r3, #17
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <f_open+0xea>
					res = FR_DENIED;
 80052ce:	2307      	movs	r3, #7
 80052d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80052d4:	e007      	b.n	80052e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <f_open+0xfa>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80052e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d168      	bne.n	80053c0 <f_open+0x1d4>
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d063      	beq.n	80053c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80052f8:	f7fd fd00 	bl	8002cfc <get_fattime>
 80052fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	330e      	adds	r3, #14
 8005302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005304:	4618      	mov	r0, r3
 8005306:	f7fd fe4d 	bl	8002fa4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	3316      	adds	r3, #22
 800530e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005310:	4618      	mov	r0, r3
 8005312:	f7fd fe47 	bl	8002fa4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	330b      	adds	r3, #11
 800531a:	2220      	movs	r2, #32
 800531c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fe16 	bl	8003f56 <ld_clust>
 800532a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005330:	2200      	movs	r2, #0
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fe2e 	bl	8003f94 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	331c      	adds	r3, #28
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd fe30 	bl	8002fa4 <st_dword>
					fs->wflag = 1;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2201      	movs	r2, #1
 8005348:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800534a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534c:	2b00      	cmp	r3, #0
 800534e:	d037      	beq.n	80053c0 <f_open+0x1d4>
						dw = fs->winsect;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005356:	f107 0318 	add.w	r3, r7, #24
 800535a:	2200      	movs	r2, #0
 800535c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fb1e 	bl	80039a0 <remove_chain>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800536a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800536e:	2b00      	cmp	r3, #0
 8005370:	d126      	bne.n	80053c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe f86e 	bl	8003458 <move_window>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005386:	3a01      	subs	r2, #1
 8005388:	615a      	str	r2, [r3, #20]
 800538a:	e019      	b.n	80053c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800538c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005390:	2b00      	cmp	r3, #0
 8005392:	d115      	bne.n	80053c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005394:	7fbb      	ldrb	r3, [r7, #30]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800539e:	2304      	movs	r3, #4
 80053a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80053a4:	e00c      	b.n	80053c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <f_open+0x1d4>
 80053b0:	7fbb      	ldrb	r3, [r7, #30]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <f_open+0x1d4>
						res = FR_DENIED;
 80053ba:	2307      	movs	r3, #7
 80053bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80053c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d128      	bne.n	800541a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80053e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	f107 0318 	add.w	r3, r7, #24
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f7fd fef7 	bl	80031f4 <inc_lock>
 8005406:	4602      	mov	r2, r0
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <f_open+0x22e>
 8005414:	2302      	movs	r3, #2
 8005416:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800541a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 80a3 	bne.w	800556a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fd93 	bl	8003f56 <ld_clust>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	331c      	adds	r3, #28
 800543a:	4618      	mov	r0, r3
 800543c:	f7fd fd74 	bl	8002f28 <ld_dword>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	88da      	ldrh	r2, [r3, #6]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	79fa      	ldrb	r2, [r7, #7]
 800545e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3330      	adds	r3, #48	; 0x30
 8005476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd fdde 	bl	800303e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d06e      	beq.n	800556a <f_open+0x37e>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d06a      	beq.n	800556a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	895b      	ldrh	r3, [r3, #10]
 80054a0:	461a      	mov	r2, r3
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	899b      	ldrh	r3, [r3, #12]
 80054a6:	fb03 f302 	mul.w	r3, r3, r2
 80054aa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b8:	e016      	b.n	80054e8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe f887 	bl	80035d2 <get_fat>
 80054c4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80054c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d802      	bhi.n	80054d2 <f_open+0x2e6>
 80054cc:	2302      	movs	r3, #2
 80054ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80054d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d8:	d102      	bne.n	80054e0 <f_open+0x2f4>
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80054e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d103      	bne.n	80054f8 <f_open+0x30c>
 80054f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d8e0      	bhi.n	80054ba <f_open+0x2ce>
				}
				fp->clust = clst;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80054fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005502:	2b00      	cmp	r3, #0
 8005504:	d131      	bne.n	800556a <f_open+0x37e>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	899b      	ldrh	r3, [r3, #12]
 800550a:	461a      	mov	r2, r3
 800550c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005512:	fb02 f201 	mul.w	r2, r2, r1
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d026      	beq.n	800556a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe f837 	bl	8003594 <clust2sect>
 8005526:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <f_open+0x34a>
						res = FR_INT_ERR;
 800552e:	2302      	movs	r3, #2
 8005530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005534:	e019      	b.n	800556a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	899b      	ldrh	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	7858      	ldrb	r0, [r3, #1]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	2301      	movs	r3, #1
 800555a:	f7fd fc6f 	bl	8002e3c <disk_read>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <f_open+0x37e>
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800556a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <f_open+0x38c>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800557c:	4618      	mov	r0, r3
 800557e:	3768      	adds	r7, #104	; 0x68
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08e      	sub	sp, #56	; 0x38
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f107 0214 	add.w	r2, r7, #20
 80055a2:	4611      	mov	r1, r2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff fda5 	bl	80050f4 <validate>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80055b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <f_read+0x44>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	7d5b      	ldrb	r3, [r3, #21]
 80055bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <f_read+0x4a>
 80055c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055cc:	e135      	b.n	800583a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	7d1b      	ldrb	r3, [r3, #20]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <f_read+0x5a>
 80055da:	2307      	movs	r3, #7
 80055dc:	e12d      	b.n	800583a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	f240 811e 	bls.w	8005830 <f_read+0x2ac>
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80055f8:	e11a      	b.n	8005830 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	8992      	ldrh	r2, [r2, #12]
 8005602:	fbb3 f1f2 	udiv	r1, r3, r2
 8005606:	fb02 f201 	mul.w	r2, r2, r1
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	f040 80d5 	bne.w	80057bc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	8992      	ldrh	r2, [r2, #12]
 800561a:	fbb3 f3f2 	udiv	r3, r3, r2
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	8952      	ldrh	r2, [r2, #10]
 8005622:	3a01      	subs	r2, #1
 8005624:	4013      	ands	r3, r2
 8005626:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d12f      	bne.n	800568e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
 800563c:	e013      	b.n	8005666 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	4619      	mov	r1, r3
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7fe faa4 	bl	8003b9a <clmt_clust>
 8005652:	6338      	str	r0, [r7, #48]	; 0x30
 8005654:	e007      	b.n	8005666 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7fd ffb7 	bl	80035d2 <get_fat>
 8005664:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	2b01      	cmp	r3, #1
 800566a:	d804      	bhi.n	8005676 <f_read+0xf2>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2202      	movs	r2, #2
 8005670:	755a      	strb	r2, [r3, #21]
 8005672:	2302      	movs	r3, #2
 8005674:	e0e1      	b.n	800583a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800567c:	d104      	bne.n	8005688 <f_read+0x104>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	755a      	strb	r2, [r3, #21]
 8005684:	2301      	movs	r3, #1
 8005686:	e0d8      	b.n	800583a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fd ff7c 	bl	8003594 <clust2sect>
 800569c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <f_read+0x12a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2202      	movs	r2, #2
 80056a8:	755a      	strb	r2, [r3, #21]
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0c5      	b.n	800583a <f_read+0x2b6>
			sect += csect;
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	899b      	ldrh	r3, [r3, #12]
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d041      	beq.n	800574e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	4413      	add	r3, r2
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	8952      	ldrh	r2, [r2, #10]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d905      	bls.n	80056e4 <f_read+0x160>
					cc = fs->csize - csect;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	895b      	ldrh	r3, [r3, #10]
 80056dc:	461a      	mov	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	7858      	ldrb	r0, [r3, #1]
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ee:	f7fd fba5 	bl	8002e3c <disk_read>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <f_read+0x17e>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	755a      	strb	r2, [r3, #21]
 80056fe:	2301      	movs	r3, #1
 8005700:	e09b      	b.n	800583a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	7d1b      	ldrb	r3, [r3, #20]
 8005706:	b25b      	sxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	da18      	bge.n	800573e <f_read+0x1ba>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005716:	429a      	cmp	r2, r3
 8005718:	d911      	bls.n	800573e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	8992      	ldrh	r2, [r2, #12]
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	18d0      	adds	r0, r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	899b      	ldrh	r3, [r3, #12]
 8005738:	461a      	mov	r2, r3
 800573a:	f7fd fc5f 	bl	8002ffc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	899b      	ldrh	r3, [r3, #12]
 8005742:	461a      	mov	r2, r3
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800574c:	e05c      	b.n	8005808 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	429a      	cmp	r2, r3
 8005756:	d02e      	beq.n	80057b6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	7d1b      	ldrb	r3, [r3, #20]
 800575c:	b25b      	sxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	da18      	bge.n	8005794 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	7858      	ldrb	r0, [r3, #1]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1a      	ldr	r2, [r3, #32]
 8005770:	2301      	movs	r3, #1
 8005772:	f7fd fb83 	bl	8002e7c <disk_write>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <f_read+0x202>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	755a      	strb	r2, [r3, #21]
 8005782:	2301      	movs	r3, #1
 8005784:	e059      	b.n	800583a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	7d1b      	ldrb	r3, [r3, #20]
 800578a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	7858      	ldrb	r0, [r3, #1]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800579e:	2301      	movs	r3, #1
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	f7fd fb4b 	bl	8002e3c <disk_read>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <f_read+0x232>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	755a      	strb	r2, [r3, #21]
 80057b2:	2301      	movs	r3, #1
 80057b4:	e041      	b.n	800583a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	899b      	ldrh	r3, [r3, #12]
 80057c0:	4618      	mov	r0, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	8992      	ldrh	r2, [r2, #12]
 80057ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80057ce:	fb02 f201 	mul.w	r2, r2, r1
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	1ac3      	subs	r3, r0, r3
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80057d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d901      	bls.n	80057e4 <f_read+0x260>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	8992      	ldrh	r2, [r2, #12]
 80057f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80057f6:	fb02 f200 	mul.w	r2, r2, r0
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	440b      	add	r3, r1
 80057fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005800:	4619      	mov	r1, r3
 8005802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005804:	f7fd fbfa 	bl	8002ffc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	4413      	add	r3, r2
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	619a      	str	r2, [r3, #24]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	441a      	add	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f aee1 	bne.w	80055fa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3738      	adds	r7, #56	; 0x38
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b08c      	sub	sp, #48	; 0x30
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f107 0210 	add.w	r2, r7, #16
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fc46 	bl	80050f4 <validate>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800586e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <f_write+0x44>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	7d5b      	ldrb	r3, [r3, #21]
 800587a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800587e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <f_write+0x4a>
 8005886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800588a:	e16a      	b.n	8005b62 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	7d1b      	ldrb	r3, [r3, #20]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <f_write+0x5a>
 8005898:	2307      	movs	r3, #7
 800589a:	e162      	b.n	8005b62 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	441a      	add	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	f080 814c 	bcs.w	8005b46 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80058b6:	e146      	b.n	8005b46 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	8992      	ldrh	r2, [r2, #12]
 80058c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058c4:	fb02 f201 	mul.w	r2, r2, r1
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f040 80f1 	bne.w	8005ab2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	8992      	ldrh	r2, [r2, #12]
 80058d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	8952      	ldrh	r2, [r2, #10]
 80058e0:	3a01      	subs	r2, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d143      	bne.n	8005974 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10c      	bne.n	800590e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11a      	bne.n	8005936 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe f8b0 	bl	8003a6a <create_chain>
 800590a:	62b8      	str	r0, [r7, #40]	; 0x28
 800590c:	e013      	b.n	8005936 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	4619      	mov	r1, r3
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7fe f93c 	bl	8003b9a <clmt_clust>
 8005922:	62b8      	str	r0, [r7, #40]	; 0x28
 8005924:	e007      	b.n	8005936 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f7fe f89b 	bl	8003a6a <create_chain>
 8005934:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8109 	beq.w	8005b50 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	2b01      	cmp	r3, #1
 8005942:	d104      	bne.n	800594e <f_write+0x10c>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2202      	movs	r2, #2
 8005948:	755a      	strb	r2, [r3, #21]
 800594a:	2302      	movs	r3, #2
 800594c:	e109      	b.n	8005b62 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005954:	d104      	bne.n	8005960 <f_write+0x11e>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	755a      	strb	r2, [r3, #21]
 800595c:	2301      	movs	r3, #1
 800595e:	e100      	b.n	8005b62 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005964:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <f_write+0x132>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005972:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	7d1b      	ldrb	r3, [r3, #20]
 8005978:	b25b      	sxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	da18      	bge.n	80059b0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	7858      	ldrb	r0, [r3, #1]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a1a      	ldr	r2, [r3, #32]
 800598c:	2301      	movs	r3, #1
 800598e:	f7fd fa75 	bl	8002e7c <disk_write>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <f_write+0x160>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	755a      	strb	r2, [r3, #21]
 800599e:	2301      	movs	r3, #1
 80059a0:	e0df      	b.n	8005b62 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	7d1b      	ldrb	r3, [r3, #20]
 80059a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f7fd fdeb 	bl	8003594 <clust2sect>
 80059be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d104      	bne.n	80059d0 <f_write+0x18e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2202      	movs	r2, #2
 80059ca:	755a      	strb	r2, [r3, #21]
 80059cc:	2302      	movs	r3, #2
 80059ce:	e0c8      	b.n	8005b62 <f_write+0x320>
			sect += csect;
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4413      	add	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	899b      	ldrh	r3, [r3, #12]
 80059dc:	461a      	mov	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d043      	beq.n	8005a74 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	4413      	add	r3, r2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	8952      	ldrh	r2, [r2, #10]
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d905      	bls.n	8005a06 <f_write+0x1c4>
					cc = fs->csize - csect;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	895b      	ldrh	r3, [r3, #10]
 80059fe:	461a      	mov	r2, r3
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	7858      	ldrb	r0, [r3, #1]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	69f9      	ldr	r1, [r7, #28]
 8005a10:	f7fd fa34 	bl	8002e7c <disk_write>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <f_write+0x1e2>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	755a      	strb	r2, [r3, #21]
 8005a20:	2301      	movs	r3, #1
 8005a22:	e09e      	b.n	8005b62 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	6a3a      	ldr	r2, [r7, #32]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d918      	bls.n	8005a64 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	8992      	ldrh	r2, [r2, #12]
 8005a44:	fb02 f303 	mul.w	r3, r2, r3
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	18d1      	adds	r1, r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	899b      	ldrh	r3, [r3, #12]
 8005a50:	461a      	mov	r2, r3
 8005a52:	f7fd fad3 	bl	8002ffc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	7d1b      	ldrb	r3, [r3, #20]
 8005a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	899b      	ldrh	r3, [r3, #12]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	fb02 f303 	mul.w	r3, r2, r3
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005a72:	e04b      	b.n	8005b0c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d016      	beq.n	8005aac <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d210      	bcs.n	8005aac <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	7858      	ldrb	r0, [r3, #1]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a94:	2301      	movs	r3, #1
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	f7fd f9d0 	bl	8002e3c <disk_read>
 8005a9c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d004      	beq.n	8005aac <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	755a      	strb	r2, [r3, #21]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e05a      	b.n	8005b62 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	899b      	ldrh	r3, [r3, #12]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	8992      	ldrh	r2, [r2, #12]
 8005ac0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ac4:	fb02 f201 	mul.w	r2, r2, r1
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	1ac3      	subs	r3, r0, r3
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d901      	bls.n	8005ada <f_write+0x298>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	8992      	ldrh	r2, [r2, #12]
 8005ae8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005aec:	fb02 f200 	mul.w	r2, r2, r0
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	440b      	add	r3, r1
 8005af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af6:	69f9      	ldr	r1, [r7, #28]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fd fa7f 	bl	8002ffc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	7d1b      	ldrb	r3, [r3, #20]
 8005b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	4413      	add	r3, r2
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	441a      	add	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	619a      	str	r2, [r3, #24]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	bf38      	it	cc
 8005b2c:	461a      	movcc	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	441a      	add	r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f aeb5 	bne.w	80058b8 <f_write+0x76>
 8005b4e:	e000      	b.n	8005b52 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005b50:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	7d1b      	ldrb	r3, [r3, #20]
 8005b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3730      	adds	r7, #48	; 0x30
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f107 0208 	add.w	r2, r7, #8
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff faba 	bl	80050f4 <validate>
 8005b80:	4603      	mov	r3, r0
 8005b82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d168      	bne.n	8005c5c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	7d1b      	ldrb	r3, [r3, #20]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d062      	beq.n	8005c5c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	7d1b      	ldrb	r3, [r3, #20]
 8005b9a:	b25b      	sxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	da15      	bge.n	8005bcc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	7858      	ldrb	r0, [r3, #1]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f7fd f964 	bl	8002e7c <disk_write>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <f_sync+0x54>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e04f      	b.n	8005c5e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	7d1b      	ldrb	r3, [r3, #20]
 8005bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005bcc:	f7fd f896 	bl	8002cfc <get_fattime>
 8005bd0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fd fc3c 	bl	8003458 <move_window>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d138      	bne.n	8005c5c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	330b      	adds	r3, #11
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	330b      	adds	r3, #11
 8005bfa:	f042 0220 	orr.w	r2, r2, #32
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68f9      	ldr	r1, [r7, #12]
 8005c0e:	f7fe f9c1 	bl	8003f94 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f103 021c 	add.w	r2, r3, #28
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f7fd f9c0 	bl	8002fa4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3316      	adds	r3, #22
 8005c28:	6939      	ldr	r1, [r7, #16]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd f9ba 	bl	8002fa4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3312      	adds	r3, #18
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd f999 	bl	8002f6e <st_word>
					fs->wflag = 1;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fd fc35 	bl	80034b4 <sync_fs>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	7d1b      	ldrb	r3, [r3, #20]
 8005c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff ff7b 	bl	8005b6a <f_sync>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d118      	bne.n	8005cb0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f107 0208 	add.w	r2, r7, #8
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff fa34 	bl	80050f4 <validate>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10c      	bne.n	8005cb0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd fb38 	bl	8003310 <dec_lock>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b092      	sub	sp, #72	; 0x48
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005cc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005cca:	f107 030c 	add.w	r3, r7, #12
 8005cce:	2200      	movs	r2, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe ff87 	bl	8004be4 <find_volume>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 8099 	bne.w	8005e18 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	3b02      	subs	r3, #2
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d804      	bhi.n	8005d04 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e089      	b.n	8005e18 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d128      	bne.n	8005d62 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005d10:	2302      	movs	r3, #2
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd fc57 	bl	80035d2 <get_fat>
 8005d24:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d2c:	d103      	bne.n	8005d36 <f_getfree+0x7c>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d34:	e063      	b.n	8005dfe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d103      	bne.n	8005d44 <f_getfree+0x8a>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d42:	e05c      	b.n	8005dfe <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <f_getfree+0x96>
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	3301      	adds	r3, #1
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d3db      	bcc.n	8005d18 <f_getfree+0x5e>
 8005d60:	e04d      	b.n	8005dfe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	637b      	str	r3, [r7, #52]	; 0x34
 8005d72:	2300      	movs	r3, #0
 8005d74:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d113      	bne.n	8005da4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d84:	4619      	mov	r1, r3
 8005d86:	f7fd fb67 	bl	8003458 <move_window>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005d90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d131      	bne.n	8005dfc <f_getfree+0x142>
							p = fs->win;
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	3338      	adds	r3, #56	; 0x38
 8005d9c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	899b      	ldrh	r3, [r3, #12]
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d10f      	bne.n	8005dcc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dae:	f7fd f8a3 	bl	8002ef8 <ld_word>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <f_getfree+0x104>
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	3301      	adds	r3, #1
 8005dbc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	3b02      	subs	r3, #2
 8005dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dca:	e010      	b.n	8005dee <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dce:	f7fd f8ab 	bl	8002f28 <ld_dword>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <f_getfree+0x128>
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dde:	3301      	adds	r3, #1
 8005de0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	3304      	adds	r3, #4
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	3b04      	subs	r3, #4
 8005dec:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	3b01      	subs	r3, #1
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1bd      	bne.n	8005d76 <f_getfree+0xbc>
 8005dfa:	e000      	b.n	8005dfe <f_getfree+0x144>
							if (res != FR_OK) break;
 8005dfc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e02:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e08:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	791a      	ldrb	r2, [r3, #4]
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005e18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3748      	adds	r7, #72	; 0x48
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005e38:	e01b      	b.n	8005e72 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005e3a:	f107 0310 	add.w	r3, r7, #16
 8005e3e:	f107 0114 	add.w	r1, r7, #20
 8005e42:	2201      	movs	r2, #1
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff fb9d 	bl	8005584 <f_read>
		if (rc != 1) break;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d116      	bne.n	8005e7e <f_gets+0x5a>
		c = s[0];
 8005e50:	7d3b      	ldrb	r3, [r7, #20]
 8005e52:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b0d      	cmp	r3, #13
 8005e58:	d100      	bne.n	8005e5c <f_gets+0x38>
 8005e5a:	e00a      	b.n	8005e72 <f_gets+0x4e>
		*p++ = c;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	61ba      	str	r2, [r7, #24]
 8005e62:	7dfa      	ldrb	r2, [r7, #23]
 8005e64:	701a      	strb	r2, [r3, #0]
		n++;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b0a      	cmp	r3, #10
 8005e70:	d007      	beq.n	8005e82 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	dbde      	blt.n	8005e3a <f_gets+0x16>
 8005e7c:	e002      	b.n	8005e84 <f_gets+0x60>
		if (rc != 1) break;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005e82:	bf00      	nop
	}
	*p = 0;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <f_gets+0x70>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	e000      	b.n	8005e96 <f_gets+0x72>
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	2b0a      	cmp	r3, #10
 8005eae:	d103      	bne.n	8005eb8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005eb0:	210d      	movs	r1, #13
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fff3 	bl	8005e9e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	db25      	blt.n	8005f10 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	60fa      	str	r2, [r7, #12]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b3c      	cmp	r3, #60	; 0x3c
 8005ed6:	dd12      	ble.n	8005efe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f103 010c 	add.w	r1, r3, #12
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	f7ff fcab 	bl	8005842 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d101      	bne.n	8005ef8 <putc_bfd+0x5a>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e001      	b.n	8005efc <putc_bfd+0x5e>
 8005ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005efc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	609a      	str	r2, [r3, #8]
 8005f0e:	e000      	b.n	8005f12 <putc_bfd+0x74>
	if (i < 0) return;
 8005f10:	bf00      	nop
}
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	db17      	blt.n	8005f58 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f103 010c 	add.w	r1, r3, #12
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f107 030c 	add.w	r3, r7, #12
 8005f3c:	f7ff fc81 	bl	8005842 <f_write>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d108      	bne.n	8005f58 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d102      	bne.n	8005f58 <putc_flush+0x40>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	e001      	b.n	8005f5c <putc_flush+0x44>
	return EOF;
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	605a      	str	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	609a      	str	r2, [r3, #8]
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b096      	sub	sp, #88	; 0x58
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005f98:	f107 030c 	add.w	r3, r7, #12
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff ffe0 	bl	8005f64 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005fa4:	e009      	b.n	8005fba <f_puts+0x2c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	f107 030c 	add.w	r3, r7, #12
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff ff72 	bl	8005e9e <putc_bfd>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f1      	bne.n	8005fa6 <f_puts+0x18>
	return putc_flush(&pb);
 8005fc2:	f107 030c 	add.w	r3, r7, #12
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff ffa6 	bl	8005f18 <putc_flush>
 8005fcc:	4603      	mov	r3, r0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3758      	adds	r7, #88	; 0x58
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005fee:	4b1f      	ldr	r3, [pc, #124]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8005ff0:	7a5b      	ldrb	r3, [r3, #9]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d131      	bne.n	800605c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8005ffa:	7a5b      	ldrb	r3, [r3, #9]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	4b1a      	ldr	r3, [pc, #104]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8006002:	2100      	movs	r1, #0
 8006004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006006:	4b19      	ldr	r3, [pc, #100]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8006008:	7a5b      	ldrb	r3, [r3, #9]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4a17      	ldr	r2, [pc, #92]	; (800606c <FATFS_LinkDriverEx+0x94>)
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006016:	4b15      	ldr	r3, [pc, #84]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8006018:	7a5b      	ldrb	r3, [r3, #9]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8006020:	4413      	add	r3, r2
 8006022:	79fa      	ldrb	r2, [r7, #7]
 8006024:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006026:	4b11      	ldr	r3, [pc, #68]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8006028:	7a5b      	ldrb	r3, [r3, #9]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	b2d1      	uxtb	r1, r2
 8006030:	4a0e      	ldr	r2, [pc, #56]	; (800606c <FATFS_LinkDriverEx+0x94>)
 8006032:	7251      	strb	r1, [r2, #9]
 8006034:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006036:	7dbb      	ldrb	r3, [r7, #22]
 8006038:	3330      	adds	r3, #48	; 0x30
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	3301      	adds	r3, #1
 8006044:	223a      	movs	r2, #58	; 0x3a
 8006046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	3302      	adds	r3, #2
 800604c:	222f      	movs	r2, #47	; 0x2f
 800604e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	3303      	adds	r3, #3
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800605c:	7dfb      	ldrb	r3, [r7, #23]
}
 800605e:	4618      	mov	r0, r3
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	200002d0 	.word	0x200002d0

08006070 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800607a:	2200      	movs	r2, #0
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff ffaa 	bl	8005fd8 <FATFS_LinkDriverEx>
 8006084:	4603      	mov	r3, r0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	6039      	str	r1, [r7, #0]
 800609a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d802      	bhi.n	80060a8 <ff_convert+0x18>
		c = chr;
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	81fb      	strh	r3, [r7, #14]
 80060a6:	e025      	b.n	80060f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2bff      	cmp	r3, #255	; 0xff
 80060b2:	d805      	bhi.n	80060c0 <ff_convert+0x30>
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	3b80      	subs	r3, #128	; 0x80
 80060b8:	4a12      	ldr	r2, [pc, #72]	; (8006104 <ff_convert+0x74>)
 80060ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060be:	e000      	b.n	80060c2 <ff_convert+0x32>
 80060c0:	2300      	movs	r3, #0
 80060c2:	81fb      	strh	r3, [r7, #14]
 80060c4:	e016      	b.n	80060f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80060c6:	2300      	movs	r3, #0
 80060c8:	81fb      	strh	r3, [r7, #14]
 80060ca:	e009      	b.n	80060e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80060cc:	89fb      	ldrh	r3, [r7, #14]
 80060ce:	4a0d      	ldr	r2, [pc, #52]	; (8006104 <ff_convert+0x74>)
 80060d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d006      	beq.n	80060e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80060da:	89fb      	ldrh	r3, [r7, #14]
 80060dc:	3301      	adds	r3, #1
 80060de:	81fb      	strh	r3, [r7, #14]
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	2b7f      	cmp	r3, #127	; 0x7f
 80060e4:	d9f2      	bls.n	80060cc <ff_convert+0x3c>
 80060e6:	e000      	b.n	80060ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80060e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80060ea:	89fb      	ldrh	r3, [r7, #14]
 80060ec:	3380      	adds	r3, #128	; 0x80
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80060f4:	89fb      	ldrh	r3, [r7, #14]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	08006cb0 	.word	0x08006cb0

08006108 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d201      	bcs.n	800611e <ff_wtoupper+0x16>
 800611a:	4b3e      	ldr	r3, [pc, #248]	; (8006214 <ff_wtoupper+0x10c>)
 800611c:	e000      	b.n	8006120 <ff_wtoupper+0x18>
 800611e:	4b3e      	ldr	r3, [pc, #248]	; (8006218 <ff_wtoupper+0x110>)
 8006120:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	617a      	str	r2, [r7, #20]
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800612c:	8a7b      	ldrh	r3, [r7, #18]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d068      	beq.n	8006204 <ff_wtoupper+0xfc>
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	8a7b      	ldrh	r3, [r7, #18]
 8006136:	429a      	cmp	r2, r3
 8006138:	d364      	bcc.n	8006204 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	1c9a      	adds	r2, r3, #2
 800613e:	617a      	str	r2, [r7, #20]
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	823b      	strh	r3, [r7, #16]
 8006144:	8a3b      	ldrh	r3, [r7, #16]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	81fb      	strh	r3, [r7, #14]
 800614a:	8a3b      	ldrh	r3, [r7, #16]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	8a79      	ldrh	r1, [r7, #18]
 8006154:	8a3b      	ldrh	r3, [r7, #16]
 8006156:	440b      	add	r3, r1
 8006158:	429a      	cmp	r2, r3
 800615a:	da49      	bge.n	80061f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800615c:	89fb      	ldrh	r3, [r7, #14]
 800615e:	2b08      	cmp	r3, #8
 8006160:	d84f      	bhi.n	8006202 <ff_wtoupper+0xfa>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <ff_wtoupper+0x60>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	0800618d 	.word	0x0800618d
 800616c:	0800619f 	.word	0x0800619f
 8006170:	080061b5 	.word	0x080061b5
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061cd 	.word	0x080061cd
 8006180:	080061d5 	.word	0x080061d5
 8006184:	080061dd 	.word	0x080061dd
 8006188:	080061e5 	.word	0x080061e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	8a7b      	ldrh	r3, [r7, #18]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	80fb      	strh	r3, [r7, #6]
 800619c:	e027      	b.n	80061ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	8a7b      	ldrh	r3, [r7, #18]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	80fb      	strh	r3, [r7, #6]
 80061b2:	e01c      	b.n	80061ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	3b10      	subs	r3, #16
 80061b8:	80fb      	strh	r3, [r7, #6]
 80061ba:	e018      	b.n	80061ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	3b20      	subs	r3, #32
 80061c0:	80fb      	strh	r3, [r7, #6]
 80061c2:	e014      	b.n	80061ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	3b30      	subs	r3, #48	; 0x30
 80061c8:	80fb      	strh	r3, [r7, #6]
 80061ca:	e010      	b.n	80061ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	3b1a      	subs	r3, #26
 80061d0:	80fb      	strh	r3, [r7, #6]
 80061d2:	e00c      	b.n	80061ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	3308      	adds	r3, #8
 80061d8:	80fb      	strh	r3, [r7, #6]
 80061da:	e008      	b.n	80061ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	3b50      	subs	r3, #80	; 0x50
 80061e0:	80fb      	strh	r3, [r7, #6]
 80061e2:	e004      	b.n	80061ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80061ea:	80fb      	strh	r3, [r7, #6]
 80061ec:	bf00      	nop
			}
			break;
 80061ee:	e008      	b.n	8006202 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80061f0:	89fb      	ldrh	r3, [r7, #14]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d195      	bne.n	8006122 <ff_wtoupper+0x1a>
 80061f6:	8a3b      	ldrh	r3, [r7, #16]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006200:	e78f      	b.n	8006122 <ff_wtoupper+0x1a>
			break;
 8006202:	bf00      	nop
	}

	return chr;
 8006204:	88fb      	ldrh	r3, [r7, #6]
}
 8006206:	4618      	mov	r0, r3
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	08006db0 	.word	0x08006db0
 8006218:	08006fa4 	.word	0x08006fa4

0800621c <__errno>:
 800621c:	4b01      	ldr	r3, [pc, #4]	; (8006224 <__errno+0x8>)
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000020 	.word	0x20000020

08006228 <__libc_init_array>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4e0d      	ldr	r6, [pc, #52]	; (8006260 <__libc_init_array+0x38>)
 800622c:	4c0d      	ldr	r4, [pc, #52]	; (8006264 <__libc_init_array+0x3c>)
 800622e:	1ba4      	subs	r4, r4, r6
 8006230:	10a4      	asrs	r4, r4, #2
 8006232:	2500      	movs	r5, #0
 8006234:	42a5      	cmp	r5, r4
 8006236:	d109      	bne.n	800624c <__libc_init_array+0x24>
 8006238:	4e0b      	ldr	r6, [pc, #44]	; (8006268 <__libc_init_array+0x40>)
 800623a:	4c0c      	ldr	r4, [pc, #48]	; (800626c <__libc_init_array+0x44>)
 800623c:	f000 fc46 	bl	8006acc <_init>
 8006240:	1ba4      	subs	r4, r4, r6
 8006242:	10a4      	asrs	r4, r4, #2
 8006244:	2500      	movs	r5, #0
 8006246:	42a5      	cmp	r5, r4
 8006248:	d105      	bne.n	8006256 <__libc_init_array+0x2e>
 800624a:	bd70      	pop	{r4, r5, r6, pc}
 800624c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006250:	4798      	blx	r3
 8006252:	3501      	adds	r5, #1
 8006254:	e7ee      	b.n	8006234 <__libc_init_array+0xc>
 8006256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800625a:	4798      	blx	r3
 800625c:	3501      	adds	r5, #1
 800625e:	e7f2      	b.n	8006246 <__libc_init_array+0x1e>
 8006260:	0800709c 	.word	0x0800709c
 8006264:	0800709c 	.word	0x0800709c
 8006268:	0800709c 	.word	0x0800709c
 800626c:	080070a0 	.word	0x080070a0

08006270 <memset>:
 8006270:	4402      	add	r2, r0
 8006272:	4603      	mov	r3, r0
 8006274:	4293      	cmp	r3, r2
 8006276:	d100      	bne.n	800627a <memset+0xa>
 8006278:	4770      	bx	lr
 800627a:	f803 1b01 	strb.w	r1, [r3], #1
 800627e:	e7f9      	b.n	8006274 <memset+0x4>

08006280 <siprintf>:
 8006280:	b40e      	push	{r1, r2, r3}
 8006282:	b500      	push	{lr}
 8006284:	b09c      	sub	sp, #112	; 0x70
 8006286:	ab1d      	add	r3, sp, #116	; 0x74
 8006288:	9002      	str	r0, [sp, #8]
 800628a:	9006      	str	r0, [sp, #24]
 800628c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006290:	4809      	ldr	r0, [pc, #36]	; (80062b8 <siprintf+0x38>)
 8006292:	9107      	str	r1, [sp, #28]
 8006294:	9104      	str	r1, [sp, #16]
 8006296:	4909      	ldr	r1, [pc, #36]	; (80062bc <siprintf+0x3c>)
 8006298:	f853 2b04 	ldr.w	r2, [r3], #4
 800629c:	9105      	str	r1, [sp, #20]
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	a902      	add	r1, sp, #8
 80062a4:	f000 f886 	bl	80063b4 <_svfiprintf_r>
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	b01c      	add	sp, #112	; 0x70
 80062b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b4:	b003      	add	sp, #12
 80062b6:	4770      	bx	lr
 80062b8:	20000020 	.word	0x20000020
 80062bc:	ffff0208 	.word	0xffff0208

080062c0 <_vsiprintf_r>:
 80062c0:	b500      	push	{lr}
 80062c2:	b09b      	sub	sp, #108	; 0x6c
 80062c4:	9100      	str	r1, [sp, #0]
 80062c6:	9104      	str	r1, [sp, #16]
 80062c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062cc:	9105      	str	r1, [sp, #20]
 80062ce:	9102      	str	r1, [sp, #8]
 80062d0:	4905      	ldr	r1, [pc, #20]	; (80062e8 <_vsiprintf_r+0x28>)
 80062d2:	9103      	str	r1, [sp, #12]
 80062d4:	4669      	mov	r1, sp
 80062d6:	f000 f86d 	bl	80063b4 <_svfiprintf_r>
 80062da:	9b00      	ldr	r3, [sp, #0]
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	b01b      	add	sp, #108	; 0x6c
 80062e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80062e6:	bf00      	nop
 80062e8:	ffff0208 	.word	0xffff0208

080062ec <vsiprintf>:
 80062ec:	4613      	mov	r3, r2
 80062ee:	460a      	mov	r2, r1
 80062f0:	4601      	mov	r1, r0
 80062f2:	4802      	ldr	r0, [pc, #8]	; (80062fc <vsiprintf+0x10>)
 80062f4:	6800      	ldr	r0, [r0, #0]
 80062f6:	f7ff bfe3 	b.w	80062c0 <_vsiprintf_r>
 80062fa:	bf00      	nop
 80062fc:	20000020 	.word	0x20000020

08006300 <__ssputs_r>:
 8006300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006304:	688e      	ldr	r6, [r1, #8]
 8006306:	429e      	cmp	r6, r3
 8006308:	4682      	mov	sl, r0
 800630a:	460c      	mov	r4, r1
 800630c:	4690      	mov	r8, r2
 800630e:	4699      	mov	r9, r3
 8006310:	d837      	bhi.n	8006382 <__ssputs_r+0x82>
 8006312:	898a      	ldrh	r2, [r1, #12]
 8006314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006318:	d031      	beq.n	800637e <__ssputs_r+0x7e>
 800631a:	6825      	ldr	r5, [r4, #0]
 800631c:	6909      	ldr	r1, [r1, #16]
 800631e:	1a6f      	subs	r7, r5, r1
 8006320:	6965      	ldr	r5, [r4, #20]
 8006322:	2302      	movs	r3, #2
 8006324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006328:	fb95 f5f3 	sdiv	r5, r5, r3
 800632c:	f109 0301 	add.w	r3, r9, #1
 8006330:	443b      	add	r3, r7
 8006332:	429d      	cmp	r5, r3
 8006334:	bf38      	it	cc
 8006336:	461d      	movcc	r5, r3
 8006338:	0553      	lsls	r3, r2, #21
 800633a:	d530      	bpl.n	800639e <__ssputs_r+0x9e>
 800633c:	4629      	mov	r1, r5
 800633e:	f000 fb2b 	bl	8006998 <_malloc_r>
 8006342:	4606      	mov	r6, r0
 8006344:	b950      	cbnz	r0, 800635c <__ssputs_r+0x5c>
 8006346:	230c      	movs	r3, #12
 8006348:	f8ca 3000 	str.w	r3, [sl]
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	463a      	mov	r2, r7
 800635e:	6921      	ldr	r1, [r4, #16]
 8006360:	f000 faa8 	bl	80068b4 <memcpy>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800636a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	6126      	str	r6, [r4, #16]
 8006372:	6165      	str	r5, [r4, #20]
 8006374:	443e      	add	r6, r7
 8006376:	1bed      	subs	r5, r5, r7
 8006378:	6026      	str	r6, [r4, #0]
 800637a:	60a5      	str	r5, [r4, #8]
 800637c:	464e      	mov	r6, r9
 800637e:	454e      	cmp	r6, r9
 8006380:	d900      	bls.n	8006384 <__ssputs_r+0x84>
 8006382:	464e      	mov	r6, r9
 8006384:	4632      	mov	r2, r6
 8006386:	4641      	mov	r1, r8
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	f000 fa9e 	bl	80068ca <memmove>
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	1b9b      	subs	r3, r3, r6
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	441e      	add	r6, r3
 8006398:	6026      	str	r6, [r4, #0]
 800639a:	2000      	movs	r0, #0
 800639c:	e7dc      	b.n	8006358 <__ssputs_r+0x58>
 800639e:	462a      	mov	r2, r5
 80063a0:	f000 fb54 	bl	8006a4c <_realloc_r>
 80063a4:	4606      	mov	r6, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d1e2      	bne.n	8006370 <__ssputs_r+0x70>
 80063aa:	6921      	ldr	r1, [r4, #16]
 80063ac:	4650      	mov	r0, sl
 80063ae:	f000 faa5 	bl	80068fc <_free_r>
 80063b2:	e7c8      	b.n	8006346 <__ssputs_r+0x46>

080063b4 <_svfiprintf_r>:
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	461d      	mov	r5, r3
 80063ba:	898b      	ldrh	r3, [r1, #12]
 80063bc:	061f      	lsls	r7, r3, #24
 80063be:	b09d      	sub	sp, #116	; 0x74
 80063c0:	4680      	mov	r8, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4616      	mov	r6, r2
 80063c6:	d50f      	bpl.n	80063e8 <_svfiprintf_r+0x34>
 80063c8:	690b      	ldr	r3, [r1, #16]
 80063ca:	b96b      	cbnz	r3, 80063e8 <_svfiprintf_r+0x34>
 80063cc:	2140      	movs	r1, #64	; 0x40
 80063ce:	f000 fae3 	bl	8006998 <_malloc_r>
 80063d2:	6020      	str	r0, [r4, #0]
 80063d4:	6120      	str	r0, [r4, #16]
 80063d6:	b928      	cbnz	r0, 80063e4 <_svfiprintf_r+0x30>
 80063d8:	230c      	movs	r3, #12
 80063da:	f8c8 3000 	str.w	r3, [r8]
 80063de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063e2:	e0c8      	b.n	8006576 <_svfiprintf_r+0x1c2>
 80063e4:	2340      	movs	r3, #64	; 0x40
 80063e6:	6163      	str	r3, [r4, #20]
 80063e8:	2300      	movs	r3, #0
 80063ea:	9309      	str	r3, [sp, #36]	; 0x24
 80063ec:	2320      	movs	r3, #32
 80063ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063f2:	2330      	movs	r3, #48	; 0x30
 80063f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063f8:	9503      	str	r5, [sp, #12]
 80063fa:	f04f 0b01 	mov.w	fp, #1
 80063fe:	4637      	mov	r7, r6
 8006400:	463d      	mov	r5, r7
 8006402:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006406:	b10b      	cbz	r3, 800640c <_svfiprintf_r+0x58>
 8006408:	2b25      	cmp	r3, #37	; 0x25
 800640a:	d13e      	bne.n	800648a <_svfiprintf_r+0xd6>
 800640c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006410:	d00b      	beq.n	800642a <_svfiprintf_r+0x76>
 8006412:	4653      	mov	r3, sl
 8006414:	4632      	mov	r2, r6
 8006416:	4621      	mov	r1, r4
 8006418:	4640      	mov	r0, r8
 800641a:	f7ff ff71 	bl	8006300 <__ssputs_r>
 800641e:	3001      	adds	r0, #1
 8006420:	f000 80a4 	beq.w	800656c <_svfiprintf_r+0x1b8>
 8006424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006426:	4453      	add	r3, sl
 8006428:	9309      	str	r3, [sp, #36]	; 0x24
 800642a:	783b      	ldrb	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 809d 	beq.w	800656c <_svfiprintf_r+0x1b8>
 8006432:	2300      	movs	r3, #0
 8006434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006444:	931a      	str	r3, [sp, #104]	; 0x68
 8006446:	462f      	mov	r7, r5
 8006448:	2205      	movs	r2, #5
 800644a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800644e:	4850      	ldr	r0, [pc, #320]	; (8006590 <_svfiprintf_r+0x1dc>)
 8006450:	f7f9 fece 	bl	80001f0 <memchr>
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	b9d0      	cbnz	r0, 800648e <_svfiprintf_r+0xda>
 8006458:	06d9      	lsls	r1, r3, #27
 800645a:	bf44      	itt	mi
 800645c:	2220      	movmi	r2, #32
 800645e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006462:	071a      	lsls	r2, r3, #28
 8006464:	bf44      	itt	mi
 8006466:	222b      	movmi	r2, #43	; 0x2b
 8006468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800646c:	782a      	ldrb	r2, [r5, #0]
 800646e:	2a2a      	cmp	r2, #42	; 0x2a
 8006470:	d015      	beq.n	800649e <_svfiprintf_r+0xea>
 8006472:	9a07      	ldr	r2, [sp, #28]
 8006474:	462f      	mov	r7, r5
 8006476:	2000      	movs	r0, #0
 8006478:	250a      	movs	r5, #10
 800647a:	4639      	mov	r1, r7
 800647c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006480:	3b30      	subs	r3, #48	; 0x30
 8006482:	2b09      	cmp	r3, #9
 8006484:	d94d      	bls.n	8006522 <_svfiprintf_r+0x16e>
 8006486:	b1b8      	cbz	r0, 80064b8 <_svfiprintf_r+0x104>
 8006488:	e00f      	b.n	80064aa <_svfiprintf_r+0xf6>
 800648a:	462f      	mov	r7, r5
 800648c:	e7b8      	b.n	8006400 <_svfiprintf_r+0x4c>
 800648e:	4a40      	ldr	r2, [pc, #256]	; (8006590 <_svfiprintf_r+0x1dc>)
 8006490:	1a80      	subs	r0, r0, r2
 8006492:	fa0b f000 	lsl.w	r0, fp, r0
 8006496:	4318      	orrs	r0, r3
 8006498:	9004      	str	r0, [sp, #16]
 800649a:	463d      	mov	r5, r7
 800649c:	e7d3      	b.n	8006446 <_svfiprintf_r+0x92>
 800649e:	9a03      	ldr	r2, [sp, #12]
 80064a0:	1d11      	adds	r1, r2, #4
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	9103      	str	r1, [sp, #12]
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	db01      	blt.n	80064ae <_svfiprintf_r+0xfa>
 80064aa:	9207      	str	r2, [sp, #28]
 80064ac:	e004      	b.n	80064b8 <_svfiprintf_r+0x104>
 80064ae:	4252      	negs	r2, r2
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	9207      	str	r2, [sp, #28]
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	783b      	ldrb	r3, [r7, #0]
 80064ba:	2b2e      	cmp	r3, #46	; 0x2e
 80064bc:	d10c      	bne.n	80064d8 <_svfiprintf_r+0x124>
 80064be:	787b      	ldrb	r3, [r7, #1]
 80064c0:	2b2a      	cmp	r3, #42	; 0x2a
 80064c2:	d133      	bne.n	800652c <_svfiprintf_r+0x178>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	1d1a      	adds	r2, r3, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	9203      	str	r2, [sp, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bfb8      	it	lt
 80064d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064d4:	3702      	adds	r7, #2
 80064d6:	9305      	str	r3, [sp, #20]
 80064d8:	4d2e      	ldr	r5, [pc, #184]	; (8006594 <_svfiprintf_r+0x1e0>)
 80064da:	7839      	ldrb	r1, [r7, #0]
 80064dc:	2203      	movs	r2, #3
 80064de:	4628      	mov	r0, r5
 80064e0:	f7f9 fe86 	bl	80001f0 <memchr>
 80064e4:	b138      	cbz	r0, 80064f6 <_svfiprintf_r+0x142>
 80064e6:	2340      	movs	r3, #64	; 0x40
 80064e8:	1b40      	subs	r0, r0, r5
 80064ea:	fa03 f000 	lsl.w	r0, r3, r0
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	4303      	orrs	r3, r0
 80064f2:	3701      	adds	r7, #1
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	7839      	ldrb	r1, [r7, #0]
 80064f8:	4827      	ldr	r0, [pc, #156]	; (8006598 <_svfiprintf_r+0x1e4>)
 80064fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064fe:	2206      	movs	r2, #6
 8006500:	1c7e      	adds	r6, r7, #1
 8006502:	f7f9 fe75 	bl	80001f0 <memchr>
 8006506:	2800      	cmp	r0, #0
 8006508:	d038      	beq.n	800657c <_svfiprintf_r+0x1c8>
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <_svfiprintf_r+0x1e8>)
 800650c:	bb13      	cbnz	r3, 8006554 <_svfiprintf_r+0x1a0>
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	3307      	adds	r3, #7
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	3308      	adds	r3, #8
 8006518:	9303      	str	r3, [sp, #12]
 800651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651c:	444b      	add	r3, r9
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	e76d      	b.n	80063fe <_svfiprintf_r+0x4a>
 8006522:	fb05 3202 	mla	r2, r5, r2, r3
 8006526:	2001      	movs	r0, #1
 8006528:	460f      	mov	r7, r1
 800652a:	e7a6      	b.n	800647a <_svfiprintf_r+0xc6>
 800652c:	2300      	movs	r3, #0
 800652e:	3701      	adds	r7, #1
 8006530:	9305      	str	r3, [sp, #20]
 8006532:	4619      	mov	r1, r3
 8006534:	250a      	movs	r5, #10
 8006536:	4638      	mov	r0, r7
 8006538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800653c:	3a30      	subs	r2, #48	; 0x30
 800653e:	2a09      	cmp	r2, #9
 8006540:	d903      	bls.n	800654a <_svfiprintf_r+0x196>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0c8      	beq.n	80064d8 <_svfiprintf_r+0x124>
 8006546:	9105      	str	r1, [sp, #20]
 8006548:	e7c6      	b.n	80064d8 <_svfiprintf_r+0x124>
 800654a:	fb05 2101 	mla	r1, r5, r1, r2
 800654e:	2301      	movs	r3, #1
 8006550:	4607      	mov	r7, r0
 8006552:	e7f0      	b.n	8006536 <_svfiprintf_r+0x182>
 8006554:	ab03      	add	r3, sp, #12
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	4622      	mov	r2, r4
 800655a:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <_svfiprintf_r+0x1ec>)
 800655c:	a904      	add	r1, sp, #16
 800655e:	4640      	mov	r0, r8
 8006560:	f3af 8000 	nop.w
 8006564:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006568:	4681      	mov	r9, r0
 800656a:	d1d6      	bne.n	800651a <_svfiprintf_r+0x166>
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	065b      	lsls	r3, r3, #25
 8006570:	f53f af35 	bmi.w	80063de <_svfiprintf_r+0x2a>
 8006574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006576:	b01d      	add	sp, #116	; 0x74
 8006578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657c:	ab03      	add	r3, sp, #12
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	4622      	mov	r2, r4
 8006582:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <_svfiprintf_r+0x1ec>)
 8006584:	a904      	add	r1, sp, #16
 8006586:	4640      	mov	r0, r8
 8006588:	f000 f882 	bl	8006690 <_printf_i>
 800658c:	e7ea      	b.n	8006564 <_svfiprintf_r+0x1b0>
 800658e:	bf00      	nop
 8006590:	08007060 	.word	0x08007060
 8006594:	08007066 	.word	0x08007066
 8006598:	0800706a 	.word	0x0800706a
 800659c:	00000000 	.word	0x00000000
 80065a0:	08006301 	.word	0x08006301

080065a4 <_printf_common>:
 80065a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a8:	4691      	mov	r9, r2
 80065aa:	461f      	mov	r7, r3
 80065ac:	688a      	ldr	r2, [r1, #8]
 80065ae:	690b      	ldr	r3, [r1, #16]
 80065b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065b4:	4293      	cmp	r3, r2
 80065b6:	bfb8      	it	lt
 80065b8:	4613      	movlt	r3, r2
 80065ba:	f8c9 3000 	str.w	r3, [r9]
 80065be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065c2:	4606      	mov	r6, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	b112      	cbz	r2, 80065ce <_printf_common+0x2a>
 80065c8:	3301      	adds	r3, #1
 80065ca:	f8c9 3000 	str.w	r3, [r9]
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	0699      	lsls	r1, r3, #26
 80065d2:	bf42      	ittt	mi
 80065d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065d8:	3302      	addmi	r3, #2
 80065da:	f8c9 3000 	strmi.w	r3, [r9]
 80065de:	6825      	ldr	r5, [r4, #0]
 80065e0:	f015 0506 	ands.w	r5, r5, #6
 80065e4:	d107      	bne.n	80065f6 <_printf_common+0x52>
 80065e6:	f104 0a19 	add.w	sl, r4, #25
 80065ea:	68e3      	ldr	r3, [r4, #12]
 80065ec:	f8d9 2000 	ldr.w	r2, [r9]
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	42ab      	cmp	r3, r5
 80065f4:	dc28      	bgt.n	8006648 <_printf_common+0xa4>
 80065f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	3300      	adds	r3, #0
 80065fe:	bf18      	it	ne
 8006600:	2301      	movne	r3, #1
 8006602:	0692      	lsls	r2, r2, #26
 8006604:	d42d      	bmi.n	8006662 <_printf_common+0xbe>
 8006606:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800660a:	4639      	mov	r1, r7
 800660c:	4630      	mov	r0, r6
 800660e:	47c0      	blx	r8
 8006610:	3001      	adds	r0, #1
 8006612:	d020      	beq.n	8006656 <_printf_common+0xb2>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	68e5      	ldr	r5, [r4, #12]
 8006618:	f8d9 2000 	ldr.w	r2, [r9]
 800661c:	f003 0306 	and.w	r3, r3, #6
 8006620:	2b04      	cmp	r3, #4
 8006622:	bf08      	it	eq
 8006624:	1aad      	subeq	r5, r5, r2
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	6922      	ldr	r2, [r4, #16]
 800662a:	bf0c      	ite	eq
 800662c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006630:	2500      	movne	r5, #0
 8006632:	4293      	cmp	r3, r2
 8006634:	bfc4      	itt	gt
 8006636:	1a9b      	subgt	r3, r3, r2
 8006638:	18ed      	addgt	r5, r5, r3
 800663a:	f04f 0900 	mov.w	r9, #0
 800663e:	341a      	adds	r4, #26
 8006640:	454d      	cmp	r5, r9
 8006642:	d11a      	bne.n	800667a <_printf_common+0xd6>
 8006644:	2000      	movs	r0, #0
 8006646:	e008      	b.n	800665a <_printf_common+0xb6>
 8006648:	2301      	movs	r3, #1
 800664a:	4652      	mov	r2, sl
 800664c:	4639      	mov	r1, r7
 800664e:	4630      	mov	r0, r6
 8006650:	47c0      	blx	r8
 8006652:	3001      	adds	r0, #1
 8006654:	d103      	bne.n	800665e <_printf_common+0xba>
 8006656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665e:	3501      	adds	r5, #1
 8006660:	e7c3      	b.n	80065ea <_printf_common+0x46>
 8006662:	18e1      	adds	r1, r4, r3
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	2030      	movs	r0, #48	; 0x30
 8006668:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800666c:	4422      	add	r2, r4
 800666e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006672:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006676:	3302      	adds	r3, #2
 8006678:	e7c5      	b.n	8006606 <_printf_common+0x62>
 800667a:	2301      	movs	r3, #1
 800667c:	4622      	mov	r2, r4
 800667e:	4639      	mov	r1, r7
 8006680:	4630      	mov	r0, r6
 8006682:	47c0      	blx	r8
 8006684:	3001      	adds	r0, #1
 8006686:	d0e6      	beq.n	8006656 <_printf_common+0xb2>
 8006688:	f109 0901 	add.w	r9, r9, #1
 800668c:	e7d8      	b.n	8006640 <_printf_common+0x9c>
	...

08006690 <_printf_i>:
 8006690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006694:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006698:	460c      	mov	r4, r1
 800669a:	7e09      	ldrb	r1, [r1, #24]
 800669c:	b085      	sub	sp, #20
 800669e:	296e      	cmp	r1, #110	; 0x6e
 80066a0:	4617      	mov	r7, r2
 80066a2:	4606      	mov	r6, r0
 80066a4:	4698      	mov	r8, r3
 80066a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066a8:	f000 80b3 	beq.w	8006812 <_printf_i+0x182>
 80066ac:	d822      	bhi.n	80066f4 <_printf_i+0x64>
 80066ae:	2963      	cmp	r1, #99	; 0x63
 80066b0:	d036      	beq.n	8006720 <_printf_i+0x90>
 80066b2:	d80a      	bhi.n	80066ca <_printf_i+0x3a>
 80066b4:	2900      	cmp	r1, #0
 80066b6:	f000 80b9 	beq.w	800682c <_printf_i+0x19c>
 80066ba:	2958      	cmp	r1, #88	; 0x58
 80066bc:	f000 8083 	beq.w	80067c6 <_printf_i+0x136>
 80066c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80066c8:	e032      	b.n	8006730 <_printf_i+0xa0>
 80066ca:	2964      	cmp	r1, #100	; 0x64
 80066cc:	d001      	beq.n	80066d2 <_printf_i+0x42>
 80066ce:	2969      	cmp	r1, #105	; 0x69
 80066d0:	d1f6      	bne.n	80066c0 <_printf_i+0x30>
 80066d2:	6820      	ldr	r0, [r4, #0]
 80066d4:	6813      	ldr	r3, [r2, #0]
 80066d6:	0605      	lsls	r5, r0, #24
 80066d8:	f103 0104 	add.w	r1, r3, #4
 80066dc:	d52a      	bpl.n	8006734 <_printf_i+0xa4>
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da03      	bge.n	80066ee <_printf_i+0x5e>
 80066e6:	222d      	movs	r2, #45	; 0x2d
 80066e8:	425b      	negs	r3, r3
 80066ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066ee:	486f      	ldr	r0, [pc, #444]	; (80068ac <_printf_i+0x21c>)
 80066f0:	220a      	movs	r2, #10
 80066f2:	e039      	b.n	8006768 <_printf_i+0xd8>
 80066f4:	2973      	cmp	r1, #115	; 0x73
 80066f6:	f000 809d 	beq.w	8006834 <_printf_i+0x1a4>
 80066fa:	d808      	bhi.n	800670e <_printf_i+0x7e>
 80066fc:	296f      	cmp	r1, #111	; 0x6f
 80066fe:	d020      	beq.n	8006742 <_printf_i+0xb2>
 8006700:	2970      	cmp	r1, #112	; 0x70
 8006702:	d1dd      	bne.n	80066c0 <_printf_i+0x30>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	f043 0320 	orr.w	r3, r3, #32
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	e003      	b.n	8006716 <_printf_i+0x86>
 800670e:	2975      	cmp	r1, #117	; 0x75
 8006710:	d017      	beq.n	8006742 <_printf_i+0xb2>
 8006712:	2978      	cmp	r1, #120	; 0x78
 8006714:	d1d4      	bne.n	80066c0 <_printf_i+0x30>
 8006716:	2378      	movs	r3, #120	; 0x78
 8006718:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800671c:	4864      	ldr	r0, [pc, #400]	; (80068b0 <_printf_i+0x220>)
 800671e:	e055      	b.n	80067cc <_printf_i+0x13c>
 8006720:	6813      	ldr	r3, [r2, #0]
 8006722:	1d19      	adds	r1, r3, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6011      	str	r1, [r2, #0]
 8006728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800672c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006730:	2301      	movs	r3, #1
 8006732:	e08c      	b.n	800684e <_printf_i+0x1be>
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6011      	str	r1, [r2, #0]
 8006738:	f010 0f40 	tst.w	r0, #64	; 0x40
 800673c:	bf18      	it	ne
 800673e:	b21b      	sxthne	r3, r3
 8006740:	e7cf      	b.n	80066e2 <_printf_i+0x52>
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	6825      	ldr	r5, [r4, #0]
 8006746:	1d18      	adds	r0, r3, #4
 8006748:	6010      	str	r0, [r2, #0]
 800674a:	0628      	lsls	r0, r5, #24
 800674c:	d501      	bpl.n	8006752 <_printf_i+0xc2>
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	e002      	b.n	8006758 <_printf_i+0xc8>
 8006752:	0668      	lsls	r0, r5, #25
 8006754:	d5fb      	bpl.n	800674e <_printf_i+0xbe>
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	4854      	ldr	r0, [pc, #336]	; (80068ac <_printf_i+0x21c>)
 800675a:	296f      	cmp	r1, #111	; 0x6f
 800675c:	bf14      	ite	ne
 800675e:	220a      	movne	r2, #10
 8006760:	2208      	moveq	r2, #8
 8006762:	2100      	movs	r1, #0
 8006764:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006768:	6865      	ldr	r5, [r4, #4]
 800676a:	60a5      	str	r5, [r4, #8]
 800676c:	2d00      	cmp	r5, #0
 800676e:	f2c0 8095 	blt.w	800689c <_printf_i+0x20c>
 8006772:	6821      	ldr	r1, [r4, #0]
 8006774:	f021 0104 	bic.w	r1, r1, #4
 8006778:	6021      	str	r1, [r4, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d13d      	bne.n	80067fa <_printf_i+0x16a>
 800677e:	2d00      	cmp	r5, #0
 8006780:	f040 808e 	bne.w	80068a0 <_printf_i+0x210>
 8006784:	4665      	mov	r5, ip
 8006786:	2a08      	cmp	r2, #8
 8006788:	d10b      	bne.n	80067a2 <_printf_i+0x112>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	07db      	lsls	r3, r3, #31
 800678e:	d508      	bpl.n	80067a2 <_printf_i+0x112>
 8006790:	6923      	ldr	r3, [r4, #16]
 8006792:	6862      	ldr	r2, [r4, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	bfde      	ittt	le
 8006798:	2330      	movle	r3, #48	; 0x30
 800679a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800679e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80067a2:	ebac 0305 	sub.w	r3, ip, r5
 80067a6:	6123      	str	r3, [r4, #16]
 80067a8:	f8cd 8000 	str.w	r8, [sp]
 80067ac:	463b      	mov	r3, r7
 80067ae:	aa03      	add	r2, sp, #12
 80067b0:	4621      	mov	r1, r4
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff fef6 	bl	80065a4 <_printf_common>
 80067b8:	3001      	adds	r0, #1
 80067ba:	d14d      	bne.n	8006858 <_printf_i+0x1c8>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c0:	b005      	add	sp, #20
 80067c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067c6:	4839      	ldr	r0, [pc, #228]	; (80068ac <_printf_i+0x21c>)
 80067c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80067cc:	6813      	ldr	r3, [r2, #0]
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	1d1d      	adds	r5, r3, #4
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6015      	str	r5, [r2, #0]
 80067d6:	060a      	lsls	r2, r1, #24
 80067d8:	d50b      	bpl.n	80067f2 <_printf_i+0x162>
 80067da:	07ca      	lsls	r2, r1, #31
 80067dc:	bf44      	itt	mi
 80067de:	f041 0120 	orrmi.w	r1, r1, #32
 80067e2:	6021      	strmi	r1, [r4, #0]
 80067e4:	b91b      	cbnz	r3, 80067ee <_printf_i+0x15e>
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	f022 0220 	bic.w	r2, r2, #32
 80067ec:	6022      	str	r2, [r4, #0]
 80067ee:	2210      	movs	r2, #16
 80067f0:	e7b7      	b.n	8006762 <_printf_i+0xd2>
 80067f2:	064d      	lsls	r5, r1, #25
 80067f4:	bf48      	it	mi
 80067f6:	b29b      	uxthmi	r3, r3
 80067f8:	e7ef      	b.n	80067da <_printf_i+0x14a>
 80067fa:	4665      	mov	r5, ip
 80067fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006800:	fb02 3311 	mls	r3, r2, r1, r3
 8006804:	5cc3      	ldrb	r3, [r0, r3]
 8006806:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800680a:	460b      	mov	r3, r1
 800680c:	2900      	cmp	r1, #0
 800680e:	d1f5      	bne.n	80067fc <_printf_i+0x16c>
 8006810:	e7b9      	b.n	8006786 <_printf_i+0xf6>
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	6825      	ldr	r5, [r4, #0]
 8006816:	6961      	ldr	r1, [r4, #20]
 8006818:	1d18      	adds	r0, r3, #4
 800681a:	6010      	str	r0, [r2, #0]
 800681c:	0628      	lsls	r0, r5, #24
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	d501      	bpl.n	8006826 <_printf_i+0x196>
 8006822:	6019      	str	r1, [r3, #0]
 8006824:	e002      	b.n	800682c <_printf_i+0x19c>
 8006826:	066a      	lsls	r2, r5, #25
 8006828:	d5fb      	bpl.n	8006822 <_printf_i+0x192>
 800682a:	8019      	strh	r1, [r3, #0]
 800682c:	2300      	movs	r3, #0
 800682e:	6123      	str	r3, [r4, #16]
 8006830:	4665      	mov	r5, ip
 8006832:	e7b9      	b.n	80067a8 <_printf_i+0x118>
 8006834:	6813      	ldr	r3, [r2, #0]
 8006836:	1d19      	adds	r1, r3, #4
 8006838:	6011      	str	r1, [r2, #0]
 800683a:	681d      	ldr	r5, [r3, #0]
 800683c:	6862      	ldr	r2, [r4, #4]
 800683e:	2100      	movs	r1, #0
 8006840:	4628      	mov	r0, r5
 8006842:	f7f9 fcd5 	bl	80001f0 <memchr>
 8006846:	b108      	cbz	r0, 800684c <_printf_i+0x1bc>
 8006848:	1b40      	subs	r0, r0, r5
 800684a:	6060      	str	r0, [r4, #4]
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	2300      	movs	r3, #0
 8006852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006856:	e7a7      	b.n	80067a8 <_printf_i+0x118>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	462a      	mov	r2, r5
 800685c:	4639      	mov	r1, r7
 800685e:	4630      	mov	r0, r6
 8006860:	47c0      	blx	r8
 8006862:	3001      	adds	r0, #1
 8006864:	d0aa      	beq.n	80067bc <_printf_i+0x12c>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	079b      	lsls	r3, r3, #30
 800686a:	d413      	bmi.n	8006894 <_printf_i+0x204>
 800686c:	68e0      	ldr	r0, [r4, #12]
 800686e:	9b03      	ldr	r3, [sp, #12]
 8006870:	4298      	cmp	r0, r3
 8006872:	bfb8      	it	lt
 8006874:	4618      	movlt	r0, r3
 8006876:	e7a3      	b.n	80067c0 <_printf_i+0x130>
 8006878:	2301      	movs	r3, #1
 800687a:	464a      	mov	r2, r9
 800687c:	4639      	mov	r1, r7
 800687e:	4630      	mov	r0, r6
 8006880:	47c0      	blx	r8
 8006882:	3001      	adds	r0, #1
 8006884:	d09a      	beq.n	80067bc <_printf_i+0x12c>
 8006886:	3501      	adds	r5, #1
 8006888:	68e3      	ldr	r3, [r4, #12]
 800688a:	9a03      	ldr	r2, [sp, #12]
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	42ab      	cmp	r3, r5
 8006890:	dcf2      	bgt.n	8006878 <_printf_i+0x1e8>
 8006892:	e7eb      	b.n	800686c <_printf_i+0x1dc>
 8006894:	2500      	movs	r5, #0
 8006896:	f104 0919 	add.w	r9, r4, #25
 800689a:	e7f5      	b.n	8006888 <_printf_i+0x1f8>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1ac      	bne.n	80067fa <_printf_i+0x16a>
 80068a0:	7803      	ldrb	r3, [r0, #0]
 80068a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068aa:	e76c      	b.n	8006786 <_printf_i+0xf6>
 80068ac:	08007071 	.word	0x08007071
 80068b0:	08007082 	.word	0x08007082

080068b4 <memcpy>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	1e43      	subs	r3, r0, #1
 80068b8:	440a      	add	r2, r1
 80068ba:	4291      	cmp	r1, r2
 80068bc:	d100      	bne.n	80068c0 <memcpy+0xc>
 80068be:	bd10      	pop	{r4, pc}
 80068c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068c8:	e7f7      	b.n	80068ba <memcpy+0x6>

080068ca <memmove>:
 80068ca:	4288      	cmp	r0, r1
 80068cc:	b510      	push	{r4, lr}
 80068ce:	eb01 0302 	add.w	r3, r1, r2
 80068d2:	d807      	bhi.n	80068e4 <memmove+0x1a>
 80068d4:	1e42      	subs	r2, r0, #1
 80068d6:	4299      	cmp	r1, r3
 80068d8:	d00a      	beq.n	80068f0 <memmove+0x26>
 80068da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80068e2:	e7f8      	b.n	80068d6 <memmove+0xc>
 80068e4:	4283      	cmp	r3, r0
 80068e6:	d9f5      	bls.n	80068d4 <memmove+0xa>
 80068e8:	1881      	adds	r1, r0, r2
 80068ea:	1ad2      	subs	r2, r2, r3
 80068ec:	42d3      	cmn	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memmove+0x28>
 80068f0:	bd10      	pop	{r4, pc}
 80068f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80068fa:	e7f7      	b.n	80068ec <memmove+0x22>

080068fc <_free_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4605      	mov	r5, r0
 8006900:	2900      	cmp	r1, #0
 8006902:	d045      	beq.n	8006990 <_free_r+0x94>
 8006904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006908:	1f0c      	subs	r4, r1, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfb8      	it	lt
 800690e:	18e4      	addlt	r4, r4, r3
 8006910:	f000 f8d2 	bl	8006ab8 <__malloc_lock>
 8006914:	4a1f      	ldr	r2, [pc, #124]	; (8006994 <_free_r+0x98>)
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	4610      	mov	r0, r2
 800691a:	b933      	cbnz	r3, 800692a <_free_r+0x2e>
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6014      	str	r4, [r2, #0]
 8006920:	4628      	mov	r0, r5
 8006922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006926:	f000 b8c8 	b.w	8006aba <__malloc_unlock>
 800692a:	42a3      	cmp	r3, r4
 800692c:	d90c      	bls.n	8006948 <_free_r+0x4c>
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	1862      	adds	r2, r4, r1
 8006932:	4293      	cmp	r3, r2
 8006934:	bf04      	itt	eq
 8006936:	681a      	ldreq	r2, [r3, #0]
 8006938:	685b      	ldreq	r3, [r3, #4]
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	bf04      	itt	eq
 800693e:	1852      	addeq	r2, r2, r1
 8006940:	6022      	streq	r2, [r4, #0]
 8006942:	6004      	str	r4, [r0, #0]
 8006944:	e7ec      	b.n	8006920 <_free_r+0x24>
 8006946:	4613      	mov	r3, r2
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	b10a      	cbz	r2, 8006950 <_free_r+0x54>
 800694c:	42a2      	cmp	r2, r4
 800694e:	d9fa      	bls.n	8006946 <_free_r+0x4a>
 8006950:	6819      	ldr	r1, [r3, #0]
 8006952:	1858      	adds	r0, r3, r1
 8006954:	42a0      	cmp	r0, r4
 8006956:	d10b      	bne.n	8006970 <_free_r+0x74>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	4401      	add	r1, r0
 800695c:	1858      	adds	r0, r3, r1
 800695e:	4282      	cmp	r2, r0
 8006960:	6019      	str	r1, [r3, #0]
 8006962:	d1dd      	bne.n	8006920 <_free_r+0x24>
 8006964:	6810      	ldr	r0, [r2, #0]
 8006966:	6852      	ldr	r2, [r2, #4]
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	4401      	add	r1, r0
 800696c:	6019      	str	r1, [r3, #0]
 800696e:	e7d7      	b.n	8006920 <_free_r+0x24>
 8006970:	d902      	bls.n	8006978 <_free_r+0x7c>
 8006972:	230c      	movs	r3, #12
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	e7d3      	b.n	8006920 <_free_r+0x24>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	1821      	adds	r1, r4, r0
 800697c:	428a      	cmp	r2, r1
 800697e:	bf04      	itt	eq
 8006980:	6811      	ldreq	r1, [r2, #0]
 8006982:	6852      	ldreq	r2, [r2, #4]
 8006984:	6062      	str	r2, [r4, #4]
 8006986:	bf04      	itt	eq
 8006988:	1809      	addeq	r1, r1, r0
 800698a:	6021      	streq	r1, [r4, #0]
 800698c:	605c      	str	r4, [r3, #4]
 800698e:	e7c7      	b.n	8006920 <_free_r+0x24>
 8006990:	bd38      	pop	{r3, r4, r5, pc}
 8006992:	bf00      	nop
 8006994:	200002dc 	.word	0x200002dc

08006998 <_malloc_r>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	1ccd      	adds	r5, r1, #3
 800699c:	f025 0503 	bic.w	r5, r5, #3
 80069a0:	3508      	adds	r5, #8
 80069a2:	2d0c      	cmp	r5, #12
 80069a4:	bf38      	it	cc
 80069a6:	250c      	movcc	r5, #12
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	4606      	mov	r6, r0
 80069ac:	db01      	blt.n	80069b2 <_malloc_r+0x1a>
 80069ae:	42a9      	cmp	r1, r5
 80069b0:	d903      	bls.n	80069ba <_malloc_r+0x22>
 80069b2:	230c      	movs	r3, #12
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	2000      	movs	r0, #0
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	f000 f87d 	bl	8006ab8 <__malloc_lock>
 80069be:	4a21      	ldr	r2, [pc, #132]	; (8006a44 <_malloc_r+0xac>)
 80069c0:	6814      	ldr	r4, [r2, #0]
 80069c2:	4621      	mov	r1, r4
 80069c4:	b991      	cbnz	r1, 80069ec <_malloc_r+0x54>
 80069c6:	4c20      	ldr	r4, [pc, #128]	; (8006a48 <_malloc_r+0xb0>)
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	b91b      	cbnz	r3, 80069d4 <_malloc_r+0x3c>
 80069cc:	4630      	mov	r0, r6
 80069ce:	f000 f863 	bl	8006a98 <_sbrk_r>
 80069d2:	6020      	str	r0, [r4, #0]
 80069d4:	4629      	mov	r1, r5
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f85e 	bl	8006a98 <_sbrk_r>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d124      	bne.n	8006a2a <_malloc_r+0x92>
 80069e0:	230c      	movs	r3, #12
 80069e2:	6033      	str	r3, [r6, #0]
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f868 	bl	8006aba <__malloc_unlock>
 80069ea:	e7e4      	b.n	80069b6 <_malloc_r+0x1e>
 80069ec:	680b      	ldr	r3, [r1, #0]
 80069ee:	1b5b      	subs	r3, r3, r5
 80069f0:	d418      	bmi.n	8006a24 <_malloc_r+0x8c>
 80069f2:	2b0b      	cmp	r3, #11
 80069f4:	d90f      	bls.n	8006a16 <_malloc_r+0x7e>
 80069f6:	600b      	str	r3, [r1, #0]
 80069f8:	50cd      	str	r5, [r1, r3]
 80069fa:	18cc      	adds	r4, r1, r3
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 f85c 	bl	8006aba <__malloc_unlock>
 8006a02:	f104 000b 	add.w	r0, r4, #11
 8006a06:	1d23      	adds	r3, r4, #4
 8006a08:	f020 0007 	bic.w	r0, r0, #7
 8006a0c:	1ac3      	subs	r3, r0, r3
 8006a0e:	d0d3      	beq.n	80069b8 <_malloc_r+0x20>
 8006a10:	425a      	negs	r2, r3
 8006a12:	50e2      	str	r2, [r4, r3]
 8006a14:	e7d0      	b.n	80069b8 <_malloc_r+0x20>
 8006a16:	428c      	cmp	r4, r1
 8006a18:	684b      	ldr	r3, [r1, #4]
 8006a1a:	bf16      	itet	ne
 8006a1c:	6063      	strne	r3, [r4, #4]
 8006a1e:	6013      	streq	r3, [r2, #0]
 8006a20:	460c      	movne	r4, r1
 8006a22:	e7eb      	b.n	80069fc <_malloc_r+0x64>
 8006a24:	460c      	mov	r4, r1
 8006a26:	6849      	ldr	r1, [r1, #4]
 8006a28:	e7cc      	b.n	80069c4 <_malloc_r+0x2c>
 8006a2a:	1cc4      	adds	r4, r0, #3
 8006a2c:	f024 0403 	bic.w	r4, r4, #3
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	d005      	beq.n	8006a40 <_malloc_r+0xa8>
 8006a34:	1a21      	subs	r1, r4, r0
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 f82e 	bl	8006a98 <_sbrk_r>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d0cf      	beq.n	80069e0 <_malloc_r+0x48>
 8006a40:	6025      	str	r5, [r4, #0]
 8006a42:	e7db      	b.n	80069fc <_malloc_r+0x64>
 8006a44:	200002dc 	.word	0x200002dc
 8006a48:	200002e0 	.word	0x200002e0

08006a4c <_realloc_r>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	4607      	mov	r7, r0
 8006a50:	4614      	mov	r4, r2
 8006a52:	460e      	mov	r6, r1
 8006a54:	b921      	cbnz	r1, 8006a60 <_realloc_r+0x14>
 8006a56:	4611      	mov	r1, r2
 8006a58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a5c:	f7ff bf9c 	b.w	8006998 <_malloc_r>
 8006a60:	b922      	cbnz	r2, 8006a6c <_realloc_r+0x20>
 8006a62:	f7ff ff4b 	bl	80068fc <_free_r>
 8006a66:	4625      	mov	r5, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6c:	f000 f826 	bl	8006abc <_malloc_usable_size_r>
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d20f      	bcs.n	8006a94 <_realloc_r+0x48>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4638      	mov	r0, r7
 8006a78:	f7ff ff8e 	bl	8006998 <_malloc_r>
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d0f2      	beq.n	8006a68 <_realloc_r+0x1c>
 8006a82:	4631      	mov	r1, r6
 8006a84:	4622      	mov	r2, r4
 8006a86:	f7ff ff15 	bl	80068b4 <memcpy>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	f7ff ff35 	bl	80068fc <_free_r>
 8006a92:	e7e9      	b.n	8006a68 <_realloc_r+0x1c>
 8006a94:	4635      	mov	r5, r6
 8006a96:	e7e7      	b.n	8006a68 <_realloc_r+0x1c>

08006a98 <_sbrk_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4c06      	ldr	r4, [pc, #24]	; (8006ab4 <_sbrk_r+0x1c>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	f7fa fc62 	bl	800136c <_sbrk>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_sbrk_r+0x1a>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_sbrk_r+0x1a>
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20004878 	.word	0x20004878

08006ab8 <__malloc_lock>:
 8006ab8:	4770      	bx	lr

08006aba <__malloc_unlock>:
 8006aba:	4770      	bx	lr

08006abc <_malloc_usable_size_r>:
 8006abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac0:	1f18      	subs	r0, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfbc      	itt	lt
 8006ac6:	580b      	ldrlt	r3, [r1, r0]
 8006ac8:	18c0      	addlt	r0, r0, r3
 8006aca:	4770      	bx	lr

08006acc <_init>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_fini>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr
